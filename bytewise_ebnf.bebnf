grammar = rule*;
rule = left-hand side, "=", element list, ";";
terminal = single quoted string | double quoted string | character list | dot;
single quoted string = "'", string character*, "'";
double quoted string = '"', string character*, '"';
string character = [^\\] | escaped character | character specification | bitfield specification | endianness designation;
escaped character = "\\", [^beEuUx];
character specification = "\\", (("b", [01xX]{8}) | ("x", hex digit{2}) | ("u", hex digit{4}) | ("U", hex digit{8}));
bitfield specification = "\\", (("b{", ([01xX]{8})+, "}") | ("x{", hex digit+, "}"));
endianness designation = "\\", [eE], "{", (hex digit+ | (character specification | bitfield specification)+), "}";
hex digit = [a-fA-F0-9xX];
character list = "[", ([^\\[] | escaped character | character specification | character class)+, "]";
character class = "[:", ("alnum" | "alpha" | "blank" | "cntrl" | "digit" | "graph" | "lower" | "print" | "punct" | "space" | "upper" | "xdigit"), ":]";
non-terminal = [^"'(,|[], [^(,|]*;
left-hand side = non-terminal, ("|", non-terminal)*;
element choice = element, ("|", element)*;
element = (group | terminal | non-terminal | named group), repetition?;
element list = element choice, (",", element choice)*;
group = "(", element list, ")";
repetition = [*+] | ("{", expression, (",", expression)?, "}");
expression = sum;
sum = (sum, [+-], term) | term;
term = (term, [*/], shift) | shift;
shift = (shift, ("<<" | ">>"), operand) | operand;
operand = ("(", expression, ")") | named group | number;
number = [0-9]+;
