// Avoid check for null body
document.__defineGetter__( 'body', function() { return document.documentElement } )

// Add array iterator
Array.prototype.each = Array.prototype.each || function each( f, args ) {
  if( typeof f == 'function' ) {
    for( var i = 0; i < this.length; i++ ) {
      ( function( item, args ) {
        f.apply( this, [ item, i, args ] )
      } ).apply(
        this,
        [ this[i], args ]
      )
    }
  }
}

;( function() {
  // Location of jQuery script
  var JQUERY_LIB = 'https://ajax.googleapis.com/ajax/libs/jquery/1.5.1/jquery.min.js'
  
  // Extract namespaces
  var ns = ( function() {
    var ns = {}
    document.documentElement.attributes.each( function( ) {
      if( match = /^(?:xmlns:?)(.*)/.exec( this.nodeName ) ) {
        var name = match[1] || ''
        namespaces[ name ] = this.nodeValue
      }
    } )
    ns.toString = function() { return ns[''] }
    return ns
  } )


  // Return a reasonable result for requested test div
  //
  // Avoid: jquery.js:1099
  // Chrome: Uncaught TypeError: Cannot set property 'display' of null
  var createElement = document.createElement

  document.createElement = function( name ) {
    if( name == 'div' ) {
      ret = document.createElementNS( ns, 'g' )
    } else {
      ret = createElement.call( this, name )
    }
    return ret
  }

  // This script insertion doesn't execute until after the document scripts
  var script = document.createElementNS( ns, 'script' )
  script.setAttribute( 'type', 'text/javascript' )
  script.setAttributeNS( ns[ 'xlink' ], 'href', JQUERY_LIB )
  
  // Find the current script
  var scripts = document.getElementsByTagName( 'script' )
  var current = scripts[ scripts.length - 1 ]
  console.log( current )
  current.parentNode.appendChild( script )
} )()
