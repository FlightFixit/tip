$( function() {
    console.debug( 'Replacing use with inline documents' )
    $('use').each( function() {
        var $use = $(this)
        var link = $use.attr( 'xlink:href' )
        if( ! link ) {
            link = $use.attr( 'href' )
        }
        
        var $doc
        if( link[0] != '#' ) { // non-local link
            $.get( link, function( data ) {
                if( data.documentElement ) {
                    // SVG CSSs are linked as XML processing instructions
                    data.childNodes.each( function() {
                        if( this instanceof ProcessingInstruction ) {
                            var match = this.data.match( /(type='.*?')\s+(href)='(.*?)'\s*/ )
                            if( match ) {
                                var base = link.replace( /\/[^\/]*$/, '/' )
                                var newP = document.createProcessingInstruction
                                ( 'xml-stylesheet',
                                  ( match[1] + ' '
                                    + match[2] + '="' + base + match[3] + '"' ) )
                                //document.insertBefore( this, document.documentElement )
                                //document.insertBefore( this, document.firstChild )
                                //document.insertBefore( document.importNode( this ), document.childNodes[0] )

                                // Crashes
                                //document.insertBefore( newP, document.childNodes[0] )
                                
                                //console.dir( document )
                            }
                        }
                    } )
                    var $doc = $(data.documentElement)
                    var attrs = [ 'x', 'y', 'width', 'height', 'title', 'transform' ]
                    attrs.each( function( attr ) {
                        if( $use.attr( attr ) != undefined ) {
                            $doc.attr( attr, $use.attr( attr ) )
                        }
                    } )
                    $use.replaceWith( $doc )
                    mimis.trigger( '.../lib/svg/swap/use/replacement',
                                   {
                                       $use : $use,
                                       $doc : $doc,
                                   } )
                }
            } )
        } else {
            $use.replaceWith( $(link).clone( true ) )
        }
    } )
} )
