function addValue( entry, $parent ) {
    var $new = $('<li/>').addClass( 'file' )
    if( entry.file ) {
        entry.file( function( file ) {
            var objectURL = window.URL.createObjectURL( file )
            var $link = $('<a/>').attr( { target: 'new', href: objectURL } ).text( file.name )
            $new.append( $link )
        } )
    } else {
        var $link = $('<a/>').attr( { target: 'new', href: entry.href } ).text( entry.name )
        $new.append( $link )
    }
    $parent.append( $new )
    return $new
}

function addDirectory( entry, $parent, id ) {
    var $new = $('<li/>').attr( { id: id } )
    var $input = $('<input/>').attr( {
        type: 'checkbox',
        id: id
    } )
    $new.append( $input )
        .append( $('<label/>').attr( { 'for': $input.attr( 'id' ) } ).text( entry.name ) )
    
    var $fileList = $('<ol/>')
    $new.append( $fileList )
    
    if( entry.createReader ) {
        var dirReader = entry.createReader()
        dirReader.readEntries( function( entries ) {
            $fileList.data( { 'file-entries': entries } )
            for( var i = 0; i < entries.length; i++ ) {
                addEntry( entries[i], $fileList )
            }
        } )
    }
    $parent.append( $new )
    return $new
}

function addObject( object, $parent, id ) {
    if( ! id ) {
        id = ''
    }
    if( id.length > 0 ) {
        id += ' - '
    }
    var props = []
    for( prop in object ) {
        props.push( prop )
    }
    props = props.sort()
    $.each( props, function( index, prop ) {
        var newId = id + prop
        if( typeof object[ prop ] == 'object' ) {
            var $prop = addDirectory( { name: prop }, $parent, newId )
            addObject( object[ prop ], $prop.find( 'ol' ), newId )
        } else {
            addFile( {
                name: prop,
                value: object[ prop ]
            },
                     $parent,
                     newId )
        }
    } )
}

$( function() {
    $.event.props.push('dataTransfer')

    var dropHandler = function( event ) {
	event.preventDefault()

        var path = []
        function addEntry( entry ) {
            var name = entry.name
            path.push( name )
            var id = path.join( ' - ' )
            console.log( id )

            if( entry.isFile ) {
                Pouch( 'mimis', function( err, db ) {
                    db.put( {
                        _id: id,
                        'mimis:type': 'value',
                        isAttachment: true,
                    },
                            function( err, res ) {
                                entry.file( function( file ) {
                                    console.log( file )
                                    db.putAttachment( id + name, res.rev, file, file.type, function( err, res ) {} )
                                } )
                            } )
                } )
            } else if( item.isDirectory ) {
                var dirReader = entry.createReader()
                dirReader.readEntries( function( entries ) {
                    for( var i = 0; i < entries.length; i++ ) {
                        addEntry( entries[i], $fileList )
                    }
                } )
                Pouch( 'mimis', function( err, db ) {
                    db.put( {
                        _id: id,
                        'mimis:type': 'value',
                        isAttachment: true,
                    },
                            function( err, res ) {
                            }
                          )
                    
                addDirectory( entry, $parent )
            }
        }

        var items = event.dataTransfer.items
        var entries = []
        var $list = $(event.target).parent().find( 'ol' ).first()
        for( var i = 0; i < items.length; i++ ) {
            var item = items[i].webkitGetAsEntry()
            addEntry( item, $list )
            entries.push( item )
        }
        //$list.data( { 'file-entries': entries } )
    }

    function dragEnter( e ) {
        e.preventDefault()
    }
    
    function dragOver( e ) {
        e.preventDefault()
    }
     
    function dragLeave( e ) {
        e.stopPropagation()
    }
    
    $(document).on( 'drop', '#filelist, input, label', dropHandler )
        .bind( 'dragenter', dragEnter )
        .bind( 'dragover', dragOver )
        .bind( 'dragleave', dragLeave )

    if( typeof String.prototype.startsWith != 'function' ) {
        String.prototype.startsWith = function ( str ) {
            return this.slice( 0, str.length ) == str
        }
    }

    var $lastSelected
    function selectLabel( id ) {
        var $label = $('[for="' + id + '"]')

        if( $lastSelected ) {
            $lastSelected.removeClass( 'selected' )
        }
        $label.addClass( 'selected' )

        $lastSelected = $label

        var $parent = $label.parent()
        $parent.parents().children( 'input' ).attr( { checked: 'checked' } )

        // ToDo: Scoll selected item visible
        //$('#files').animate( { scrollTop: $label.offset().top }, 'slow' )

        Pouch( 'mimis', function( err, db ) {
            db.get( id, function( err, doc ) {
                for( prop in doc ) {
                    if( ! prop.startsWith( '_' ) ) {
                        if( doc[ 'mimis:type' ] == 'value' ) {
                            if( doc.isAttachment ) {
                                db.getAttachment( id + prop, function( err, res ) {
                                    addFile( {
                                        name: prop,
                                        href: window.URL.createObjectURL( res )
                                    },
                                           $parent )
                                } )
                            }
                        } else {
                            addDirectory( {
                                name: prop
                            },
                                        $parent )
                        }
                    }
                }
            } )
        } )
    }

    $(document).on( 'click', 'label', function( event ) {
        var forInput = $(this).attr( 'for' )
        if( forInput ) {
            event.preventDefault()
            selectLabel( forInput )
        }
    } )

    $(document).on( 'click', '#filelist a', function( event ) {
        event.preventDefault()
        selectLabel( $(this).attr( 'ref-id' ) )
    } )

    $(document).on( 'dblclick', '#filelist, input, label', function( event ) {
        var $item = $(event.target).prev()
        // Is setting, but the page isn't updating
        //$item.attr( 'checked', ! $item.attr( 'checked' ) )
        if( $item.size() > 0 ) {
            if( $item.attr( 'checked' ) ) {
                $item.get(0).removeAttribute( 'checked' )
            } else {
                $item.get(0).setAttribute( 'checked', 'checked' )
            }
        }
    } )
} )
