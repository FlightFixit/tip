if( mimis.$root.__lookupGetter__( 'viewBox' ) === undefined ) {
    mimis.$root.__defineGetter__(
        'viewBox',
        function() {
            var attr = $(this).attr( 'viewBox' ) || '0 0 100 100'
            var split = attr.split( ' ' )
            // ToDo: handle unset viewBox
            return {
                x : mimis.parse.position( split[0] ),
                y : mimis.parse.position( split[1] ),
                width  : mimis.parse.length( split[2] ),
                height : mimis.parse.length( split[3] ),
            }
        } )
}

if( mimis.$root.__lookupSetter__( 'viewBox' ) === undefined ) {
    mimis.$root.__defineSetter__(
        'viewBox',
        function( box ) {
            box =
                mimis.x( mimis.$root.viewBox,
                         box )
            var vals = [
                box.x, box.y, box.width, box.height
            ]
            mimis.$root.attr( {
                viewBox : vals.join( ' ' )
            } )
            return box
        } )
}

if( mimis.$root && mimis.$root.viewBox ) {
    ( function() {
        var initialBox

        mimis.scroll = mimis.scroll || {}
        
        // ToDo: Allow mode changes to stick without key holding

        mimis.$root.bind( 'mousewheel', function( evt ) {
            // Zoom in or out, keeping the location under the pointer fixed
            var box = mimis.$root.viewBox
            initialBox = initialBox || box
            var imp = mimis.scroll.imp || .1
            imp *= evt.wheelDelta / -120 // One scroll
            
            function transform() {
                if( evt.shiftKey ) {
                    if( evt.ctrlKey ) {
                        return { y : box.y + box.width * imp }
                    } else {
                        return { x : box.x + box.height * imp }
                    }
                } else {
                    var delta = {
                        width  : box.width * imp,
                        height : box.height * imp,
                    }
                    // Needs to be the percentage across the image
                    var pos = {
                        x : evt.clientX / window.innerWidth,
                        y : evt.clientY / window.innerHeight,
                    }
                    
                    return {
                        x : box.x - delta.width * pos.x,
                        y : box.y - delta.height * pos.y,
                        width  : box.width + delta.width,
                        height : box.height + delta.height,
                    }
                }
            }
            mimis.$root.viewBox = mimis.x( box, transform() )
        } )
    } )()
}

if( mimis.$root.__lookupGetter__( 'bbox' ) === undefined ) {
    mimis.$root.__defineGetter__(
        'bbox',
        function() {
            return mimis.$root.get(0).getBBox()
        } )
}

( function() {
    var defs = {
        circle : {
            cx : '50%',
            cy : '50%',
            get id() { return ( Math.random() * Number.MAX_VALUE ).toString( 36 ).substring( 0, 10 ) },
        },
        path : {
            get id() { return ( Math.random() * Number.MAX_VALUE ).toString( 36 ).substring( 0, 10 ) },
        },
        use : {
            x : -50,
            y : -50,
            width : 100,
            height : 100,
        },
        rect : {
            x : -50,
            y : -50,
            width : 100,
            height : 100,
        },
    }
    
    function elem( attr, cfg ) {
        var args = Array.prototype.slice.call( cfg )
        with( mimis ) {
            var def = defs[ attr ]
            args[ 0 ] = x( args[ 0 ], defs[ attr ] )
        }
        var named = args.unshift( attr )
        return mimis.$elem.apply( this, args )
    }
    
    mimis.$circle = function( cfg ) {
        if( cfg.path ) {
            return elem( 'path', arguments )
                .attr( {
                    d : ( 'm' + [ '75', '75' ].join( ',' )
                          + ( function() {
                              return ! cfg.reverse
                                  ? ( 'm' + [ 0, cfg.r ].join( ',' )
                                      + ( 'a' +
                                          [
                                              [ cfg.r, cfg.r ].join( ',' ), // rx, ry
                                              0, // rotation
                                              1, // large arc?
                                              1, // sweep?
                                              [ .001, 0 ].join( ',' ), // x, y
                                          ].join( ' ' ) ) )
                                  : ( 'm' + [ 0, -cfg.r ].join( ',' )
                                      + ( 'a' +
                                          [
                                              [ cfg.r, cfg.r ].join( ',' ), // rx, ry
                                              0,
                                              1,
                                              0,
                                              [ .001, 0 ].join( ',' ),
                                          ].join( ' ' ) ) )
                          } )()
                        ),
                } )
        } else {
            return elem( 'circle', arguments )
        }
    }
    
    mimis.$use = mimis.$use || function( cfg ) {
        var href = cfg[ 'xlink:href' ]
        
        if( href[0] == '#' ) { // non-local link
            return elem( 'use', arguments )
        }
        
        var insP = mimis.nil()
        $.get( href, function( data ) {
            if( data.documentElement ) {
                var replaceScripts = mimis.link( '.../lib/mimis/inline/xlink/style/' )
                var doc = replaceScripts( data.documentElement )
                cfg = mimis.x( {}, defs[ 'use' ], cfg )
                insP( $(doc).attr( cfg ) )
            }
        } )
        return insP.$elem
    }
    
    
    ;[ 'use', 'rect', 'circle' ].each( function( attr ) {
        var name = '$' + attr
        mimis[ name ] = mimis[ name ] || function() {
            return elem( attr, arguments )
        }
    } )
    
    function nest( attr ) {
        return function() {
            var $elem = elem( attr, arguments )
            function append( $new ) {
                $elem.append( $new )
                return append
            }
            append.$elem = $elem
            return append
        }
    }
    
    // Nesting
    ;[ 'g', 'a' ].each( function( attr ) {
        var name = '$' + attr
        mimis[ name ] = mimis[ name ] || nest( attr )
    } )
    
    function $text( text ) {
        return $(document.createTextNode( text ))
    }
    
    mimis.$text = mimis.$text || function( cfg ) {
        // <text><textPath xlink:href="#title path"></textPath></text>
        return nest( 'defs' )()(
            cfg.$path.clone()
        ).$elem.after(
            nest( 'text' )()(
                nest( 'textPath' )( {
                    startOffset : '50%',
                    'xlink:href' : '#' + cfg.$path.attr( 'id' ),
                } )(
                    $text( cfg.text )
                ).$elem
            ).$elem
        )
    }
    
    mimis.$path = mimis.$path || function() {
        var args = Array.prototype.slice.call( arguments )
        var path = args.shift()
        args.unshift( 'path' )
        
        function line( points ) {
            var width = 400
            var height = 100
            var out = ''
            points.each( function( point ) {
                var p = {
                    x : point[0],
                    y : point[1],
                }
                if( p.x / width < .1 ) {
                    p.x *= width
                }
                if( p.y / height < .1 ) {
                    p.y *= height
                }
                out += p.x + ',' + p.y + ' '
            } )
            return out
        }
        
        var serializer = function( path ) {
            var out = 'm 0,0'
            path.each( function( elem ) {
                for( shape in elem ) {
                    switch( shape ) {
                    case 'line':
                        out += ' l ' + line( elem[ shape ] )
                        break
                    case 'move':
                        out += ' m ' + line( elem[ shape ] )
                        break
                    }
                }
            } )
            return out
        }
        
        return ( mimis.$elem.apply( this, args )
                 .attr( {
                     get d() {
                         var callee = arguments.callee
                         path = callee.path || path
                         serializer = callee.serializer || serializer
                         return serializer( path )
                     },
                 } ) )
    }
    
    mimis.$anim = mimis.$anim || function() {
        var args = Array.prototype.slice.call( arguments )
        var cfg = args[ 0 ] || {}
        cfg.__defineGetter__( 'attributeName', function() { return cfg.what } )
        cfg.__defineGetter__(           'dur', function() { return cfg.over } )
        //args.unshift(  )
        return elem( 'animate', args )
    }
    
    mimis.nil = mimis.nil || mimis.$g
    
    mimis.$c = mimis.$c || mimis.$circle
} )()


// Format transform
mimis.transform = mimis.x( mimis.transform, {
    t : function( a, b ) {
        return { transform : ( "translate(" + a + ( b && ( ',' + b ) || '' ) + ")" ) }
    },
    s : function( a, b ) {
        return { transform : (     "scale(" + a + ( b && ( ',' + b ) || '' ) + ")" ) }
    },
    r : function( a, b ) {
        return { transform : (    "rotate(" + a + ( b && ( ',' + b ) || '' ) + ")" ) }
    },
} )
  


$.fn = $.fn || {}
$.fn.bbox = $.fn.bbox ||
    function() {
        // ToDo: Handle multiple items
        var bbox = this[0].getBBox()
        return bbox
    }

( function() {
    var attrs = [ 'x', 'y', 'width', 'height' ]
    attrs.each( function( attr ) {
        $.fx.step[ attr ] = $.fx.step[ attr ] || function( fx ) {
            if( ! fx.initialized ) {
                fx.initialized = true
                fx.$elem = $(fx.elem)
                fx.start = fx.$elem.attr( attr )
                // ToDo: Handle percentage lengths
                // ToDo: Migrate to css: 
                fx.start = $.isNaN( fx.start ) ? 0 : parseFloat( fx.start )
                fx.end = $.isNaN( fx.end ) ? 0 : parseFloat( fx.start )
            }
            console.debug( mimis.x( {}, fx ) )
            fx.$elem.attr( attr, fx.start + fx.pos * ( fx.end - fx.start ) )
        }
    } )
} )()
