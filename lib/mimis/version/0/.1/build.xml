<?xml version="1.0" encoding="utf-8"?>
<project name="mimis" xmlns:ivy="antlib:org.apache.ivy.ant" default="jar">
  <loadproperties>
    <file file="java/build/properties"/>
  </loadproperties>
  <loadproperties>
    <file file="java/private/properties"/>
  </loadproperties>

  <target name="keychain-check">
    <mkdir dir="${jar.key.store.dir}" />
    <available file="${jar.key.store}"
               property="keychain.exists" />
  </target>
  
  <target name="make-keychain"
          depends="keychain-check"
          unless="keychain.exists">
    <exec dir="." executable="keytool">
      <arg line="-genkey -keystore '${jar.key.store}' -alias '${jar.key.alias}' -storepass '${jar.key.pass}' -dname '${distinguished.name}'" />
    </exec>
  </target>

  <target name="target-lib-check">
    <available file="target/lib"
               property="target.lib.exists" />
  </target>

  <target name="make-target-lib"
          depends="target-lib-check"
          unless="target.lib.exists">
    <exec dir="." executable="ln">
      <arg line="-s ../lib target/lib"/>
    </exec>
  </target>
  
  <target name="setup" depends="make-keychain" unless="setup.done">
    <mkdir dir="build" />
    <!-- Even with exclude ..., is still overflowing the heap -->
    <copy todir="build">
      <fileset dir="java/src" followsymlinks="false">
        <include name="**/BrowserToJVMBridge.java"/>
        <exclude name="..." />
        <exclude name="**/..." />
      </fileset>
    </copy>

    <ivy:retrieve />
    <ivy:cachepath pathid="lib.path.id"/>

    <property name="setup.done" value="true" />
  </target>
  <target name="jar" depends="setup">
    <javac srcdir="build" destdir="build" deprecation="on"
           classpathref="lib.path.id" includeantruntime="last">
      <!--<compilerarg value="-Xlint"/>-->
<!--
      <classpath>
        <pathelement location="../java/plugin/plugin.jar"/>
      </classpath>
-->
    </javac>

    <mkdir dir="${jar.dir}" />

    <jar destfile="${jar}" basedir="build">
      <manifest>
        <attribute name="Built-By" value="${user.name}"/>
        <attribute name="Main-Class" value="${main.class}" />
        <attribute name="Class-Path"
                   value=".../lib/mimis/lib/plugin-1.0.jar
			  .../lib/mimis/lib/neo4j-kernel-1.4.jar
			  .../lib/mimis/lib/geronimo-jta_1.1_spec-1.1.1.jar"/>
      </manifest>
    </jar>
    <signjar jar="lib/plugin-1.0.jar"
             alias="${jar.key.alias}" storepass="${jar.key.pass}" keystore="${jar.key.store}" />
    <signjar jar="lib/neo4j-kernel-1.4.jar"
             alias="${jar.key.alias}" storepass="${jar.key.pass}" keystore="${jar.key.store}" />
    <signjar jar="lib/geronimo-jta_1.1_spec-1.1.1.jar"
             alias="${jar.key.alias}" storepass="${jar.key.pass}" keystore="${jar.key.store}" />
    <signjar jar="${jar}" alias="${jar.key.alias}" storepass="${jar.key.pass}" keystore="${jar.key.store}" />
  </target>

  <target name="javadoc" depends="setup">
    <propertyregex property="escaped.name"
                   input="${author.name}"
                   regexp=" "
                   replace="%20"
                   global="true" />
    <javadoc packagenames="org.dhappy.*" sourcepath="build/"
             excludepackagenames="" defaultexcludes="yes"
             destdir="java/doc/" windowtitle="${doc.title}"
             author="true" version="true" use="true">
      <doctitle><![CDATA[<h1><a href="${project.uri}">${doc.title}</a></h1>]]></doctitle>
      <bottom><![CDATA[<a href="${author.uri}">${author.name}</a> <a href="mailto:${escaped.name}%20%3C${author.email}%3E">${author.email}</a>]]></bottom>
      <!--
          <tag name="todo" scope="all" description="To do:"/>
          <group title="Group 1 Packages" packages="com.dummy.test.a*"/>
          <group title="Group 2 Packages" packages="com.dummy.test.b*:com.dummy.test.c*"/>
          <link offline="true" href="http://java.sun.com/products/jdk/1.2/docs/api/" packagelistLoc="C:\tmp"/>
          <link href="http://developer.java.sun.com/developer/products/xml/docs/api/"/>
      -->
    </javadoc>
  </target>

  <property name="ivy.install.version" value="2.1.0-1" />
  <condition property="ivy.home" value="${env.IVY_HOME}">
    <isset property="env.IVY_HOME" />
  </condition>
  <property name="ivy.home" value="${user.home}/.ant" />
  <property name="ivy.jar.dir" value="${ivy.home}/lib" />
  <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />

  <target name="download-ivy" unless="offline">
    <mkdir dir="${ivy.jar.dir}"/>
    <!-- download Ivy from web site so that it can be used even without any special installation -->
    <get src="http://repo2.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
         dest="${ivy.jar.file}" usetimestamp="true"/>
  </target>

  <target name="init-ivy" depends="download-ivy">
    <!-- try to load ivy here from ivy home, in case the user has not already dropped
         it into ant's lib dir (note that the latter copy will always take precedence).
         We will not fail as long as local lib dir exists (it may be empty) and
         ivy is in at least one of ant's lib dir or the local lib dir. -->
      <path id="ivy.lib.path">
        <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
      </path>
      <taskdef resource="org/apache/ivy/ant/antlib.xml"
               uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
  </target>
</project>
