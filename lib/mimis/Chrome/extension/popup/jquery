$( function() {
    var links =
        $.extend( {},
                  links,
                  mimis.links,
                  ( function() {
                      // chrome.extension.getURL( '' )
                      var url = $('link[rel="mimis link list"]').attr( 'href' )
                      var links
                      $.ajax( {
                          url : url,
                          dataType : 'text',
                          async : false,
                          success : function( eson ) {
                              links = eval( "( function() { return " + eson + " } )()" )
                          },
                      } )
                      return links
                  } )() )
    
    links.initial.each( function( link ) {
        $('body').append(
            $('<object/>').attr(
                $.extend( {
                    class : 'icon',
                    type : 'image/svg+xml',
                    data : chrome.extension.getURL( link.icon ),
                },
                          link ) ) )
    } )
        
    var url = mimis.url

    if( url == undefined ) {
        // ToDo: Move to definitions file
        webkitNotifications.__defineGetter__(
            'allowed',
            function() {
                webkitNotifications.ALLOWED = webkitNotifications.ALLOWED || 0
                return webkitNotifications.checkPermission() == webkitNotifications.ALLOWED
            } )
            
        if( webkitNotifications.allowed ) {
            var notification = webkitNotifications.createNotification(
                // ToDo: Create error icon
                chrome.extension.getURL( 'icon/48/png' ),
                'Startup Error',
                // ToDo: Add click to go to server section of options
                'Could not find a cache agent. Please configure one.'
            )
            notification.show()
            setTimeout( function() {
                notification.cancel()
            }, 10000 )
        }

        // ToDo: Goto options
    }

    String.prototype.startsWith = String.prototype.startsWith || function( str ) {
        return this.indexOf( str ) === 0
    }

    chrome.tabs.getAllInWindow( undefined, function( tabs ) {
        if( tabs.each( function( tab ) {
            console.log( tab.url )
            if( tab.url.startsWith( url ) ) {
                chrome.tabs.update( tab.id, { selected : true } )
                return false
            }
        } ) ) {
            chrome.tabs.create( {
                url : url,
                selected : false,
                pinned : true,
            }, function( tab ) {
            } )
        }
    } )
} )

/*
chrome.tabs.executeScript( null, {
    file : '',
} )
*/
        
chrome.browserAction.setBadgeText( {
    text : '#',
} )

;( function() {
    var i = 0
    window.setInterval( function() {
        chrome.browserAction.setBadgeBackgroundColor( {
            color : [ Math.round( Math.random() * 255 ),
                      Math.round( Math.random() * 255 ),
                      Math.round( Math.random() * 255 ),
                      Math.round( Math.random() * 255 ) ],
        } )
    }, 3000 )
} )()
