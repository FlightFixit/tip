$( function() {
    var $body = $body || $('body')
    var links =
        $.extend( {},
                  links,
                  mimis.links,
                  ( function() {
                      // chrome.extension.getURL( '' )
                      var url = $('link[rel="mimis link list"]').attr( 'href' )
                      var links
                      $.ajax( {
                          url : url,
                          dataType : 'text',
                          async : false,
                          success : function( eson ) {
                              links = eval( "( function() { return " + eson + " } )()" )
                          },
                      } )
                      return links
                  } )() )
    
    links.initial.each( function( link ) {
        $body.append(
            $('<object/>').attr(
                $.extend( {
                    class : 'icon',
                    type : 'image/svg+xml',
                    data : chrome.extension.getURL( link.icon ),
                },
                          link ) ) )
    } )

    var $status =
        $('<input/>')
        .attr( {
            id : 'status',
            type : 'text',
        } )
        .appendTo( $body )

    ;( function() {
        var statûs = $status.history = []
        $('object[class~="icon"]')
            .bind( {
                mouseenter : function() {
                    statûs.push( $status.text() )
                    $status.text( $(this).attr( 'title' ) )
                },
                mouseexit : function() {
                    var pop = statûs.pop()
                    if( pop !== undefined ) {
                        $status.text( pop )
                    }
                },
            } )
            .each( function() {
                console.log( this )
            } )
    } )()
        
    var uri = mimis.uri

    if( uri == undefined ) {
        mimis.notify( {
            icon : 'logo/svg',
            message : 'mimis.uri is not defined',
            href : 'options/xhtml.xhtml',
        } )
    }

    chrome.tabs.getAllInWindow( undefined, function( tabs ) {
        console.log( uri )
        if( tabs.each( function( tab ) {
            console.log( tab.url )
            console.log( tab.url.indexOf( uri ) )
            console.log( tab.url.startsWith( uri ) )
            if( tab.url.startsWith( uri ) ) {
                chrome.tabs.update( tab.id, { selected : true } )
                return false
            }
        } ) ) {
            chrome.tabs.create( {
                url : uri,
                selected : false,
                pinned : true,
            }, function( tab ) {
            } )
        }
    } )
} )

/*
chrome.tabs.executeScript( null, {
    file : '',
} )
*/
        
chrome.browserAction.setBadgeText( {
    text : '#',
} )

;( function() {
    var i = 0
    window.setInterval( function() {
        chrome.browserAction.setBadgeBackgroundColor( {
            color : [ Math.round( Math.random() * 255 ),
                      Math.round( Math.random() * 255 ),
                      Math.round( Math.random() * 255 ),
                      Math.round( Math.random() * 255 ) ],
        } )
    }, 3000 )
} )()
