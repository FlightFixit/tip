( function() {

// Allow negative indexing for last element
Array.prototype.__defineGetter__( -1, function() {
    return this.length > 0 && this[ this.length - 1 ] || undefined
} )

Array.prototype.__defineSetter__( -1, function( val ) {
    var idx = this.length > 0 ? this.length - 1 : 0
    this[ idx ] = val
} )

/*
if( load && ! mimis ) {
    console.log( load( 'load/js' ) )
}

var $ = $ !== undefined ? $ : mimis.load( '.../lib/jquery/types/jquery' )
*/

// Add array iterator
Array.prototype.each = typeof Array.prototype.each != 'undefined' ? Array.prototype.each :
    function each( f, args ) {
        if( $.isFunction( f ) ) {
            try {
                var out
                for( var i = 0; i < this.length; i++ ) {
                    var ret = f.apply( this[i], [ this[i], i, args ] )
                    if( ret === true || ret === false ) {
                        return ret
                    } else if( ret === undefined ) {
                    } else if( $.isArray( ret )
                               || ret.concatenable ) {
                        out = out || []
                        out = out.concat( ret )
                    } else if( $.isString( ret ) ) {
                        out = out || '' 
                        out = out.concat( ret )
                    } else if( $.isFunction( ret ) ) {
                        ret.call( this, out )
                    } else if( $.isObject( ret ) ) {
                        out = $.extend( true, ret, out )
                    }
                }
                return out
            } catch( e ) {
                console.debug( 'Ã¯:each: Exception In Loop: ', e )
                throw e
            }
        }
        return this
    }


String.prototype.concat = String.prototype.concat ||
    function() {
        var out = ''
        Array.prototype.each.apply( arguments, function() {
            out += this.toString()
        } )
        return out
    }

String.prototype.each = typeof String.prototype.each != 'undefined' ? String.prototype.each : Array.prototype.each

if( typeof NodeList != 'undefined' && NodeList.prototype != null ) {
    NodeList.prototype.each = NodeList.prototype.each || Array.prototype.each
}

if( typeof NamedNodeMap != 'undefined' && NamedNodeMap.prototype != null ) {
    NamedNodeMap.prototype.each = NamedNodeMap.prototype.each || function( f ) {
        Array.prototype.each.apply( this, [ function( attr, idx ) {
            f.apply( attr, [ attr.nodeValue, attr.name ] )
        } ] )
    }
}

/*
Array.prototype.__defineGetter__( 'empty', function() {
    return this.length == 0
} )
*/

/*
// Add array iterator
Array.prototype.each = Array.prototype.each || function each( f, args ) {
  if( typeof f == 'function' ) {
    for( var i = 0; i < this.length; i++ ) {
      ( function( item, args ) {
        f.apply( this, [ item, i, args ] )
      } ).apply(
        this,
        [ this[i], args ]
      )
    }
  }
}
*/
} )()
