( function() {
$ = typeof $ !== 'undefined' ? $ :
    ( function() {
        var class2type = {}
        var classes = 'Boolean Number String Function Array Date RegExp Object'.split(' ')
                     
        for( var i = 0; i < classes.length; i++ ) {
            var name = classes[ i ]
            class2type[ "[object " + name + "]" ] = name.toLowerCase()
        }
                     
        function type( obj ) {
                return obj == null ?
                String( obj ) :
                class2type[ toString.call( obj ) ] || 'object'
        }
        
        var $ = {
            isFunction : function( obj ) {
                return type( obj ) === 'function'
            },
            isArray : typeof Array.isArray !== 'undefined' ? Array.isArray : function( obj ) {
                return type( obj ) === 'array'
            },
            isString : function( str ) {
                return str instanceof String || type( str ) === 'string'
            },
            isObject : function( obj ) {
                return obj instanceof Object || type( obj ) === 'object'
            },
            isPlainObject : function( obj ) {
                if( ! obj || type( obj ) !== 'object' ) { // || obj.nodeType || $.isWindow( obj ) ) { // Important?
                        return false
                }
                
                        var hasOwn = Object.prototype.hasOwnProperty
                
                if( obj.constructor
                    && ! hasOwn.call( obj, 'constructor' )
                    && ! hasOwn.call( obj.constructor.prototype, 'isPrototypeOf' ) ) {
                        return false
                }
                
                var key
                for( key in obj ) {} // inhereted properties postcede own
                
                return key === undefined || hasOwn.call( obj, key )
            },
        }
        
        $.extend = $.extend || function() {
            var target = arguments[0] || {}
                var deep = false
                             var i = 1
            
                // Handle a deep copy situation
            if( typeof target === 'boolean' ) {
                deep = target
                target = arguments[1] || {}
                // skip the boolean and the target
                i = 2
            }
            
            // Handle case when target is a string or something (possible in deep copy)
            if( ! $.isObject( target ) && ! $.isFunction( target ) ) {
                target = {}
            }
            
                var length = arguments.length
            
                // extend jQuery itself if only one argument is passed
            if( length === i ) {
                target = this
                --i
            }
            
            var options, name, src, copy, copyIsArray, clone
            
            for( ; i < length; i++ ) {
                // Only deal with non-null/undefined values
                if( ( options = arguments[ i ] ) != null ) {
                        // Extend the base object
                    for( name in options ) {
                        src = target[ name ]
                        copy = options[ name ]
                        
                        // Prevent never-ending loop
                        if ( target === copy ) {
                                continue
                        }
                        
                        // Recurse if we're merging plain objects or arrays
                        if( deep && copy && ( $.isPlainObject( copy ) || ( copyIsArray = $.isArray( copy ) ) ) ) {
                            if ( copyIsArray ) {
                                copyIsArray = false
                                clone = src && $.isArray(src) ? src : []
                            } else {
                                clone = src && $.isPlainObject( src ) ? src : {}
                            }
                            
                            // Never move original objects, clone them
                            target[ name ] = $.extend( deep, clone, copy )
                            
                                // Don't bring in undefined values
                        } else if ( copy !== undefined ) {
                                target[ name ] = copy
                        }
                    }
                }
            }
                return target
        }

	$.map = $.map || function( elems, callback, arg ) {
		var ret = [], value
		for( var i = 0, length = elems.length; i < length; i++ ) {
		    if( ( value = callback( elems[ i ], i, arg ) ) != null ) {
			ret.push( value )
		    }
		}

		// Flatten any nested arrays
		return ret.concat.apply( [], ret )
	}

        return $
    } )()

    //console.log( typeof $.extend )

return $
} )()
