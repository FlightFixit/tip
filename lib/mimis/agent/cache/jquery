$( function() {
    var agentClass = 'org.dhappy.mimis.CacheAgentApplet'
    var jar //= chrome.extension.getURL( 'agent/cache/jar.jar' )
    jar = 'jar'

    var onload = function() {
        console.log( "Testing 'load' listener" )
    }
        
    var $applet = ( $('<applet/>')
                    .attr( {
                        code : agentClass,
                        codebase : jar.replace( /[^\/]*$/, '' ),
                        archive : jar.replace( /.*\//, '' ),
                        height : 50,
                        width : '100%',
                    } ) )
                    .bind( 'load', onload )
    var $object = ( $('<object/>')
                    .attr( {
                        classid : 'java:' + agentClass,
                        type : 'application/x-java-applet',
                        codetype : 'application/java',
                        archive : jar,
                        height : 50,
                        width : '100%',
                    } )
                    .append(
                        $('<param/>').attr( {
                            name : 'archive',
                            value : jar,
                        } )
                    )
                    .append( $applet )
                    .bind( 'load', onload ) )

    $('body').append( $object )

    // The applet isn't instantiated when loaded in the extension background
    if( chrome.extension && ! chrome.extension.faux ) {
        // ToDo: Move to lazy getter in separate file
        var manifest = chrome.manifest
            || ( function() {
                var manifestURL = chrome.extension.getURL( 'manifest.json' )
                var manifest
                $.ajax( {
                    url : manifestURL,
                    dataType : 'json',
                    contentType : 'application/json',
                    async : false,
                    success : function( json ) {
                        manifest = json
                    },
                } )
                return manifest
            } )()
        
        // ToDo: Propose javascript change to allow undefined.foo to dereference to undefined
        localStorage.applet = localStorage.applet || {}
        var url = localStorage.applet.url
        if( ! url ) {
            $(manifest.permissions).each( function( idx, perm ) {
                if( perm.match( /^http:\/\// ) && ! perm.match( /\*/ ) ) {
                    url = perm
                    return false
                }
            } )
        }
        
        if( ! url ) {
            // ToDo: Move to definitions file
            webkitNotifications,__defineGetter__(
                'allowed',
                function() {
                    webkitNotifications.ALLOWED = webkitNotifications.ALLOWED || 0
                    return webkitNotifications.checkPermission() == webkitNotifications.ALLOWED
                } )
            
            if( webkitNotifications.allowed ) {
                var notification = webkitNotifications.createNotification(
                    // ToDo: Create error icon
                    chrome.extension.getURL( 'icon/48/png' ),
                    'Startup Error',
                    // ToDo: Add click to go to server section of options
                    'Could not find a cache agent. Please configure one.'
                )
                notification.show()
                setTimeout( function() {
                    notification.cancel()
                }, 10000 )
            }
        } else {
            chrome.tabs.create( {
                url : url,
                selected : false
            }, function( tab ) {
                console.log( tab )
                chrome.tabs.executeScript( tab.id, {
                    //file : chrome.getURL()
                } )
            } )
        }
    }

    // ToDo: A non-destructive version of $.extend
    $.extend( true, mimis.applet, {
        load : ( function( config ) {
            var instance = ( $object.get( 0 ).get
                             ? $object.get( 0 )
                             : $applet.get( 0 ) )
            console.log( 'Load Callback' )
            mimis.trigger( 'load', {
                applet : instance,
            } )
        } )
    } )

    var callback = function( id, data ) {
        //console.log( 'callback:' + id )
        return mimis.applet.instance.callback( id, data )
    }
} )
