var mimis = mimis || {}

$.isString = $.isString ||
    function( str ) {
        return str instanceof String || $.type( str ) == 'string'
    }

$.isObject = $.isObject ||
    function( obj ) {
        return obj instanceof Object || $.type( obj ) == 'object'
    }

//$.fn.style

console.debug = console.log

// Allow negative indexing for last element
Array.prototype.__defineGetter__( -1, function() {
    return this.length > 0 && this[ this.length - 1 ] || undefined
} )

Array.prototype.__defineSetter__( -1, function( val ) {
    var idx = this.length > 0 ? this.length - 1 : 0
    this[ idx ] = val
} )

String.prototype.concat = String.prototype.concat ||
    function() {
        var out = ''
        mimis.each.apply( arguments, function() {
            out += this.toString()
        } )
        return out
    }

// Add array iterator
mimis.each = Array.prototype.each =
    mimis.each || Array.prototype.each || function each( f, args ) {
        if( $.isFunction( f ) ) {
            try {
                var out
                for( var i = 0; i < this.length; i++ ) {
                    var ret = f.apply( this[i], [ this[i], i, args ] )
                    if( ret === true || ret === false ) {
                        return ret
                    } else if( ret === undefined ) {
                    } else if( $.isArray( ret )
                               || $.isString( ret )
                               || ret.concatenable ) {
                        out = out.concat( ret )
                    } else if( $.isFunction( ret ) ) {
                        ret.call( this, out )
                    } else if( $.isObject( ret ) ) {
                        out = $.extend( true, ret, out )
                    }
                }
                return out
            } catch( e ) {
                console.debug( 'ï:each: Exception In Loop: ' )
                console.debug( e )
                throw e
            }
        }
    }

String.prototype.each = String.prototype.each || Array.prototype.each

if( NodeList.prototype != null ) {
    NodeList.prototype.each = NodeList.prototype.each || Array.prototype.each
}

if( NamedNodeMap.prototype != null ) {
    NamedNodeMap.prototype.each = NamedNodeMap.prototype.each || function( f ) {
        Array.prototype.each.apply( this, [ function( attr, idx ) {
            f.apply( attr, [ attr.nodeValue, attr.name ] )
        } ] )
    }
}

/*
Array.prototype.__defineGetter__( 'empty', function() {
    return this.length == 0
} )
*/

String.prototype.startsWith = String.prototype.startsWith || function( str ) {
    return this.indexOf( str ) == 0
}

String.prototype.endsWith = String.prototype.endsWith || function( str ) {
    return this.lastIndexOf( str ) == this.length - str.length
}

mimis.bind = mimis.bind || function( name, listener ) {
    $(window).bind( 'mimis.' + name, listener )
}

mimis.unbind = mimis.unbind || function( name, listener ) {
    $(window).unbind( 'mimis.' + name, listener )
}

mimis.trigger = mimis.trigger || function( name, extra ) {
    $(window).trigger( 'mimis.' + name, extra )
}

mimis.__defineGetter__( 'uri', function() {
    var mimis_uri = mimis_uri || 'agent/cache/xhtml.xhtml'
    localStorage.mimis_uri = 'http://dhappy.dyndns.org/lib/mimis/' + mimis_uri
    
    return ( localStorage.mimis_uri
             || ( chrome && chrome.extension
                  ? chrome.extension.getURL( mimis_uri )
                  : 'http://mimis.dhappy.org/' + mimis_uri ) )
} )

mimis.__defineSetter__( 'uri', function( uri ) {
    return localStorage.mimis_uri = uri
} )

webkitNotifications = typeof webkitNotifications != 'undefined' ? webkitNotifications : {}

if( webkitNotifications.__lookupGetter__( 'allowed' ) === undefined ) {
    webkitNotifications.__defineGetter__(
        'allowed',
        function() {

            webkitNotifications.ALLOWED = webkitNotifications.ALLOWED || 0
            return webkitNotifications.checkPermission() == webkitNotifications.ALLOWED
        } )
}

mimis.notify = mimis.notify ||
    function( config ) {
        config = $.extend( true, config, {
            icon : 'icon/48/png',
            title : 'Mïmis',
            message : ( 'You are being notified by: '
                        + arguments.caller.name ),
            timeout : 10000,
        } )
        
        if( webkitNotifications.checkPermission() == webkitNotifications.PERMISSION_ALLOWED ) {
            with( config ) {
                var notification =
                    webkitNotifications.createNotification(
                        icon,
                        title,
                        message )
                notification.show()
                if( timeout ) {
                    setTimeout( function() {
                        notification.cancel()
                    }, timeout )
                }
            }
        }
    }

mimis.get = mimis.get ||
    function( store, varName ) {
        var parts = varName.split( /[,\/]/ )
        if( parts.each( function( part ) {
            if( store[ part ] === undefined ) {
                return false
            } else {
                store = store[ part ]
            }
        } ) ) {
            return store
        }
    }

mimis.set = mimis.set ||
    function( store, varName, val ) {
        var ret = store
        var parts = varName.split( /[,\/]/ )
        var ultimate = parts.pop()
        parts.each( function( part ) {
            if( store[ part ] === undefined ) {
                store[ part ] = {}
            }
            store = store[ part ]
        } )
        store[ ultimate ] = val
        return ret
    }

mimis.load = mimis.load || function() {
    return mimis.each.call( arguments, function( uri ) {
        var ret
        $.ajax( {
            url : uri,
            dataType : 'text', // ECMAScript Object Notation
            async : false,
            success : function( eson ) {
                ret = eval( "( function() { return " + eson + " } )()" )
            },
        } )
        return ret
    } )
}

// Extract namespaces
mimis.ns = mimis.ns ||
    ( function() {
        var ns = mimis.load( '/.tip/lib/mimis/ns/abbreviations/eson' )
        document.documentElement.attributes.each( function( ) {
            if( match = /^(?:xmlns:?)(.*)/.exec( this.nodeName ) ) {
                var name = match[1] || ''
                var href = this.nodeValue
                ns[ name ] = href
            }
        } )
        // Reverse map
        for( abbr in ns ) {
            if( abbr != '' ) {
                ns[ ns[ abbr ] ] = abbr
            }
        }
        ns[ 'default' ] = ns[ 'default' ] || 'html'
        !ns[ '' ] && (
            ns[ '' ] = ns[ ns[ 'default' ] ]
        )
        ns.valueOf = ns.toString =
            function() { return ns[ '' ] }
        ns.abbr = ns[ ns ]
        return ns
    } )()

mimis.status = mimis.status ||
    ( function() {
        var status = 'not loaded'
        function val() {
            return status
        }
        return {
            toString : val,
            valueOf : val,
        }
    } )()

mimis.endpoint = mimis.endpoint || { 
    get http() {
        return 'http://localhost'
    },
}

mimis.$root = mimis.$root || $( document.documentElement )

if( mimis.ns.abbr == 'svg' &&
    mimis.$root.__lookupGetter__( 'viewBox' ) === undefined ) {
    mimis.$root.__defineGetter__(
        'viewBox',
        function() {
            var attr = $(this).attr( 'viewBox' )
            var split = attr.split( ' ' )
            // ToDo: handle unset viewBox
            return {
                x : split[0],
                y : split[1],
                width : split[2],
                height : split[3],
            }
        } )
}

if( mimis.ns.abbr == 'svg' &&
    mimis.$root.__lookupSetter__( 'viewBox' ) === undefined ) {
    mimis.$root.__defineSetter__(
        'viewBox',
        function( box ) {
            box =
                $.extend( mimis.$root.viewBox,
                          box )
            var vals = [
                box.x, box.y, box.width, box.height
            ]
            console.log( vals )
            mimis.$root.attr( {
                viewBox : vals.join( ' ' )
            } )
            return box
        } )
}

if( mimis.ns.abbr == 'svg' &&
    mimis.$root.__lookupGetter__( 'bbox' ) === undefined ) {
    mimis.$root.__defineGetter__(
        'bbox',
        function() {
            return mimis.$root.get(0).getBBox()
        } )
}

if( mimis.ns.abbr == 'svg' ) {
    $.fn.bbox = $.fn.bbox ||
        function() {
            // ToDo: Handle multiple items
            var bbox = this[0].getBBox()
            return bbox
        }
}
