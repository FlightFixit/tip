var mimis = mimis || {}

console = typeof console !== 'undefined' ? console :
    {
        log : print,
        debug : print,
        error : print,
    }

$ = typeof $ !== 'undefined' ? $ :
    ( function() {
        var class2type = {}
        var classes = 'Boolean Number String Function Array Date RegExp Object'.split(' ')
                     
        for( var i = 0; i < classes.length; i++ ) {
            var name = classes[ i ]
	    class2type[ "[object " + name + "]" ] = name.toLowerCase()
        }
                     
        function type( obj ) {
	    return obj == null ?
		String( obj ) :
		class2type[ toString.call( obj ) ] || 'object'
	}
        
        var $ = {
	    isFunction : function( obj ) {
		return type( obj ) === 'function'
	    },
	    isArray : typeof Array.isArray !== 'undefined' ? Array.isArray : function( obj ) {
		return type( obj ) === 'array'
	    },
            isString : function( str ) {
                             return str instanceof String || type( str ) === 'string'
            },
            isObject : function( obj ) {
                return obj instanceof Object || type( obj ) === 'object'
            },
	    isPlainObject : function( obj ) {
              	if( ! obj || type( obj ) !== 'object' ) { // || obj.nodeType || $.isWindow( obj ) ) { // Important?
		    return false
		}
                
	        var hasOwn = Object.prototype.hasOwnProperty
                
		if( obj.constructor
                    && ! hasOwn.call( obj, 'constructor' )
                    && ! hasOwn.call( obj.constructor.prototype, 'isPrototypeOf' ) ) {
		    return false
		}
                
		var key
		for( key in obj ) {} // inhereted properties postcede own
                
		return key === undefined || hasOwn.call( obj, key )
            },
        }
        
        $.extend = $.extend || function() {
	    var target = arguments[0] || {}
	    var deep = false
	                 var i = 1
            
	    // Handle a deep copy situation
	    if( typeof target === 'boolean' ) {
		deep = target
		target = arguments[1] || {}
		// skip the boolean and the target
		i = 2
	    }
            
	    // Handle case when target is a string or something (possible in deep copy)
	    if( ! $.isObject( target ) && ! $.isFunction( target ) ) {
		target = {}
	    }
            
	    var length = arguments.length
            
	    // extend jQuery itself if only one argument is passed
	    if( length === i ) {
		target = this
		--i
	    }
            
	    var options, name, src, copy, copyIsArray, clone
            
	    for( ; i < length; i++ ) {
		// Only deal with non-null/undefined values
		if( ( options = arguments[ i ] ) != null ) {
		    // Extend the base object
		    for( name in options ) {
			src = target[ name ]
			copy = options[ name ]
                        
			// Prevent never-ending loop
			if ( target === copy ) {
			    continue
			}
                        
			// Recurse if we're merging plain objects or arrays
			if( deep && copy && ( $.isPlainObject( copy ) || ( copyIsArray = $.isArray( copy ) ) ) ) {
			    if ( copyIsArray ) {
				copyIsArray = false
				clone = src && $.isArray(src) ? src : []
                            } else {
				clone = src && $.isPlainObject( src ) ? src : {}
			    }
                            
			    // Never move original objects, clone them
			    target[ name ] = $.extend( deep, clone, copy )
                            
			    // Don't bring in undefined values
			} else if ( copy !== undefined ) {
			    target[ name ] = copy
			}
		    }
		}
	    }
	    return target
        }
        return $
    } )()


;( function() {
( typeof mimis.x === 'undefined' ) && ( mimis.x = $.extend )

RegExp.prototype.match = RegExp.prototype.match || RegExp.prototype.exec

mimis.load = mimis.load ||
    ( function() {
        function parse( ret, type ) {
            var parser
            if( parser = mimis.load.parser[ type ] ) {
                while( $.isString( parser ) ) {
                    parser = mimis.load.parser[ parser ]
                }
                ret = parser( ret )
            }
            return ret
        }
        return (
            ( $.ajax !== undefined )
                ? function( uri ) {
                    var ret
                    $.ajax( {
                        url : uri,
                        dataType : 'text',
                        async : false,
                        success : function( data, state, xhr ) {
                            ret = parse( data, xhr.getResponseHeader( 'Content-Type' ) )
                        },
                    } )
                    return ret
                    }
            : function( uri ) {
                var ret
                var file
                if( ( file = /^(\.\.\.)\/(.*)\/([^\/]*)$/.match( uri ) ) != null ) {
                    file.__defineGetter__( 'root', function() { return file[1] } )
                    file.__defineGetter__( 'path', function() { return file[2] } )
                    file.__defineGetter__( 'type', function() { return file[3] } )
                    ret = parse( readFile( uri ), file.type )
                } else {
                    ret = parse( readUrl( uri ), 'js' )
                }
                return ret
            }
        )
    } )()
    
mimis.load.parser = mimis.load.parser || {}

with( mimis.load.parser ) {
    mimis.load.parser = mimis.x(
        {
            eson : function( eson ) { // ECMAScript Object Notation
                try {
                    return eval( "( function() { return " + eson + " } )()" )
                } catch( e ) {
                    console.error( e )
                }
            },
            js : function( javascript ) {
                try {
                    return eval( javascript )
                } catch( e ) {
                    console.error( e )
                }
            },
            json : function( json ) {
                return JSON.parse( data ) 
            },
            xml : function( xml ) {
                var parser = new DOMParser()
	        return parser.parseFromString( xml, 'text/xml' )
            },
        },
        mimis.load.parser )
}

with( mimis.load.parser ) {
    mimis.load.parser = mimis.x(
        {
            jquery : js,
            mimis : js,
            rhino : js,
            'application/eson' : eson,
            'application/javascript' : js,
            'text/json' : json,
            'text/xml' : xml,
        },
        mimis.load.parser )
}

with( mimis.load.parser ) {
    ( function() {
        var __ = ( function() { return this } )()
    __.mimis.load.parser = __.mimis.x(
        {
            'application/xhtml+xml' : 'text/xml',
            'image/svg+xml' : 'text/xml',
        },
        __.mimis.load.parser )
    } )()
}

console.debug = console.debug || console.info

String.prototype.startsWith = String.prototype.startsWith || function( str ) {
    return this.indexOf( str ) == 0
}

String.prototype.endsWith = String.prototype.endsWith || function( str ) {
    return this.lastIndexOf( str ) == this.length - str.length
}

mimis.load( '.../lib/mimis/array/js' )

mimis.BubblingException = mimis.BubblingException || function() {}

mimis.$window = $.isFunction( $ ) ? $(window) : undefined

mimis.bind = mimis.bind || function( name, listener ) {
    mimis.$window.bind( 'mimis.' + name, listener )
}

mimis.unbind = mimis.unbind || function( name, listener ) {
    mimis.$window.unbind( 'mimis.' + name, listener )
}

mimis.trigger = mimis.trigger || function( name, extra ) {
    mimis.$window.trigger( 'mimis.' + name, extra )
}

mimis.__defineGetter__( 'uri', function() {
    var mimis_uri = mimis_uri || 'agent/cache/xhtml.xhtml'
    localStorage.mimis_uri = 'http://dhappy.dyndns.org/lib/mimis/' + mimis_uri
    
    return ( localStorage.mimis_uri
             || ( chrome && chrome.extension
                  ? chrome.extension.getURL( mimis_uri )
                  : 'http://mimis.dhappy.org/' + mimis_uri ) )
} )

mimis.__defineSetter__( 'uri', function( uri ) {
    return localStorage.mimis_uri = uri
} )

webkitNotifications = typeof webkitNotifications != 'undefined' ? webkitNotifications : {}

if( webkitNotifications.__lookupGetter__( 'allowed' ) === undefined ) {
    webkitNotifications.__defineGetter__(
        'allowed',
        function() {
            return ( webkitNotifications.checkPermission
                     ? webkitNotifications.checkPermission() == webkitNotifications.PERMISSION_ALLOWED
                     : false )
        } )
}

mimis.notify = mimis.notify ||
    function( config ) {
        config = mimis.x( true, config, {
            icon : 'icon/48/png',
            title : 'MÃ¯mis',
            message : ( 'You are being notified by: '
                        + ( arguments.caller ? arguments.caller.name : 'someone' ) ),
            timeout : 10000,
        } )
        
        if( webkitNotifications.allowed ) {
            with( config ) {
                var notification =
                    webkitNotifications.createNotification(
                        icon,
                        title,
                        message )
                notification.show()
                if( timeout ) {
                    setTimeout( function() {
                        notification.cancel()
                    }, timeout )
                }
            }
        }
    }

mimis.get = mimis.get ||
    function( store, varName ) {
        varName = varName || ''
        console.debug( 'mimis.get', store )
        var parts = varName.split( /[,\/]/ )
        if( parts.each( function( part ) {
            if( store[ part ] === undefined ) {
                return false
            } else {
                store = store[ part ]
            }
        } ) ) {
            return store
        }
    }

mimis.set = mimis.set ||
    function( store, varName, val ) {
        var ret = store
        varName = varName || ''
        console.debug( 'mimis.set', store )
        var parts = varName.split( /[,\/]/ )
        var ultimate = parts.pop()
        parts.each( function( part ) {
            if( store[ part ] === undefined ) {
                store[ part ] = {}
            }
            store = store[ part ]
        } )
        store[ ultimate ] = val
        return ret
    }

mimis.link = mimis.link || mimis.load

// Extract namespaces
mimis.ns = mimis.ns ||
    ( function() {
        var ns = mimis.link( '.../lib/mimis/ns/abbreviations/eson' )

        typeof document !== 'undefined' && document.documentElement.attributes.each( function( ) {
            if( match = /^(?:xmlns:?)(.*)/.exec( this.nodeName ) ) {
                var name = match[1] || ''
                var href = this.nodeValue
                ns[ name ] = href
            }
        } )

        // Reverse map
        for( abbr in ns ) {
            if( abbr != '' ) {
                ns[ ns[ abbr ] ] = abbr
            }
        }
        ns[ 'default' ] = ns[ 'default' ] || 'html'
        if( ! ns[ '' ] ) {
            ns[ '' ] = ns[ ns[ 'default' ] ]
        }
        ns.valueOf = ns.toString =
            function() { return ns[ '' ] }
        ns.abbr = ns[ ns ]
        return ns
    } )()

mimis.status = mimis.status ||
    ( function() {
        var status = 'not loaded'
        function val() {
            return status
        }
        return {
            toString : val,
            valueOf : val,
        }
    } )()

mimis.endpoint = mimis.endpoint || { 
    get http() {
        return 'http://localhost'
    },
}

//mimis.$root = mimis.$root || $(document.documentElement)

mimis.parse = mimis.parse || {}

mimis.parse.position = mimis.parse.position ||
    function( pos ) {
        return parseFloat( pos )
    }

mimis.parse.length = mimis.parse.length || mimis.parse.position

mimis.load( '.../lib/mimis/' + mimis.ns.abbr + '/mimis' )

mimis.wrap = mimis.wrap || mimis.load( '.../lib/mimis/wrap/mimis' )

$.isFunction( $ ) && $( function() {
    $('head').each( function() {
        var $head = $(this)
        var $titles
        if( $head.children( 'title' ) == 0
            && ( $titles = $head.parent().find( 'section > title' ) ).size() > 0 ) {
            $head.append(
                $('<title/>').text( $titles.get( 0 ).text() )
            )
        }
    } )
} )

// ToDo: Insert icon if not present  
// <html:link rel="icon" href=".../revolution/Technoanarchist/" />

if( false ) {
    $( function() {
        window.moveTo( 0, 0 )

        if( top.window.outerHeight < screen.availHeight
            || top.window.outerWidth < screen.availWidth ) {
            top.window.outerHeight = screen.availHeight
            top.window.outerWidth = screen.availWidth
        }
    } )
}

} )()
