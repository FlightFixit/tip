var mimis = mimis || {}

$.isString = $.isString ||
    function( str ) {
        return str instanceof String || $.type( str ) == 'string'
    }

$.isObject = $.isObject ||
    function( obj ) {
        return obj instanceof Object || $.type( obj ) == 'object'
    }

//$.fn.style

console.debug = console.info

// Allow negative indexing for last element
Array.prototype.__defineGetter__( -1, function() {
    return this.length > 0 && this[ this.length - 1 ] || undefined
} )

Array.prototype.__defineSetter__( -1, function( val ) {
    var idx = this.length > 0 ? this.length - 1 : 0
    this[ idx ] = val
} )

String.prototype.concat = String.prototype.concat ||
    function() {
        var out = ''
        mimis.each.apply( arguments, function() {
            out += this.toString()
        } )
        return out
    }

// Add array iterator
mimis.each = Array.prototype.each =
    mimis.each || Array.prototype.each || function each( f, args ) {
        if( $.isFunction( f ) ) {
            try {
                var out
                for( var i = 0; i < this.length; i++ ) {
                    var ret = f.apply( this[i], [ this[i], i, args ] )
                    if( ret === true || ret === false ) {
                        return ret
                    } else if( ret === undefined ) {
                    } else if( $.isArray( ret )
                               || $.isString( ret )
                               || ret.concatenable ) {
                        out = out.concat( ret )
                    } else if( $.isFunction( ret ) ) {
                        ret.call( this, out )
                    } else if( $.isObject( ret ) ) {
                        out = $.extend( true, ret, out )
                    }
                }
                return out
            } catch( e ) {
                console.debug( 'ï:each: Exception In Loop: ', e )
                throw e
            }
        }
    }

String.prototype.each = String.prototype.each || Array.prototype.each

if( NodeList.prototype != null ) {
    NodeList.prototype.each = NodeList.prototype.each || Array.prototype.each
}

if( NamedNodeMap.prototype != null ) {
    NamedNodeMap.prototype.each = NamedNodeMap.prototype.each || function( f ) {
        Array.prototype.each.apply( this, [ function( attr, idx ) {
            f.apply( attr, [ attr.nodeValue, attr.name ] )
        } ] )
    }
}

/*
Array.prototype.__defineGetter__( 'empty', function() {
    return this.length == 0
} )
*/

String.prototype.startsWith = String.prototype.startsWith || function( str ) {
    return this.indexOf( str ) == 0
}

String.prototype.endsWith = String.prototype.endsWith || function( str ) {
    return this.lastIndexOf( str ) == this.length - str.length
}

mimis.bind = mimis.bind || function( name, listener ) {
    $(window).bind( 'mimis.' + name, listener )
}

mimis.unbind = mimis.unbind || function( name, listener ) {
    $(window).unbind( 'mimis.' + name, listener )
}

mimis.trigger = mimis.trigger || function( name, extra ) {
    $(window).trigger( 'mimis.' + name, extra )
}

mimis.__defineGetter__( 'uri', function() {
    var mimis_uri = mimis_uri || 'agent/cache/xhtml.xhtml'
    localStorage.mimis_uri = 'http://dhappy.dyndns.org/lib/mimis/' + mimis_uri
    
    return ( localStorage.mimis_uri
             || ( chrome && chrome.extension
                  ? chrome.extension.getURL( mimis_uri )
                  : 'http://mimis.dhappy.org/' + mimis_uri ) )
} )

mimis.__defineSetter__( 'uri', function( uri ) {
    return localStorage.mimis_uri = uri
} )

webkitNotifications = typeof webkitNotifications != 'undefined' ? webkitNotifications : {}

if( webkitNotifications.__lookupGetter__( 'allowed' ) === undefined ) {
    webkitNotifications.__defineGetter__(
        'allowed',
        function() {

            webkitNotifications.ALLOWED = webkitNotifications.ALLOWED || 0
            return webkitNotifications.checkPermission() == webkitNotifications.ALLOWED
        } )
}

mimis.notify = mimis.notify ||
    function( config ) {
        config = $.extend( true, config, {
            icon : 'icon/48/png',
            title : 'Mïmis',
            message : ( 'You are being notified by: '
                        + arguments.caller.name ),
            timeout : 10000,
        } )
        
        if( webkitNotifications.checkPermission() == webkitNotifications.PERMISSION_ALLOWED ) {
            with( config ) {
                var notification =
                    webkitNotifications.createNotification(
                        icon,
                        title,
                        message )
                notification.show()
                if( timeout ) {
                    setTimeout( function() {
                        notification.cancel()
                    }, timeout )
                }
            }
        }
    }

mimis.get = mimis.get ||
    function( store, varName ) {
        var parts = varName.split( /[,\/]/ )
        if( parts.each( function( part ) {
            if( store[ part ] === undefined ) {
                return false
            } else {
                store = store[ part ]
            }
        } ) ) {
            return store
        }
    }

mimis.set = mimis.set ||
    function( store, varName, val ) {
        var ret = store
        var parts = varName.split( /[,\/]/ )
        var ultimate = parts.pop()
        parts.each( function( part ) {
            if( store[ part ] === undefined ) {
                store[ part ] = {}
            }
            store = store[ part ]
        } )
        store[ ultimate ] = val
        return ret
    }



mimis.load = mimis.load || function() {
    return mimis.each.call( arguments, function( uri ) {
        var ret
        $.ajax( {
            url : uri,
            dataType : 'text', // ECMAScript Object Notation
            async : false,
            success : function( data, state, xhr ) {
                console.log( xhr.getAllResponseHeaders() )
                ret = data
                if( var processor = mimis.load.type[ xhr.getResponseHeader( '' ) ] ) {
                    ret = processor( ret )
                }
            },
        } )
        return ret
    } )
}

mimis.load.type = mimis.load.type || {
    'text/eson' : function( eson ) {
        eval( "( function() { return " + data + " } )()" )
    },
    
}

// Extract namespaces
mimis.ns = mimis.ns ||
    ( function() {
        var ns = mimis.load( '.../lib/mimis/ns/abbreviations/eson' )
        document.documentElement.attributes.each( function( ) {
            if( match = /^(?:xmlns:?)(.*)/.exec( this.nodeName ) ) {
                var name = match[1] || ''
                var href = this.nodeValue
                ns[ name ] = href
            }
        } )
        // Reverse map
        for( abbr in ns ) {
            if( abbr != '' ) {
                ns[ ns[ abbr ] ] = abbr
            }
        }
        ns[ 'default' ] = ns[ 'default' ] || 'html'
        !ns[ '' ] && (
            ns[ '' ] = ns[ ns[ 'default' ] ]
        )
        ns.valueOf = ns.toString =
            function() { return ns[ '' ] }
        ns.abbr = ns[ ns ]
        return ns
    } )()

mimis.status = mimis.status ||
    ( function() {
        var status = 'not loaded'
        function val() {
            return status
        }
        return {
            toString : val,
            valueOf : val,
        }
    } )()

mimis.endpoint = mimis.endpoint || { 
    get http() {
        return 'http://localhost'
    },
}

mimis.$root = mimis.$root || $(document.documentElement)

mimis.parse = mimis.parse || {}

mimis.parse.position = mimis.parse.position ||
    function( pos ) {
        return parseFloat( pos )
    }

mimis.parse.length = mimis.parse.length || mimis.parse.position

if( mimis.ns.abbr == 'svg' &&
    mimis.$root.__lookupGetter__( 'viewBox' ) === undefined ) {
    mimis.$root.__defineGetter__(
        'viewBox',
        function() {
            var attr = $(this).attr( 'viewBox' )
            var split = attr.split( ' ' )
            // ToDo: handle unset viewBox
            return {
                x : mimis.parse.position( split[0] ),
                y : mimis.parse.position( split[1] ),
                width  : mimis.parse.length( split[2] ),
                height : mimis.parse.length( split[3] ),
            }
        } )
}

if( mimis.ns.abbr == 'svg' &&
    mimis.$root.__lookupSetter__( 'viewBox' ) === undefined ) {
    mimis.$root.__defineSetter__(
        'viewBox',
        function( box ) {
            box =
                $.extend( mimis.$root.viewBox,
                          box )
            var vals = [
                box.x, box.y, box.width, box.height
            ]
            mimis.$root.attr( {
                viewBox : vals.join( ' ' )
            } )
            return box
        } )
}

mimis.scroll = mimis.scroll || {}

if( mimis.$root.viewBox ) {
    ( function() {
        var initialBox

        // ToDo: Allow mode changes to stick without key holding

        mimis.$root.bind( 'mousewheel', function( evt ) {
            // Zoom in or out, keeping the location under the pointer fixed
            var box = mimis.$root.viewBox
            initialBox = initialBox || box
            var imp = mimis.scroll.imp || .1
            imp *= evt.wheelDelta / -120 // One scroll
            
            function transform() {
                if( evt.shiftKey ) {
                    if( evt.ctrlKey ) {
                        return { y : box.y + box.width * imp }
                    } else {
                        return { x : box.x + box.height * imp }
                    }
                } else {
                    var delta = {
                        width  : box.width * imp,
                        height : box.height * imp,
                    }
                    // Needs to be the percentage across the image
                    var pos = {
                        x : evt.clientX / window.innerWidth,
                        y : evt.clientY / window.innerHeight,
                    }
                    
                    return {
                        x : box.x - delta.width * pos.x,
                        y : box.y - delta.height * pos.y,
                        width  : box.width + delta.width,
                        height : box.height + delta.height,
                    }
                }
            }
            mimis.$root.viewBox = $.extend( box, transform() )
        } )
    } )()
}

if( mimis.ns.abbr == 'svg' &&
    mimis.$root.__lookupGetter__( 'bbox' ) === undefined ) {
    mimis.$root.__defineGetter__(
        'bbox',
        function() {
            return mimis.$root.get(0).getBBox()
        } )
}

if( mimis.ns.abbr == 'svg' ) {
    $.fn.bbox = $.fn.bbox ||
        function() {
            // ToDo: Handle multiple items
            var bbox = this[0].getBBox()
            return bbox
        }
}

$( function() {
    $('head').each( function() {
        var $head = $(this)
        var $titles
        if( $head.children( 'title' ) == 0
            && ( $titles = $head.parent().find( 'section > title' ) ).size() > 0 ) {
            $head.append(
                $('<title/>').text( $titles.get( 0 ).text() )
            )
        }
    } )
} )

if( mimis.ns.abbr == 'svg' ) {
    var attrs = [ 'x', 'y', 'width', 'height' ]
    attrs.each( function( attr ) {
        $.fx.step[ attr ] = $.fx.step[ attr ] || function( fx ) {
            if( ! fx.initialized ) {
                fx.initialized = true
                fx.$elem = $(fx.elem)
                fx.start = fx.$elem.attr( attr )
                // ToDo: Handle percentage lengths
                // ToDo: Migrate to css: 
                fx.start = $.isNaN( fx.start ) ? 0 : parseFloat( fx.start )
                fx.end = $.isNaN( fx.end ) ? 0 : parseFloat( fx.start )
            }
            console.debug( $.extend( {}, fx ) )
            fx.$elem.attr( attr, fx.start + fx.pos * ( fx.end - fx.start ) )
        }
    } )
}

if( mimis.ns.abbr != 'html' ) {
    mimis.$elem = mimis.$elem || function( name, attrs ) {
        var $elem = $( document.createElementNS( mimis.ns, name ) )
        if( attrs ) {
            for( attr in attrs ) {
                var val = attrs[ attr ]
                var match = attr.match( /^([^:]+):(.*)$/ )
                if( match ) {
                    var ns = { abbr : match[ 1 ] }
                    attr = match[ 2 ]
                    $elem.each( function() {
                        this.setAttributeNS( mimis.ns[ ns.abbr ], attr, val )
                    } )
                } else {
                    $elem.attr( attr, val )
                }
            }
        }
        return $elem
    }
}

if( mimis.ns.abbr == 'svg' ) {
    [ 'use', 'rect' ].each( function( attr ) {
        var name = '$' + attr
        mimis[ name ] = mimis[ name ] || function() {
            var args = Array.prototype.slice.call( arguments )
            args.unshift( attr )
            return mimis.$elem.apply( this, args )
        }
    } )

    // Nesting
    ;[ 'g', 'a' ].each( function( attr ) {
        var name = '$' + attr
        mimis[ name ] = mimis[ name ] || function() {
            var args = Array.prototype.slice.call( arguments )
            args.unshift( attr )
            var $elem = mimis.$elem.apply( this, args )
            function append( $new ) {
                //$elem.append.apply( $, arguments )
                $elem.append( $new )
                return append
            }
            append.$elem = $elem
            return append
        }
    } )

    mimis.$text = mimis.$text || function() {
        var args = Array.prototype.slice.call( arguments )
        var txt = args.shift()
        args.unshift( 'text' )
        var $text = mimis.$elem.apply( this, args )
        $text.text( txt )
        return $text
    }
}

mimis.x = mimis.x || $.extend
