$ = typeof $ !== 'undefined' ? $
    : typeof load !== 'undefined' ? load( '.../lib/mimis/faux/jquery/js' )
    : undefined

mimis.x = mimis.x || $.extend

mimis.load = mimis.load ||
    ( function() {
        function parse( ret, type ) {
            var parser
            console.log( '$.aja: ' + type )
            console.log( '$.aja: ' + typeof mimis.load.parser[ type ] )
            console.log( '$.aja: ' + $.isString( mimis.load.parser[ type ] ) )
            if( parser = mimis.load.parser[ type ] ) {
                while( $.isString( parser ) ) {
                    parser = mimis.load.parser[ parser ]
                }
                ret = parser( ret )
            }
            console.log( '$.jax: ' + ret )
            return ret
        }
        return (
            ( $.ajax !== undefined )
                ? function( uri ) {
                    var ret
                    $.ajax( {
                        url : uri,
                        dataType : 'text',
                        async : false,
                        success : function( data, state, xhr ) {
                            ret = parse( data, xhr.getResponseHeader( 'Content-Type' ) )
                            console.log( ret )
                            console.log( typeof Array.prototype.each )
                        },
                    } )
                    return ret
                }
            : function( uri ) {
                var ret
                var file
                if( ( file = /(.*)\/([^\/]*)$/.match( uri ) ) != null ) {
                    //file.__defineGetter__( 'root', function() { return file[1] } )
                    file.__defineGetter__( 'path', function() { return file[1] } )
                    file.__defineGetter__( 'type', function() { return file[2] } )
                    console.log( 'l:' + uri )
                    console.log( 'l:' + mimis.deref( uri ) )
                    ret = parse( readFile( uri ), file.type )
                } else {
                    ret = parse( readUrl( uri ), 'js' )
                }
                return ret
            }
        )
    } )()

mimis.load.parser = mimis.load.parser || {}

with( mimis.load.parser ) {
    mimis.load.parser = mimis.x(
        {
            eson : function( eson ) { // ECMAScript Object Notation
                try {
                    return eval( "( function() { return " + eson + " } )()" )
                } catch( e ) {
                    console.error( e )
                }
            },
            js : function( javascript ) {
                try {
                    return eval( javascript )
                } catch( e ) {
                    console.error( e )
                }
            },
            json : function( json ) {
                return JSON.parse( data ) 
            },
            xml : function( xml ) {
                var parser = new DOMParser()
                return parser.parseFromString( xml, 'text/xml' )
            },
            txt : function( txt ) {
                return txt.toString()
            },
        },
        mimis.load.parser )
}

with( mimis.load.parser ) {
    ( function() {
        var __ = ( function() { return this } )()
        __.mimis.load.parser = __.mimis.x(
            {
                jquery : js,
                mimis : eson,
                rhino : js,
                'application/eson' : eson,
                'application/javascript' : js,
                'text/json' : json,
                'text/xml' : xml,
            },
            mimis.load.parser )

        __.mimis.load.parser = __.mimis.x(
            {
                'application/xhtml+xml' : 'text/xml',
                'image/svg+xml' : 'text/xml',
            },
            __.mimis.load.parser )
    } )()
}

