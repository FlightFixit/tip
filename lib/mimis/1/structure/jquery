( function() {
    var def = mimis.load( '.../lib/tip/def/eson' )      

    // Format transform
    var transform = {
        t : function( a, b ) {
            return { transform : ( "translate(" + a + ( b && ( ',' + b ) || '' ) + ")" ) }
        },
        s : function( a, b ) {
            return { transform : (     "scale(" + a + ( b && ( ',' + b ) || '' ) + ")" ) }
        },
        r : function( a, b ) {
            return { transform : (    "rotate(" + a + ( b && ( ',' + b ) || '' ) + ")" ) }
        },
    }
    
    function label( cfg ) {
        with( mimis ) { with( def ) { with( transform ) {
            with( cfg ) {
                return ( $g( {               func : 'label'                      } )
                         ( $g (              t( pad.left,        row.height / 2  ) )
                           ( $g( {           func : 'named icon'                 } )
                             ( $g(           t( col.width / 2                    ) )
                               ( $g( {       func : 'icon'                       } )
                                 ( $g(       s( icon.scale                       ) )
                                   ( $g(     t( -row.height / 2, -col.width / 2  ) )
                                     ( $use( x( def.use, { 'xlink:href' : ideogram } ) ) ).$elem
                                   ).$elem
                                 ).$elem
                               )
                               ( $g(         t( col.width / 2                    ) )
                                 ( $g( {     func : 'name'                       } )
                                   ( $g(     t( pad.left                         ) )
                                     ( $g(   t( 0,                row.height / 5 ) )
                                         ( $text( text ) ).$elem
                                       ).$elem
                                     ).$elem
                                 ).$elem
                               ).$elem
                             ).$elem
                           ).$elem
                         ).$elem
                       )
            }
        } } }
    }
        
    function background( cfg ) {
        cfg = cfg || {}
        with( mimis ) { with( def ) { with( cfg ) {
            //console.log( current.width )
            return ( $g( { func : 'background' } )
                     ( $rect( x (
                         {
                             height : row.height * ( depth.below + 1 ) + ( depth.below * pad.bottom ),
                             width  : display.width - ( depth.above * 2 * indent ),
                         },
                         cfg
                     ) ) ).$elem
                   )
        } } }
    }

    function link( cfg ) {
        with( mimis ) { with( def ) { with( cfg ) {
            // ToDo: Handle more than 1
            for( key in cfg ) {
                var $$tail = $g( { id : key } )
                var $$head = $a( { 'xlink:href' : cfg[ key ] } )( $$tail.$elem )
                $$tail.$elem = $$head.$elem
                return $$tail
            }
        } } }
    }

    mimis.__defineGetter__( 'nil', function() {
        return mimis.$g()
    } )

    function icon( cfg ) {
        with( mimis ) { with( def ) { with( transform ) { with( cfg ) {
            return ( ( ! href ? nil : $a( { 'xlink:href' : href } ) )
                     ( ( ! id ? nil : $g( { id : id } ) )
                       ( $g( { func : 'icon' } )
                         ( $g( t( col.width / 2, row.height / 2 ) )
                           ( $g( s( icon.scale ) )
                             ( $g( t( -col.width / 2, -row.height / 2 ) )
                               ( background( { width : col.width } ) )
                               ( $g( t( col.width / 2, row.height / 2 ) )
                                 ( $g( s( icon.scale ) )
                                   ( $g( t( -col.width / 2, -row.height / 2 ) )
                                     ( $use( x( def.use, { 'xlink:href' : ideogram } ) ) )
                                     .$elem
                                   ).$elem
                                 ).$elem
                               ).$elem
                             ).$elem
                           ).$elem
                         ).$elem
                       ).$elem
                     ).$elem
                   )
        } } } }
    }

    icon.scale = icon.scale || .8

    with( mimis ) { with( def ) { with( transform ) {
        // Will fail on multiple children
        function nest() {
            with( mimis ) { with( def ) { with( transform ) {
            var delta = 2 * indent
            current.width -= delta
            var ret = $g( t( indent, row.height ) ).apply( this, arguments )
            current.width += delta
            return ret
            } } }
        }

        console.debug( 'h' )

        $('script:last').after(
            $g()
            ( link( { chrome : 'http://www.google.com/chrome/' } )
              ( background( { depth : { above : 0, below : 3 } } ) )
              ( label( { ideogram : '.../co/Google/Chrome/ideogram/', text : 'Chrome' } ) )
              ( nest
                ( link( { crx : '.../lib/mimis/Chrome/extension/' } )
                  ( background( { depth : { above : 1, below : 2 } } ) )
                  ( label( { ideogram : '.../lib/mimis/logo/button/', text : 'Extension' } ) )
                  ( nest
                    ( link( { jvm : '.../lib/mimis/java/src/org/dhappy/mimis/CacheAgentApplet.java' } )
                      ( background( { depth : { above : 2, below : 1 } } ) )
                      ( label( { ideogram : '.../image/logo/Sun/Java/Duke/', text : 'Applet' } ) )
                      ( nest
                        ( link( { neo4j : 'http://neo4j.org' } )
                          ( background( { depth : { above : 3, below : 0 } } ) )
                          ( label( { ideogram : '.../image/logo/Neo4j/', text : 'Neo4j' } ) )
                          .$elem
                        ).$elem
                      ).$elem
                    ).$elem
                  ).$elem
                ).$elem
              ).$elem
            )
            ( $g( t( 0, 400 ) )
              ( link( { fs : '.../' } )
                ( background() )
                ( $path( [
                    { line : [ [  .8,  0 ],
                               [   0,  3 ],
                               [ -.1,  0 ],
                               [   0, .1 ],
                               [  .2,  0 ],
                               [   0, -3 ], ] }
                ] ) )
                ( label( { ideogram : '.../computer/filesystem/ideogram/', text : 'Filesystem' } ) )
                .$elem
              ).$elem
            )
            ( $g( t( 0, -row.height ) )
              ( link( { http : 'http://goo.gl' } )
                ( background() )
                ( label( { ideogram : '.../proto/http/ideogram/', text : 'HTTP' } ) )
                .$elem
              ).$elem
            )
            ( $g( t( -col.width, 400 ) )( $g( r( -90 ) )
              ( link( { xmpp : 'http://xmpp.org' } )
                ( $g( t( 0, -row.height ) )
                  ( background( {
                      height : 2 * row.height,
                      width  : 3 * col.width + 3 * pad.left,
                  } ) )
                  .$elem
                )
                ( label( { ideogram : '.../proto/xmpp/ideogram/', text : 'XMPP' } ) )
                ( $g( t( pad.left, -row.height ) )
                  ( icon( { href : 'http://fb.me', ideogram : '.../co/Facebook/ideogram/', id : 'facebook' } ) )
                  ( $g( t( col.width ) )
                    ( icon( { href : 'http://goo.gl', ideogram : '.../co/Google/ideogram/', id : 'google' } ) )
                    ( $g( t( col.width ) )
                      ( icon( { href : '.../lib/tip/', ideogram : '.../lib/tip/ideogram/', id : 'tip' } ) )
                      .$elem
                    ).$elem
                  ).$elem
                ).$elem
              ).$elem ).$elem
/*
  <g idx="3." id="filesystem">
    <g transform="translate(27, 445)"><g transform="scale(.85)">
    <path d="m-16.35,587,393.1,0,0.3531-47.89-57.07-1.009-0.876-1.137,0.0592-8.587,0.8909-1.01,57.08-1.136,0.0535-11.03-56.79-0.804-0.8968-0.7152-0.0556-10.05,0.4418-0.505,56.79-0.6313-0.003-11.49-56.31-0.3788-0.6947-0.4419-0.002-10.29,57.01-0.5051-0.00011-0.505-0.001-5.558,0.9105-0.8531,21.97,0c0.554,0,1,0.446,1,1v220.3c0,0.554-0.446,1-1,1h-415.9c-0.554,0-1-0.446-1-1v-105.8c0-0.554,0.446-1,1-1z"/>
  </g>
  <g idx="1." id="http" style="visibility:hidden">
    <path d="m-16.79,108.6,33.13,0.5051,1.01,8.965,15.66,0,0.6313-9.47,39.76,0,1.25,10.36,13.39,0,1.25-10.36,44.98,0,1.607,10,13.39,0,1.25-10,40.32,0,2.02,9.849,12.12,0,1.515-9.849,46.72,0,2.02,9.596,13.13,0,2.02-9.596,43.44,0,1.515,10.55,15.66,0,1.01-10.55,44.89,0,0.3531,345.3-57.07,1.009-0.876,1.137,0.0592,8.587,0.8909,1.01,57.08,1.136-0.4678,8.462,0.9105,0.8531,21.97,0c0.554,0,1-0.446,1-1v-465.4c0-0.554-0.446-1-1-1h-416.6c-0.554,0-1,0.446-1,1v97.92c0,0.554,1.554,1,1,1z"/>
  </g>
  <g idx="A." id="xmpp">
    <path d="m-19.4,526.7,43.88-1.009,0.876-1.137-0.0592-8.587-0.8909-1.01-43.9-1.136-0.0535-11.03,43.61-0.804,0.8968-0.7152,0.0556-10.05-0.4418-0.505-43.6-0.6313,0.003-11.49,43.13-0.3788,0.6947-0.4419,0.002-10.29-43.83-0.5051,0.00011-0.505,0.001-154.6-0.9105-0.8531-204.7,0c-0.554,0-1,1-1,1v277.4c0,0.554,0.446,1,1,1h205.2c0.554,0,1-0.446,1-1z"/>

    <g id="facebook">
      <rect fill="#3b5998"/>
      <g transform="translate(27, 445)"><g transform="scale(.85)">
        <use xlink:href="" width="100" height="100"/>
      </g></g>
    </g>
    <g id="google">
      <rect fill=""/>
      <g transform="translate(27, 445)"><g transform="scale(.85)">
        <use xlink:href="" width="100" height="100"/>
      </g></g>
    </g>
    <g id="tip">
      <rect fill=""/>
      <g transform="translate(27, 445)"><g transform="scale(.85)">
        <use xlink:href=".../lib/tip/ideogram/" width="100" height="100"/>
      </g></g>
    </g>
    </g></g>
  </g>
*/
            ).$elem
        )
    } } }
} )()
