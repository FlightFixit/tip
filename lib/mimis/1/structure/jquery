( function() {
    var def = {
        row : { height : 100 },
        col : { width  : 100 },
        pad : {
            left : 10,
            bottom : 10,
        },
    }
    with( def ) {
        mimis.x( def, {
            rect : {
                rx : 1,
                ry : 1,
                x : 0,
                y : 0,
                width : col.width,
                height : row.height,
            },
            use : {
                width : col.width,
                height : row.height,
            },
            display : {
                width : 4 * col.width,
            },
            indent : 15,
            current : {
                width : 4 *  col.width,
            },
        } )
    }      

    // Format transform
    var t = {
        t : function( a, b ) {
            return {
                transform : ( "translate("
                              + a
                              + ( b && ( ',' + b ) || '' )
                              + ")" )
            }
        },
        s : function( a, b ) {
            return {
                transform : ( "scale("
                              + a
                              + ( b && ( ',' + b ) || '' )
                              + ")" )
            }
        },
    }
    
    function label( cfg ) {
        with( mimis ) { with( def ) { with( t ) {
            with( cfg ) {
                return ( $g( {               func : 'label'                      } )
                         ( $g( {             func : 'line'                       } )
                           ( $g (            t( pad.left,        row.height / 2  ) )
                             ( $g( {         func : 'named icon'                 } )
                               ( $g(         t( col.width / 2                    ) )
                                 (
                                     $g(     s( .8                               ) )
                                     ( $g(   t( -row.height / 2, -col.width / 2  ) )
                                       ( $use( x( def.use, {
                                           'xlink:href' : ideogram,
                                       } ) )
                                       ).$elem
                                     ).$elem
                                 )(
                                     $g( {   func : 'text'                       } )
                                     ( $g(   t( col.width / 2                    ) )
                                       ( $g( t( 0,                row.height / 5 ) )
                                         ( $text(
                                             text
                                         ) ).$elem
                                       ).$elem
                                     ).$elem
                                 ).$elem
                               ).$elem
                             ).$elem
                           ).$elem
                         ).$elem
                       )
            }
        } } }
    }
        
    function background( cfg ) {
        with( mimis ) { with( def ) {
            with( cfg ) {
                return ( $g( { func : 'background' } )
                         ( $rect( {
                             height : row.height * ( depth.below + 1 ) + ( depth.below * pad.bottom ),
                             width  : current.width,
                         } ) )
                       ).$elem
            }
        } }
    }

    with( mimis ) { with( def ) { with( t ) {
        function nest() {
            with( mimis ) { with( def ) { with( t ) {
            var delta = 2 * indent
            current.width -= delta
            var ret = $g( t( indent, row.height ) ).apply( this, arguments )
            current.width += delta
            return ret
            } } }
        }

        function l( cfg ) {
            with( mimis ) { with( def ) { with( cfg ) {
                // ToDo: Handle more than 1
                for( key in cfg ) {
                    return function() {
                        return $a( { 'xlink:href' : cfg[ key ] } )(
                            $g( { id : key } ).apply( this, arguments ).$elem
                        )
                    }
                }
            } } }
        }

        $('script:last').after(
            ( l( { chrome : 'http://www.google.com/chrome/' } )
              ( background( { depth : { above : 0, below : 3 } } ) )
              ( label( { ideogram : '.../co/Google/Chrome/ideogram/', text : 'Chrome' } ) )
              ( nest
                ( l( { crx : 'Chrome/extension/' } )
                  ( background( { depth : { above : 1, below : 2 } } ) )
                  ( label( { ideogram : '.../lib/mimis/logo/button/', text : 'Extension' } ) )
                  ( nest
                    ( l( { jvm : 'java/src/org/dhappy/mimis/CacheAgentApplet.java' } )
                      ( background( { depth : { above : 2, below : 1 } } ) )
                      ( label( { ideogram : '.../image/logo/Sun/Java/Duke/', text : 'Applet' } ) )
                      ( nest
                        ( l( { neo4j : 'http://neo4j.org' } )
                          ( background( { depth : { above : 3, below : 0 } } ) ).$elem
                          // Chrashes 
                          //( label( { ideogram : '.../image/logo/Neo4j/', text : 'Neo4j' } ) )
                        ).$elem
                      ).$elem
                    ).$elem
                  ).$elem
                ).$elem
              ).$elem
            ).$elem
        )
    } } }
} )()
