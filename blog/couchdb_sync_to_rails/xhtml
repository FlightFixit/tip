<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
  <head>
    <title>Syncing CouchDB to ActiveRecord</title>
    <script type="text/javascript" src="//ajax.googleapis.com/ajax/libs/jquery/1.10.1/jquery.min.js"></script>
    <link href='http://fonts.googleapis.com/css?family=Open+Sans' rel='stylesheet' type='text/css'/>
    <link rel="stylesheet" type="text/css" href=".../style/main/css" />
    <link rel="stylesheet" type="text/css" href="css" />
    <style type="text/css">
    </style>
    <link rel="icon" type="image/png" href=".../image/icon/cigarette/png" />
  </head>
  <body>
    <div class="header">
      <h1>Syncing CouchDB to ActiveRecord</h1>
      <h2><a href="http://dhappy.org">Will Holcomb</a></h2>
      <h2>1 May 2014</h2>
      <hr style="width: 50%;" />
    </div>

    <p>I have been tasked with writing a mobile app for collecting data about gas wells. My forays into the field before showed me how difficult the synchronization of complex data is, so I wanted to use CouchDB for the data store.</p>

    <p>CouchDB has a pool of javascript objects, each with a guid so they can be copied with impunity, The server keeps track of a revision history as well as conflict history when there are conflicting writes.</p>

    <p>Unfortunately, the client needs the capacity to run SQL queries on the data, so backing Rails with CouchRest Model isn't an option. This means running a process to synchronize the databases.</p>

    <p>There are two <acronym title="Object Relational Mapper">ORM</acronym>s being used in the system: Ember data is being used to abstract the mobile data in CouchDB and ActiveRecord is being used to persist the Rails data in Postgresql. I would like to have access to both, but since one is in ruby and the other javascript, that's likely not possible. Scenarios I have imagined:</p>

    <ul>
      <li>Javascript running in the mobile app syncs using the Ember ORM and Rails JSON API.</li>
      <li>Same as above, but running in a Node.js app.</li>
      <li>Ruby listens to changes to the CouchDB app and syncs changes through ActiveRecord.</li>
      <li>Ruby loads the Ember ORM in therubyracer and syncs changes through ActiveRecord.</li>
    </ul>

    <p>The last option leverages the ORM on both sides, so I am going to try it. It's unlikely to be efficient, but it should be maintainable.</p>

    <p>ActiveRecord is apparently available in rake tasks, so I will try creating one at <code>lib/tasks/sync.rake</code>:</p>

    <pre class="prettyprint">desc "Sync a couchdb instance with a rails app"

namespace :sync do
  desc "Sync ActiveRecord to CouchDB"
  task couch: :environment do
  end
end</pre>

    <p>Now I can run <code>rake sync:couch</code> to execute that code. The process that I want is change adapter triggers a javascript method which interfaces with ActiveRecord. The first thing I will test is simply creating a new ActiveRecord instance from javascript.</p>

    <p>To begin, I add <code>therubyracer</code> to my <code>Gemfile</code>, do <code>bundle install</code>, and the rake task works.</p>

    <p>I'm uncertain how Ember will react to being loaded outside a browser, so the first thing I will do is load the framework. The ember app is in a separate git repository. It would be nice if it were loaded and kept up to date with the other dependencies using <code>bundler</code>, but I've never created a gem before and don't want to take the time to learn. So, I will simply add it to the repo as a git submodule.</p>

    <p><code>git submodule add git@github.com:synaptian/howlin-wolf-android.git lib/android</code> clones it, then because I'm my code isn't in the master branch <code>cd lib/android &amp;&amp; git checkout feature/ember-mockup</code>.</p>

    <p>Now in my rake task I can add:</p>

    <p><code>cxt.load(Rails.root.join('lib', 'android', 'www', 'js', 'libs', 'ember-1.5.1.js'))</code></p>

    <p>When I run the task, I get an error: <code>window is not defined</code>. In looking through the code, there is generally a check if window is defined, but it is missing from line 202. So, the proper path is an update to Ember. Forking the project and <code>git submodule add git@github.com:wholcomb/ember.js.git lib/ember</code> adds it to my project.</p>

    <p>Next I build it:</p>

    <ol>
      <li>bundle install</li>
      <li>npm install</li>
      <li>rake dist</li>
    </ol>

    <p>Next I change the code in my rake task to: <code>cxt.load(Rails.root.join('lib', 'ember', 'dist', 'ember.js')</code>. Now the error occurs on line 247. To find it, in the Ember directory I do, <code>git grep isChrome</code> to find it in the source and change the line to:</p>

    <p><code>var isChrome = typeof window !== 'undefined' &amp;&amp; !!window.chrome &amp;&amp; !window.opera;</code></p>

    <p>After rerunning <code>rake dist</code> and <code>rake sync:couch</code>, it now complains that Handlebars is missing, so I change the rake task to:</p>

    <pre class="prettyprint">cxt.load(Rails.root.join('lib', 'android', 'www', 'js', 'libs', 'jquery-1.10.2.js'))
cxt.load(Rails.root.join('lib', 'android', 'www', 'js', 'libs', 'handlebars-1.1.2.js'))
cxt.load(Rails.root.join('lib', 'ember', 'dist', 'ember.js'))</pre>

    <p>Handlebars loads ok, but jQuery dies trying to access the <code>window</code> object. Unlike Ember, it is not designed to load without it, so I will have to insert a shim. In <code>app/assets/javascripts/window.js</code>, I put <code>var window = {}</code> and add it to the beginning of the rake task.</p>

    <p>Using the same process, to allow jQuery to load, eventually you end up with:</p>

    <pre class="prettyprint">var window = {
    document: {
        documentElement: {},
        createElement: function() {
            return {
                setAttribute: function() {},
                getElementsByTagName: function() {
                    return []
                }
            }
        },
        createDocumentFragment: function() {
            return {
                appendChild: function() {
                    return {}
                }
            }
        },
        appendChild: function() {
            return {}
        },
        addEventListener: function() {}
    },
    addEventListener: function() {}
}</pre>

    <p>This allows jQuery to load, but it isn't being found by Ember. To correct this, I add another shim after jQuery loads in <code>app/assets/javascripts/set_jquery.js</code> which is simply: <code>var jQuery = window.jQuery</code>.</p>

    <p>As Ember loads more completely, there are a couple places it complains <code>document</code> isn't defined. I fixed those and Ember now loads without errors.</p>

    <p>Currently the Ember app is just backed by the default data store. To switch it to CouchDB, I included the scripts from <a href="https://github.com/roundscope/ember-couchdb-kit/tree/master/dist">ember-couchbd-kit's distribution folder</a>. When I try loading the resultant page, I get a 404: <code>http://localhost:5984/wells/_design/reading/_view/all?include_docs=true&amp;key=%22reading%22</code>.</p>

    <p>It is looking for a view named <code>all</code>, in a design named <code>reading</code>, and a database named <code>wells</code>. To create the database, I do: <code>curl -X PUT http://localhost:5984/wells</code>. The design document, then, is:</p>

    <pre class="prettyprint">curl -X PUT http://localhost:5984/wells/_design/reading -H 'Content-Type: application/json' -d '
{
  "_id": "_design/reading",
  "language": "javascript",
  "views": {
    "all": {
      "map": "function(doc) { if( doc.type == \"reading\" ) emit(null, doc) }"
    }
  }
}</pre>

    <p>After I load this, I get an error that <code>No 'Access-Control-Allow-Origin' header is present</code>. To fix this I <a href="http://stackoverflow.com/questions/20897033/how-to-add-cors-in-couchdb-no-access-control-allow-origin-header-is-present#answer-20903845">edited <code>/etc/couchdb/local.ini</code></a> and the page loads.</p>

    <p>I get an error when clicking on the wells tab and the solution is an adapted version of what it took for readings.</p>

    <p>I can add a new well and when redirected to the wells page, it shows up. When I reload the page, however, it disappears and the list is empty. To check the database, I go to <a href="http://localhost:5984/_utils/database.html?wells"><code>http://localhost:5984/_utils/database.html?wells</code></a>. I see data, but there is no Type attribute to specify the type. I had assumed that the db adapter would do that for me.</p>

    <p>To fix it, I add the following to my well model: <code>type: DS.attr('string', { defaultValue: 'well' } )</code>. That does correct it in the database, but it is still not showing up when the page is refreshed.</p>

    <p>The structure that I am using to specify the model for a page is:</p>

    <pre class="prettyprint">App.WellsRoute = Ember.Route.extend( {
    model: function() {
        return this.store.find( 'well' )
    }
} )</pre>

    <p>In looking at the <a href="https://github.com/roundscope/ember-couchdb-kit/tree/master/example">CouchDB kit example</a>, they use <code>all</code> instead of <code>find</code>, but changing that doesn't fix it.</p>

    <p>The data is in the system until I reload the page, so I created a well and a reading, which is associated with a well. Then I tried reloading and no data in either view. In looking at the network traffic, when the page loads there is a request for <code>http://localhost:5984/wells/_design/reading/_view/all?include_docs=true&amp;key=%22reading%22</code>. When I try the URL in the browser, I get:</p>

    <p><code>{"total_rows":0,"offset":0,"rows":[]}</code></p>

    <p>The issue is the <code>key</code> parameter. The <code>all</code> view I used didn't emit a key. I need to change it to key on the document type. With CouchDB I have to specify the previous revision when creating an update, so the request looks like:</p>

    <pre class="prettyprint">curl -X PUT http://localhost:5984/wells/_design/reading -H 'Content-Type: application/json' -d '
{
  "_id": "_design/reading",
  "language": "javascript",
  "views": {
    "all": {
      "map": "function(doc) { emit(doc.type, doc) }"
    }
  },
  "_rev": "1-c4de9076711fc50aab2ec4a4695ac5c2"
}'</pre>

     <p>The reading now shows up. I can click and view a well. If I try to load the wells list directly, there is no network request and no data in the UI. That's a problem, but I'm not going to worry with it now.</p>

     <p>I need to decide on a sync direction to test first. Both have to be working before it can be deployed, so I will first push from the server to CouchDB since I can reset the database with impunity.</p>

     <p>So the process is get the wells from ActiveRecord, pass them to therubyracer, create ember models from them and save them. First, I have to load ember-data and the adapter in the rake task:</p>

     <p>I added the appropriate <code>load</code> statements to the rake task. When it tries to load I get errors that <code>EmberCouchDBKit</code> isn't defined. This is because it is declared a global variable by assigning it to the <code>window</code> object. That object exists, because of the shim for jQuery, but assigning to it has no special consequences. To fix that, I insert a script in the execution chain with:</p>

     <pre class="prettyprint">var EmberCouchDBKit = window.EmberCouchDBKit
var DS = window.DS</pre>

    <p>The script now loads. I create the wells and insert them into the context like:</p>

    <pre class="prettyprint">cxt['wells'] = Well.all.map do |well|
  well_obj = cxt.eval 'new Object()'
  well_obj[:name] = well.name
  well_obj[:asset_id] = well.asset_id
  well_obj
end</pre>

    <p>When I try to access the <code>store</code> to create a new record, however, it is not defined:</p>

    <pre class="prettyprint">var store = App.__container__.lookup('store:main')</pre>

    <p>A response to a <a href="http://stackoverflow.com/questions/23503500/not-able-to-load-store-in-ember-app-loaded-in-therubyracer">StackOverflow question</a> suggested that the store is only available once everything is loaded and that I should put the code in an <code>App.ready</code> function.</p>

    <p>I did this and, not surprisingly, nothing happens. The document <code>load</code> event is almost certainly necessary for jQuery to switch to ready, and Ember likely relies on that. I use the following code in the jQuery shim to handle sending the load event:</p>

    <pre class="prettyprint">addEventListener: function( name, listener ) {
  if( name == 'load' ) {
    window.loadListeners = window.loadListeners || []
    window.loadListeners.push( listener )
  }
},
removeEventListener: function() {},
fireLoad: function() {
  window.loadListeners.forEach( function( listener ) {
    listener.call( window, {} )
  } )
}</pre>

    <p>The <code>App.ready</code> listener still doesn't fire. Neither does a jQuery ready listner. In looking at the code, <code>promise</code>s are used and they can be executed. It might be possible the rake task is exiting before they have a chance to complete. To give them time, I will try a <code>sleep</code>.</p>

    <p>That had no effect, so changed the <code>setTimeout</code> function to:</p>

    <pre class="prettyprint">function setTimeout( fn ) { fn.call() }</pre>

    <p>Now I get a stack overflow. The source is a recursive check for <code>document.body</code>, so I add that to the shim. Next I get an error: <code>Cannot read property 'childNodes' of undefined</code>.</p>

    <p>I realized that I am loading the entirety of my Ember app, so it will try to render the UI. To prevent this, I isolated the models in a separate file and only loaded them.</p>

    <p>That did not fix it, in looking more closely at the stack trace, I see it is coming from Ember's <code>testCheckboxClick</code> which inserts a checkbox into the document and tests it. I added document existence checks to a couple places they were needed in the initialization process.</p>

    <p>And it doesnn't work. This code executes:</p>

    <pre class="prettyprint">App.ready = function() {
    var store = App.__container__.lookup('store:main')
    wells.forEach( function( well ) {
        store
            .createRecord( 'well', {
                asset_id: well.asset_id,
                name: well.name
            } )
            .save()
    } )
}</pre>

    <p>Nothing is saved to the database. Now that I think about it, none of the network infrastructure is there, so there's no way it can work. Damn.</p>

    <p>So my options are either to figure out what network calls are being made and implement the needed functionality, or give up on using Ember. I hate to have wasted time, but the objects that are being created are very simple. I think I'll look into accesing Couch from ruby.</p>

    <p>With rails, I can either use <a href="https://github.com/couchrest/couchrest">CouchRest</a> or <a href="https://github.com/couchrest/couchrest_model">CouchRest Model</a> and have a generated <acronym title="Object-Relational Map">ORM</acronym>. Since neither implements the changes API, I am going to avoid the extra complexity of the persistence layer.</p>

    <p>The code that I used to create the wells in the database is just:</p>

    <pre class="prettyprint">@db = CouchRest.database! 'http://127.0.0.1:5984/wells'
Well.all.each do |well|
  response = @db.save_doc( {
                             name: well.name,
                             asset_id: well.asset_id,
                             type: 'well'
                           } )
end</pre>

    <p>This creates the wells and they load in the mobile app. if it is run again, however, it will create all the wells a second time. I need to check if a well exists before adding it.</p>

    <p>Each well has a unique asset id, so I can use that to look well up. The only query possible on a CouchDB is on the key used in for map/reduce, so I need to create a view for wells that is keyed on asset id.</p>

    <pre class="prettyprint">curl -X PUT http://localhost:5984/wells/_design/well -H 'Content-Type: application/json' -d '
{
  "_id": "_design/well",
  "language": "javascript",
  "views": {
    "all": { "map": "function(doc) { emit(doc.type, doc) }" },
    "asset_ids": { "map": "function(doc) { emit(doc.asset_id, doc) }" }
  },
  "_rev": "4-8c76c4fac23a63ad4e8764551afb650a"
}'</pre>

    <p>I can now visit <a href="http://localhost:5984/wells/_design/well/_view/asset_ids?key=1010">http://localhost:5984/wells/_design/well/_view/asset_ids?key=1010</a> and view a single well entry. The query looks like:</p>

    <pre class="prettyprint">Well.all.each do |well|
  response = @db.view( 'well/asset_ids', { key: well.asset_id } )
  if response['rows'].count == 0
    ⋮</pre>

    <p>Next I would like to sync the readings. In the Rails app these are called <code>WellVolume</code>s. Each has an associated well id, so I have to map between the Rails ids and those in Couch.</p>

    <p>I collect that mapping as I check for the existence of wells:</p>

    <pre class="prettyprint">db_ids = []

Well.all.each do |well|
  search_response = @db.view( 'well/asset_ids', { key: well.asset_id } )
  wells = search_response['rows']
  if wells.count > 1
    puts "#{wells.count} wells found for asset id: #{well.asset_id}"
  elsif wells.count == 1
    db_ids[well.id] = wells[0]['id']
  else
    puts "Creating well in Couch: #{well.name}"
    save_response = @db.save_doc( {
                                    name: well.name,
                                    asset_id: well.asset_id,
                                    type: 'well'
                                  } )
    db_ids[well.id] = save_response['id']
  end
end</pre>

    <p>It would be more efficient to load all the wells at once, but I'll leave that for later. Avoiding inserting data twice is more complex for readings because there is no inherent unique identifier. I have two options, either build a query on well and reading date, which should be unique, or store the rails id and use it.</p>

    <p>The Rails id seems to be the most foolproof method, so I will use it. Accessing it means updating the readings view:</p>

    <pre class="prettyprint">curl -X PUT http://localhost:5984/wells/_design/reading -H 'Content-Type: application/json' -d '
{
  "_id": "_design/reading",
  "language": "javascript",
  "views": {
    "all": { "map": "function(doc) { emit(doc.type, doc) }" },
    "rails_ids": { "map": "function(doc) { if(doc.type == \"reading\") emit(doc.rails_id, doc) }" }
  },
  "_rev": "2-15e26d319dc99e2d1c10e0e9e439d3ed"
}'</pre>

    <p>The data did not load as expected and I would like to recreate the database. To make this easier, I created a rake task:</p>

    <pre class="prettyprint">namespace :couch do
  desc "Reinitialize CouchDB"
  task reset: :environment do
    host = URI::encode "http://#{ENV['COUCH_USER']}:#{ENV['COUCH_PASS']}@127.0.0.1:5984"
    begin
      RestClient.delete "#{host}/wells"
    rescue => ex
      raise ex if ex.response.code != 404
    end
    RestClient.put "#{host}/wells", ''
    RestClient.put("#{host}/wells/_design/well",
                   '{
                      "_id": "_design/well",
                      "language": "javascript",
                      "views": {
                        "all": { "map": "function(doc) { emit(doc.type, doc) }" },
                        "asset_ids": { "map": "function(doc) { if(doc.type == \"well\") emit(doc.asset_id, doc) }" }
                      }
                    }',
                   content_type: 'application/json')
    RestClient.put("#{host}/wells/_design/reading",
                   '{
                      "_id": "_design/reading",
                      "language": "javascript",
                      "views": {
                        "all": { "map": "function(doc) { emit(doc.type, doc) }" },
                        "rails_ids": { "map": "function(doc) { if(doc.type == \"reading\") emit(doc.rails_id, doc) }" }
                      }
                    }',
                   content_type: 'application/json')
  end
end</pre>

    <p>After fixing the import, there is too much data. With a few thosand entries, it takes a couple seconds for the page to load. With more than 8-9000 I get an error: <code>Uncaught RangeError: Maximum call stack size exceeded</code>. I need to paginate the results to deal with this.</p>

    <p>CouchDB has <code>limit</code> and <code>offset</code> parameters, but there is a recommendation against using them because <code>offset</code> is inefficient. Instead an extra result is returned and that key is used as the start position for the next query.</p>

    <p>To start with I am going to create a view that returns the readings sorted by time:</p>

    <pre class="prettyprint">"by_time": { "map": "function(doc) { if(doc.type == \"reading\") { d = new Date(doc.time); emit([d.getFullYear(), d.getMonth(), d.getDate(), d.getHours(), d.getMinutes()], doc) } }"</pre>

    <p>Now I have to tell Ember to return items from this view, that looks like:</p>

    <pre class="prettyprint">return this.store.findQuery( 'reading', {
  designDoc: 'reading',
  viewName: 'by_time',
  options: {
    descending: true
  }
} )</pre>


    <script src="//google-code-prettify.googlecode.com/svn/loader/run_prettify.js" type="text/javascript"></script>
  </body>
</html>
