<!DOCTYPE html PUBLIC
 "+//ISBN 0-9673008-1-9//DTD OEB 1.0.1 Document//EN"
 "http://openebook.org/dtds/oeb-1.0.1/oebdoc101.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:xi="http://www.w3.org/2001/XInclude">
<head profile="http://gmpg.org/xfn/11"> 
<link rel="icon" type="image/svg+xml" href=".../revolution/Technoanarchist/logo/letter/" />
<link rel="icon" type="image/png" href=".../revolution/Technoanarchist/logo/letter/png" />
<link rel="stylesheet" type="text/css" href=".../style/blog/css"/>
<link rel="stylesheet" type="text/css" href=".../lib/jquery/ui/css"/>
<link rel="stylesheet" type="text/css" href="css"/>
<title>Compression Trees</title>
</head>
<body>
<h1>Compression Trees</h1>
<h2>by Will Holcomb</h2>

<hr/>

<style type="text/css"><![CDATA[
(* I'm going to write descriptors for tree decorators with the expectation that a team of programmers will adapt <is=.../lib/mimis/2. ̅0>Mìmís</> to interpret and execute these decorators. *)

/ > section > title[ text() == 'Abstract' ] {
}
]]></style>
<section>
<title>Abstract</title>

<p><a href=".../lib/mimis/">Mïmis</a> is a <acronym title="peer=to-peer">P2P</acronym> storage system. Its structure draws from a variety of sources and I want to try to describe it so I can enlist help in developing it.</p>
</section>

<p>I'll build the concept up from a traditional filesystem tree:</p>

<object style="height: 300px" data="filesystem/traditional/svg"/>

<!--<xi:include href=".../define/science/computer/function/hash/xhtml"/>-->

<p>A hash function is a mathmatical operation that takes a value and transforms it into a fixed-width hash code. These are used in computer science to generate <q>unique</q> identifiers for files. It is possible for two files to have the same hash, but the probability is vanishingly small.</p>

<p>For example, the function that I am using for the initial version of Mïmis is <acronym title="Simple Hashing Algorithm">sha</acronym>-256. It converts the bytes in a file into a 256-bit hash. The number of possible values representible by 256 bits is:</p>

<p class="center">2<sup>256</sup> ≅ 1.1579209 × 10<sup>77</sup></p>

<p>For reference, the net <a href="http://www.madsci.org/posts/archives/may98/892502124.Ph.r.html">estimates</a> there are 1.2 × 10<sup>57</sup> atoms in the solar system.</p>

<p>The first transformation is to take each file and rename it to its hash value:</p>

<object style="height: 300px" data="filesystem/hash/filenames/svg"/>

<p>These filenames can now be ordered by their names:</p>

<object style="height: 300px" data="filesystem/hash/filenames/ordered/svg"/>

<p>Now the files in each directory can be concatenated and hashed to produce a hash name for the directory: <em style="visibility: hidden">(It may be permissible to just hash the bytes of the names rather than the bytes of the files. That would also be unique and though it would collide with a file containing that series of bytes, I'm not sure that matters.)</em></p>

<object style="height: 300px" data="filesystem/hash/directories/svg"/>

<p>Those directories can now be ordered and the process repeated to generate a hash for higher level directories:</p>

<object style="height: 300px" data="filesystem/hash/names/svg"/>

<p>Drawn in a more conventional tree form, this structure would be:</p>

<object style="height: 300px" data="filesystem/hash/tree/svg"/>

<p></p>

<p>There are three main changes to the system:</p>

<h2>Stub Names</h2>

<p>Filenames are decomposed into directories containing files whose names are what were previously the file extensions. For example, consider the contents of my <a href=".../image/">image collection</a>. When I started I had files like:</p>

<ul>
  <li><a href=".../image/kitten/head/svg">kitten_head.svg</a></li>
  <li><a href=".../image/light bulb/svg">light bulb.svg</a></li>
  <li><a href=".../image/flag/England/">Flag of England.svg</a></li>
</ul>

<p>Converting them to stub form they become:</p>

<ul>
  <li><a href=".../image/kitten/head/svg">kitten/head/svg</a></li>
  <li><a href=".../image/light bulb/svg">light bulb/svg</a></li>
  <li><a href=".../image/flag/England/">flag/England/svg</a></li>
</ul>

<p>The directories leading up to the file are a list of increasingly specific tags. Part of the point of stub links is to ease comprehensible of alternate paths. For example, the path: <code><a href=".../book/by/Nancy Kress/Beggars in Spain/">book/by/Nancy Kress/Beggars in Spain/</a></code>.</p>

<ul>
  <li></li>
</ul>

<p>The directory <code>Beggars in Spain</code> is also linked to from:</p>

<ul>
  <li>magazine/Asimov's Science Fiction/1991/April/Nancy Kress/Beggars in Spain</li>
  <li>book/award/Hugo/winner/1992</li>
  <li>book/award/Nebula/winner/1992</li>
  <li>book/collection/The Year's Best Science Fiction/9th/Nancy Kress/Beggars in Spain</li>
  <li>book/collection/The Year's Best Science Fiction/9th/1</li>
</ul>

<h2>Relative Roots</h2>

<p>Each directory contains a <code>...</code> subdirectory which is a symlink to <code>../...</code>. The one exception is the root of the filesystem where <code>...</code> is a link to <code>.</code>.</p>

<p>Structurally this creates a tree that looks like:</p>

<object id="fsdiagram" data=".../lib/mimis/tree/in/filesystem/svg"/>

<p></p>

<h2>Indirected Binaries</h2>

<p>All binary files are stored as links to <code>.../hashes/</code></p>
</body>
</html>
