$( function() {
    var connections = {} // connections[uuid] = RTCPeerConnection
    var sendChannels = {}
    var receiveChannels = {}

    var server = new SimpleSignaling( {
        // ws_uri: 'ws://simplesignaling-piranna.dotcloud.com'
        ws_uri: 'ws://localhost:8080',
        room: 'broadcast-test'
    } )

    console.log( "Created server: " + server.uid() )

    var pubnub = PUBNUB.init( {
        publish_key   : 'pub-c-53cbf79b-27de-4cf9-999f-5e4d5ae417aa',
        subscribe_key : 'sub-c-86defc0a-d85e-11e2-b1b2-02ee2ddab7fe'
    } )

    server.onmessage = function() {
        console.log( 'onmessage', arguments )
    }

    server.onopen = function() {
        console.log( 'onopen', arguments )
        pubnub.publish( {
            channel: "mimis/peer/awaken",
            message: server.uid()
        } )
    }

    server.onerror = function() {
        console.log( 'onerror', arguments )
    }

    pubnub.subscribe( {
        channel : 'mimis/peer/awaken',
        message : function( msg ) {
            var dest_uid = msg
            if( server.uid() != dest_uid ) {
                console.log( 'mimis/peer/awaken', dest_uid )
                onawaken( dest_uid )
            }
        },
    } )

    function onawaken( uid ) {
        var servers = null
        connections[uid] = new webkitRTCPeerConnection( servers,
                                                        { optional: [{ RtpDataChannels: true }] } )
    
        function gotCandidate( event ) {
            if( event.candidate ) {
                server.send( event.candidate, uid, server.room() )
                trace( 'Local ICE candidate', event.candidate.candidate )
            }
        }

        connections[uid].onicecandidate = gotCandidate

        try {
            // Reliable Data Channels not yet supported in Chrome
            sendChannels[uid] = connections[uid].createDataChannel( "mimisChannel",
                                                                    { reliable: false } )
            trace( 'Created send data channel' )
        } catch (e) {
            console.error( 'Failed to create data channel. ' +
                           'You need Chrome M25 or later with RtpDataChannel enabled' )
            trace( 'createDataChannel() failed with exception: ' + e.message )
        }

        function handleSendChannelStateChange() {
            var readyState = sendChannels[uid].readyState
            trace( "Send channel state is: " + readyState )
        }

        sendChannels[uid].onopen = handleSendChannelStateChange
        sendChannels[uid].onclose = handleSendChannelStateChange
        
        function gotReceiveChannel( event ) {
            trace( 'Receive Channel Callback' )
            receiveChannels[uid] = event.channel

            function handleMessage( event ) {
                trace('Received message from: ' + uid + ": " + event.data )
            }
            
            receiveChannels[uid].onmessage = handleMessage
            receiveChannels[uid].onopen = handleReceiveChannelStateChange
            receiveChannels[uid].onclose = handleReceiveChannelStateChange
        }
    
        // remotePeerConnection.ondatachannel = gotReceiveChannel
    
        function gotLocalDescription( desc ) {
            connections[uid].setLocalDescription( desc )
            trace( 'Offer from: ' + uid, JSON.stringify( desc ) )
            server.send( desc, uid, server.room() )
            
            /*
            function gotRemoteDescription(desc) {
                remotePeerConnection.setLocalDescription(desc)
                //trace('Answer from remotePeerConnection \n' + desc.sdp)
                trace( 'Answer from remotePeerConnection', JSON.stringify( desc ) )
                localPeerConnection.setRemoteDescription( desc )
            }
            
            remotePeerConnection.createAnswer( gotRemoteDescription )
            */
        }
        
        connections[uid].createOffer( gotLocalDescription )
    }
    
    function trace() {
        var args = Array.prototype.slice.apply( arguments )
        if( typeof args[0] == 'string' ) {
            args[0] = ( performance.now() / 1000 ).toFixed( 3 ) + ': ' + args[0]
        }
        console.log.apply( console, args )
    }
} )
