<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
  <head>
    <title>Establishing WebRTC Connections</title>
    <script src="//ajax.googleapis.com/ajax/libs/jquery/1.10.1/jquery.min.js" type="text/javascript"></script>
    <script src="//google-code-prettify.googlecode.com/svn/loader/run_prettify.js" type="text/javascript"></script>
    <link rel="stylesheet" type="text/css" href=".../style/main/css" />
    <link rel="stylesheet" type="text/css" href="css" />
    <style type="text/css">
      
    </style>
  </head>
  <body>
    <div class="header">
      <h1>Establishing WebRTC Connections</h1>
      <h2><a href="http://dhappy.org">Will Holcomb</a></h2>
      <h2>28 June 2013</h2>
    </div>
    
    <p><a href="http://www.webrtc.org">WebRTC</a> is an extension to cutting-edge browsers that allows for <acronym title="Peer-to-Peer">P2P</acronym> connections. A popular example is <a href="https://apprtc.appspot.com/?r=07296553">Google's AppRTC</a> which sets up a chat between two browser windows. Another interesting example is <a href="http://www.sharefest.me">Sharefest</a> which allows drag and drop file sharing.</p>

    <p>Even though the connections for these programs are between two browser windows, connection setup requires accessing servers at known locations on the internet. This intermediating server is known as a signaling server. It communicates <acronym title="Session Description Protocol">SDP</acronym> and <acronym title="Interactive Connectivity Establishment">ICE</acronym> messages back and forth to coordinate peers.</p>

    <p>The application for this example is a <a href="https://en.wikipedia.org/wiki/Wall_(Unix)">wall</a>. Open this page in multiple tabs in <a href="http://www.liberiangeek.net/2011/12/install-google-chrome-using-apt-get-in-ubuntu-11-10-oneiric-ocelot/">chromium-beta</a> and you can send messages between them as well as anyone else in the world who has <a href="//wholcomb.github.io/SimpleSignaling/">a page</a> open and is using the <a href="//ec2-54-242-188-68.compute-1.amazonaws.com:8080">same signaling server</a>.</p>

    <div id="wall">
      <div class="output">
        <ul id="peers"></ul>
        <div id="messages"></div>
      </div>
      <div class="input">
        <input id="message" type="text" />
        <a id="send" class="btn">Send</a>
      </div>
    </div>

    <p>AppRTC uses the <a href="https://developers.google.com/appengine/docs/python/channel/">Google Channel <acronym title="Application Programming Interface">API</acronym></a>. For the purposes of this example, we will be using <a href="https://shareit.5apps.com">ShareIt</a>'s <a href="https://github.com/ShareIt-project/SimpleSignaling">SimpleSignaling</a> which routes messages between <a href="http://en.wikipedia.org/wiki/WebSocket">websockets</a> running on <a href="http://nodejs.org">Node.js</a>.</p>

    <p>Unfortunately, <a href="http://heroku.com">Heroku</a> <a href="https://devcenter.heroku.com/articles/using-socket-io-with-node-js-on-heroku">doesn't support websockets</a>. So, we will use an <a href="https://console.aws.amazon.com/ec2/home#s=Instances"><acronym title="Elastic Compute">ec</acronym>2 instance</a> :</p>

    <ul>
      <li>Create instance</li>
      <li>Open port 8080</li>
      <li><code>sudo apt-get install git nodejs npm</code></li>
      <li><code>git clone https://github.com/wholcomb/SimpleSignaling</code></li>
      <li><code>npm install ws</code></li>
      <li><code>./<a href="https://github.com/wholcomb/SimpleSignaling/blob/master/bin/run_server">SimpleSignaling/bin/run_server</a></code></li>
    </ul>

    <p>To use SimpleSignalling, include <a href="http://wholcomb.github.io/SimpleSignaling/simpleSignaling.js">simpleSignaling.js</a> in your <acronym title="HyperText Markup Language">HTML</acronym>. The API for SimpleSignalling is pretty straightforward:</p>

    <code class="pretttyprint">var server = new SimpleSignaling( {
  // The SimpleSignaling server
  ws_uri: 'ws://ec2-54-242-188-68.compute-1.amazonaws.com:8080',
  room: 'broadcast-test', // Optional, not really used in this example
  uid: 'user identifier' // Optional, a <a href="http://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_.28random.29"><acronym title="Universally Unique IDentifier">UUIDv4</acronym></a> will be generated
} )

server.onopen = function() {}
server.onmessage = function( message, source, room ) {}
server.onerror = function( error ) {}

server.send( message, uid, room )

server.uid() // Returns UID
server.room() // Returns room</code>

    <p></p>

    <script type="text/javascript" src="//cdn.pubnub.com/pubnub-3.5.1.min.js"></script>
    <script type="text/javascript" src=".../github/ShareIt-project/SimpleSignaling/simpleSignaling.js"></script>
    <script type="text/javascript" src=".../github/ShareIt-project/SimpleSignaling/examples/wall.js"></script>
  </body>
</html>
