<!DOCTYPE html PUBLIC
 "+//ISBN 0-9673008-1-9//DTD OEB 1.0.1 Document//EN"
 "http://openebook.org/dtds/oeb-1.0.1/oebdoc101.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head profile="http://gmpg.org/xfn/11"> 
<link rel="icon" type="image/svg+xml" href=".../revolution/Technoanarchist/logo/letter/" />
<link rel="icon" type="image/png" href=".../revolution/Technoanarchist/logo/letter/png" />
<link rel="stylesheet" type="text/css" href=".../style/main/css"/>
<link rel="stylesheet" type="text/css" href=".../style/blog/css"/>
<link rel="stylesheet" type="text/css" href=".../lib/jquery-ui/css"/>
<link rel="stylesheet" type="text/css" href="css"/>
<title>Profit-Donation Funding</title>
</head>
<body>
<h1>Profit-Donation Funding</h1>
<h2>25 March 2011</h2>

<p class="first">I've been thinking a possible open-source development model. I'm having trouble getting the idea winnowed down to elevator speech, so I wanted to write a bit.</p>

<p>The system is built on a peer-to-peer filesystem called <a href=".../lib/mimis/">Mïmis</a>. Its operation and clients are controlled by interacting with named locations in a collaborative namespace. I'm working on the implementation currently. The basic deliverable is a javascript implemention of:</p>

<ul>
<li><code>mimis.read( location, callback )</code></li>
<li><code>mimis.write( location, callback )</code></li>
</ul>

<p>Where <code>location</code> refers to a position in the filesystem. For example, I'm working on <a href=".../blog/Visualizing History">mapping the spread of businesses</a>. An instruction in that program might look like:</p>

<code><pre><![CDATA[mimis.read( '.../co/Wal-mart/location/',
      function( locs ) {
        locs.sort( function( a, b ) {
          return a.date.open - b.date.open
        } )
        locs.each( function( loc ) {
          map.add( {
            pos : loc.coordinate,
            icon : loc.logo,
          } )
        } )
      } )]]></pre></code>

<p>The basic process of handling the call is:</p>

<ol>
<li><a href="http://www.google.com/chrome/">Chrome</a> encounters the <code>mimis.read</code> statement.</li>
<li>Execution passes to code from the <a href=".../lib/mimis/crx">Mïmis extension</a>.</li>
<li>The extension communicates with a <a href="http://neo4j.org">Neo4j</a> instance to build the response.</li>
</ol>

<p>Conceptually, the Mïmis filesystem is a forest of links which contextualize a pool of hashes. In a traditional filesystem, a file is placed in a single directory. In Mïmis, the file is entered into the system and terminates (ideally) any comprehensible path which uniquely identifies it.</p>

<h2>Stub Filenames</h2>

<p>I'm <a href="https://github.com/wholcomb/tip">beginning to model it</a> by creating a system of links in a filesystem. There's a couple changes that are needed to make it work. The first is using stub filenames. The name of the file is descriptive of the format of the contents of a file, but not its nature. All the "name" information is in the paths.</p>

<p>For example, one path might be: <code><a href=".../book/by/Nancy Kress/Beggars in Spain/html">book/by/Nancy Kress/Beggars in Spain/html</a></code>. The directory <code><a href=".../book/by/Nancy Kress/Beggars in Spain/">Beggars in Spain</a></code> is also linked to from:</p>

<ul>
<li>magazine/Asimov's Science Fiction/1991/April/Beggars in Spain</li>
<li>magazine/Asimov's Science Fiction/1991/April/Nancy Kress/Beggars in Spain</li>
<li>book/series/by/Nancy Kress/Sleepless/Beggars in Spain</li>
<li>book/award/Hugo/winner/1992</li>
<li>book/award/Nebula/winner/1992</li>
<li>book/collection/The Year's Best Science Fiction/9th/Nancy Kress/Beggars in Spain</li>
<li>book/collection/The Year's Best Science Fiction/9th/1</li>
</ul>

<p>Loading <code>html</code> from any of those locations will load the appropriate file.</p>

<p>Creating the stub form of resource names is generally pretty straightforward. For example, consider the contents of my <a href=".../image/">image collection</a>. When I started I had files like:</p>

<ul>
  <li><a href=".../image/kitten/head/svg">kitten_head.svg</a></li>
  <li><a href=".../image/light bulb/svg">light bulb.svg</a></li>
  <li><a href=".../image/flag/England/">Flag of England.svg</a></li>
</ul>

<p>Converting them to stub form they become:</p>

<ul>
  <li><a href=".../image/kitten/head/svg">kitten/head/svg</a></li>
  <li><a href=".../image/light bulb/svg">light bulb/svg</a></li>
  <li><a href=".../image/flag/England/">flag/England/svg</a></li>
</ul>


<h2>Relative Roots</h2>

<p>Each directory contains a <code>...</code> subdirectory which is a symlink to <code>../...</code>. The one exception is the root of the filesystem where <code>...</code> is a link to <code>.</code>.</p>

<p>Structurally this creates a tree that looks like:</p>

<object data=".../lib/mimis/tree/in/filesystem/svg" type="image/svg+xml" style="height: 300px; width: 100%;"/>

<p>Algorithmically, what this structure allows is trees </p>

<h2>Indirected Binaries</h2>

<p>All binary files are stored as links to <code>.../hashes/</code></p>


<p>The Neo4j instance serves to aggregate multiple filesystem sources. The base source </p>

<p>Alice gets a new <a href="http://www.epson.com/cgi-bin/Store/jsp/Product.do?sku=B11B189011">scanner</a>, plugs it in, starts the <a href="https://launchpad.net/simple-scan">scanning software</a>, clicks <code>scan</code> and gets the error:</p>

<div class="error message" source="dev/scanner">
<img rel="icon" src=".../image/icon/Gnome/devices/scanner/" title="Scanner"/>
<h1>No Scanner Detected</h1>
<p>Is your scanner connected and turned on?</p>
<!--<img rel="yes button" src=".../image/button/yes" title="Yes"/>-->
<object rel="no button"     data=".../image/button/no"     title="No"          type="image/svg+xml"/>
<object rel="¬/know button" data=".../image/button/¬/know" title="Don't Know"  type="image/svg+xml"/>
<object rel="yes button"    data=".../image/button/yes"    title="Yes"         type="image/svg+xml"/>
</div>

<ul>
<li><p>If they click <code>no</code>, they get some snippy comment about the nature of electronic devices.</p></li>

<li><p>If they click <code>don't know</code>, they get appropriate instruction/options for connecting. Eventually they get back to this question with the ability to answer <q><code>yes</code>.</q></p></li>
<li><p>If they enter <code>yes</code> they might get some further diagnostic questions, but eventually end up they end up with the choice to escalate the issue.</p></li>
</ul>

<p>Developers have a queue of messages to potentially act on. When a user escalates an issue, it is pushed into some of those queues. Information is gathered through question messages. One type of those is a fuzzy tag. For example, one question useful for determining which queues to place a trouble ticket would be:</p>

<p>The first level above a novice user is a diagnostician. This is someone with the technical expertise necessary to narrow an amorphous user complaint into a usable bug report. Advanced users might well not need an intermediate. The goal is to produce some set of development needs expressed as:</p>

<dl>
<dt>Bug</dt><dd>A aspect of a piece of software that does not meet spcification. For example, I filed a <a href="http://code.google.com/p/chromium/issues/detail?id=77367">Chrome bug</a> yesterday because the <acronym title="Scalable Vector Image">SVG</acronym>s in my <a href="http://dhappy.org">landing page</a> were too small.</dd>

<dt>Feature</dt><dd>A change to the spcification of the program. For example, Alice, for her scanner, needs a driver for <a href="http://www.ubuntu.com">Ubuntu</a>. Support for the <a href="http://www.epson.com/cgi-bin/Store/jsp/Product.do?sku=B11B189011">Epson v500</a> isn't claimed by the <a href="http://www.sane-project.org/sane-mfgs.html">pertinent project</a>, so it needs to be added.</dd>
</dl>


<p> to prepare a properly descriptive bug report. For example, Alice needed a feature request created. A variety of pages might be collected, but one of them will be a stub message that looks something like:</p>

<div class="message" source="dev/scanner">
<img rel="icon" src=".../image/icon/Gnome/devices/scanner/" title="Scanner"/>
<h1>No Scanner Detected</h1>
<p>Is your scanner connected and turned on?</p>
<!--<img rel="yes button" src=".../image/button/yes" title="Yes"/>-->
<object rel="no button"     data=".../image/button/no"     title="No"          type="image/svg+xml"/>
<object rel="¬/know button" data=".../image/button/¬/know" title="Don't Know"  type="image/svg+xml"/>
<object rel="yes button"    data=".../image/button/yes"    title="Yes"         type="image/svg+xml"/>
</div>

</body>
</html>
