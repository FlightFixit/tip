$( function() {
    function buildui() {
        var $tree = $('<div/>')
        var $listing = $('<div/>')
        var $content = 
            $('<div/>')
                .append( $tree )
                .append( $listing )
                .css( {
                    overflow : 'auto',
                    width : '100%',
                    height : '100%',
                } )

        $('body').append( $content )
        $('.vsplitbar')
            .css( {
                width : '5px',
                'background-color' : '#cab',
            } )
        $tree
            .css ( {
                overflow : 'auto',
                width: '15%',
            } )
            .bind( 'open_node.jstree',
                   function( event, data ) {
                       $tree.jstree( 'refresh', data.rslt.obj )
		       //var node = this._get_node( data.rslt.obj )
                       //console.log( $tree.jstree._reference( $tree ) )
//                           .load_node_json( data.rslt.obj, 
                       if( event ) {
                           //console.log( node )
                           console.log( data.rslt.obj )
                           console.log( data )
                       }
                   } )
            .bind( 'load_node.jstree',
                   function( event, data ) {
                       if( event ) {
                           console.log( 'load:' + this )
                           console.log( data )
                       }
                   } )
            .jstree( {
                json_data : {
                    data : function( obj, callback ) {
                        console.log( arguments )
                        callback( [
                            {
                                data : 'Local',
                                attr : { id : 'mimis.root' },
                                children : [
                                    { data : 'Child 1', },
                                    {
                                        get data() {
                                            console.log( 'got' )
                                            return 'Child 2'
                                        },
                                        children : [
                                            {
                                                get data() {
                                                    this.i = this.i ? this.i : 1
                                                    console.log( 'child' )
                                                    return 'Child ' + this.i++
                                                },
                                                children : [
                                                    {
                                                        get data() {
                                                            this.i = this.i ? this.i : 1
                                                            console.log( 'chld' )
                                                            return 'Child ' + this.i++
                                                        },
                                                        children : [
                                                            {
                                                                get data() {
                                                                    console.log( 'cld' )
                                                                    return 'Child 2'
                                                                },
                                                            }
                                                        ],
                                                    }
                                                ],
                                            }
                                        ]
                                    },
                                ],
                            },
                            {
                                'attr' : { 'id' : 'li.node.id' },
                                'data' : {
                                    'title' : 'Remote',
                                    'attr' : { 'href' : '#' }
                                }
                            }
                        ] )
                    },
                },
                'progressive_render' : true,
                'plugins' : [ 'themes', 'json_data' ],
                'load_node' : function ( obj ) {
                    console.log( 'check' )
                    console.log( obj )
                },
            } )
        $content.splitter( {
            type: 'v',
            outline: false,
            sizeLeft: $tree.width(),
            minLeft: 100,
            minRight: 100,
            resizeToWidth: true,
            dock: 'left',
            dockSpeed: 200,
            //cookie: "docksplitter",
            dockKey: 'Z',// Alt-Shift-Z in FF/IE
            accessKey: 'I'// Alt-Shift-I in FF/IE
        } )
    }
    $('head').append(
        // This could run in parallel
        $('<script/>')
            .attr( {
                type : 'application/javascript',
                src : 'http://methvin.com/splitter/splitter.js',
            } )
            .bind( 'load', function() {
                $('head')
                    .append(
                        $('<script/>')
                            .attr( {
                                type : 'application/javascript',
                                src : '.../lib/jquery-jstree/jquery.jstree.js',
                            } )
                            .bind( 'load', buildui )
                    )
            } )
    )
} )
