$( function() {
    function buildui() {
        var $content = $('<div/>')
                .css( {
                    overflow : 'auto',
                    width : '100%',
                    height : '100%',
                } )

        // Wait until all libraries are loaded
        if( $content.splitter == undefined
            || $content.dataTable == undefined
            || $.jstree == undefined
            || mimis.list == undefined ) {
            return
        }

        var $tree = $('<div/>')
        var $listing = $('<div/>')

        var $table = $('<table/>')
            .css( {
                width : '100%',
            } )

        $content
            .append( $tree )
            .append( $listing.append( $table ) )

        $('body').append( $content )

        var tableCols = [
            { sTitle: 'Name' },
            {
                sTitle: 'Date Modified',
                fnRender : function( obj ) {
                    var date = obj.aData[ obj.iDataColumn ]
                    date = new Date( date )
                    return date.toDateString()
                },
            },
            { sTitle: 'Type' },
            {
                sTitle : 'Size',
                sClass : 'center',
                fnRender : function( obj ) {
                    var size = obj.aData[ obj.iDataColumn ]
                    return size
                }
            }
        ]
        
        // Called before a jstree element is expanded
        function treedata( obj, callback ) {
            var listing;
            if( obj == -1 ) { // The default
                listing = [
                    {
                        data : 'Local',
                        attr : {
                            id : 'mimis.local',
                            path : 'file:',
                            title : 'Browse',
                        },
                        children : [ 'placeholder' ],
                    },
                    {
                        data : 'Remote',
                        attr : {
                            id : 'mimis.remote',
                            path : 'xmpp:',
                            title : 'Connect',
                        },
                        children : [ 'placeholder' ],
                    },
                ]
            } else {
                var id = obj.attr( 'id' )
                var path = obj.attr( 'path' )
                var list = mimis.list( path )
                if( id == 'mimis.remote' ) {
                    console.log( 'Remote:' + path )
                    console.log( list )
                } else {
                    listing = []
                    var table = []
                    $(list).each( function( idx, elem ) {
                        listing.push( {
                            data : elem.name,
                            attr : { path : path + elem.name },
                            children : [ 'placeholder' ],
                        } )
                        table.push( [
                            elem.name,
                            elem.modified,
                            'type',
                            elem.size
                        ] )
                    } )
                    $table
                        .dataTable( {
                            aaData : table,
                            aoColumns : tableCols,
                            bPaginate : false, // Disable pagination
                            bDestroy : true, // Rebuild
                        } )
                }
            }
            callback( listing )
        }
        
        // From: http://groups.google.com/group/jquery-dev/browse_thread/thread/86504e9660e893ef
        $.fn.equals = $.fn.equals || function( compareTo ) {
            if( !compareTo
                || !compareTo.length
                || this.length != compareTo.length ) { 
                return false
            }
            for( var i = 0; i < this.length; i++ ) { 
                if( this[i] !== compareTo[i] ) {
                    return false
                }
            }
            return true
        }

        var $lastSelected
        $tree
            .css ( {
                overflow : 'auto',
                width: '15%',
            } )
            .bind( 'open_node.jstree',
                   function( event, data ) {
                       $tree.jstree( 'refresh', data.rslt.obj )
                   } )
            .bind( 'select_node.jstree',
                   function( event, data ) {
                       var $selected = data.rslt.obj
                       if( $selected.equals( $lastSelected ) ) {
                           $tree.jstree( 'toggle_node', $selected )
                       }
                       $lastSelected = $selected
                   } )
            .bind( 'hover_node.jstree',
                   function( event, data ) {
                       var active = data.rslt.obj
                       var display
                       var attrs = [ 'title', 'id', 'path' ]
                       do {
                           // display = active.attr( attrs.dequeue() )
                           display = active.attr( attrs.shift() )
                       } while( ( display == undefined || display == '' )
                                && attrs.length > 0 )
                       window.status = display
                       event.preventDefault()
                   } )
            .jstree( {
                json_data : {
                    data : treedata,
                },
                'progressive_render' : true,
                'plugins' : [ 'themes', 'json_data', 'ui' ],
            } )

        $content.splitter( {
            type: 'v',
            outline: false,
            sizeLeft: $tree.width(),
            minLeft: 100,
            minRight: 100,
            resizeToWidth: true,
            dock: 'left',
            dockSpeed: 200,
            //cookie: "docksplitter",
            dockKey: 'Z',// Alt-Shift-Z in FF/IE
            accessKey: 'I'// Alt-Shift-I in FF/IE
        } )

        // Added by splitter
        $('.vsplitbar')
            .css( {
                width : '5px',
                'background-color' : '#cab',
            } )
    }
    $('head')
        .append(
            // This could run in parallel
            $('<script/>')
                .attr( {
                    type : 'application/javascript',
                    src : 'mimis.jquery',
                } )
                .bind( 'load', buildui )
        )
        .append(
            $('<script/>')
                .attr( {
                    type : 'application/javascript',
                    src : 'http://methvin.com/splitter/splitter.js',
                } )
                .bind( 'load', buildui )
        )
        .append(
            $('<script/>')
                .attr( {
                    type : 'application/javascript',
                    src : '.../lib/jquery-jstree/jquery.jstree.js',
                } )
                .bind( 'load', buildui )
        )
        .append(
            $('<script/>')
                .attr( {
                    type : 'application/javascript',
                    src : 'http://www.datatables.net/release-datatables/media/js/jquery.dataTables.js',
                } )
                .bind( 'load', buildui )
        )

    $(document.documentElement)
        .bind( 'mimis.load', buildui )
} )
