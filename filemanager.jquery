$( function() {
    var uiBuilt = false
    function buildui() {
        var $content = $('<div/>')
                .css( {
                    overflow : 'auto',
                    width : '100%',
                    height : '100%',
                } )

        // Wait until all libraries are loaded
        if( $content.splitter == undefined
            || $content.dataTable == undefined
            || $.jstree == undefined
            || mimis.list == undefined
            || uiBuilt ) {
            return
        }
        uiBuilt = true

        //console.log( mimis.get( 'local.hostname' ) )

        var $tree = $('<div/>')
        var $listing = $('<div/>')

        var $table = $('<table/>')
            .attr( {
                id : 'datatable',
            } )
            .css( {
                width : '100%',
            } )

        $content
            .append( $tree )
            .append( $listing.append( $table ) )
        $('body').append( $content )

        var tableCols = {
            file : [
                {
                    sWidth : '1.5em',
                    sClass : 'icon',
                    fnRender : function( obj ) {
                        /*
                        return ( '<object class="image/svg+xml" '
                                 + ( 'data=".../mime/type/'
                                     + obj.aData[ obj.iDataColumn ]
                                     + '/icon/svg"/>' ) )
                        */
                        return ( '<ins class="icon" '
                                 + 'type="' + obj.aData[ obj.iDataColumn ] + '"/>' )
                    },
                },
                {
                    sTitle : 'Name',
                    sWidth : 'auto',
                },
                {
                    sTitle : 'Date Modified',
                    sType : 'date',
                    fnRender : function( obj ) {
                        var date = obj.aData[ obj.iDataColumn ]
                        date = new Date( date )
                        return date.toDateString()
                    },
                    sWidth : 'auto',
                },
                {
                    sTitle : 'Type',
                    sWidth : 'auto',
                },
                {
                    sTitle : 'Size',
                    sClass : 'center',
                    sWidth : 'auto',
                    bUseRendered : false,
                    fnRender : function( obj ) {
                        var size = obj.aData[ obj.iDataColumn ]
                        
                        // From: http://snipplr.com/view/5945/javascript-numberformat--ported-from-php/
                        function number_format( number, decimals, dec_point, thousands_sep ) {
                            var n = number
                            var c = isNaN( decimals = Math.abs( decimals ) ) ? 2 : decimals
                            var d = dec_point == undefined ? '.' : dec_point
                            var t = thousands_sep == undefined ? ',' : thousands_sep
                            var s = n < 0 ? '-' : '';
                            var i = parseInt( n = Math.abs(+n || 0).toFixed( c ) ) + ''
                            var j = ( j = i.length ) > 3 ? j % 3 : 0
                            
                            return ( s + ( j ? i.substr( 0, j ) + t : '')
                                     + i.substr( j ).replace( /(\d{3})(?=\d)/g, '$1' + t )
                                     + (c ? d + Math.abs( n - i ).toFixed( c ).slice( 2 ) : '' ) )
                        }
                        
                        var gb = Math.pow( 2, 30 )
                        var mb = Math.pow( 2, 20 )
                        var kb = Math.pow( 2, 10 )
                        if( size >= gb )  {
                            size = number_format( size / gb ) + ' GB';
                        } else if( size >= mb ) {
                            size = number_format( size / mb ) + ' MB';
                        } else if( size >= kb ) {
                            size = number_format( size / kb, 0 ) + ' KB';
                        } else {
                            size = number_format( size, 0 ) + ' B';
                        }
                        return size
                    }
                }
            ],
            xmpp : [
                {
                    sTitle : 'Name',
                    sWidth : 'auto',
                },
                {
                    sTitle : 'Online',
                    sWidth : 'auto',
                },
                {
                    sTitle : 'Connected',
                    sWidth : 'auto',
                },
            ],
        }

        var sep = mimis.get( 'file.separator' )

        // Add an element to a path adding a separator if necessary
        function addPath( path, ext ) {
            if( ! path.match( /:$/ )
                && ! path.match( new RegExp( ( sep == '\\' ? '\\\\' : sep ) + '$' ) ) ) {
                path += sep
            }
            path += ext
            return path
        }

        $( '#datatable tr' ).live( 'dblclick', function() {
            var $row = $(this)
            var path = $table.data( 'path' )
            // ToDo: Handle quotes in filenames
            $tree.jstree( 'open_node', '[path="' + path + '"]' )
            path = addPath( path, $row.children().eq( 1 ).text() )
            mimis.trigger( 'path.selected', [ path ] )
        } )

        mimis.bind(
            'path.selected',
            function( event, path ) {
                mimis.list( path,
                            function( list ) {
                                $('#login').hide()
                                $('#datatable_wrapper').show()
                                if( path.match( /^file:/ ) ) {
                                    var table = []
                                    $(list).each( function( idx, elem ) {
                                        table.push( [
                                            elem.type,
                                            elem.name,
                                            elem.modified,
                                            elem.type,
                                            elem.size
                                        ] )
                                    } )
                                    $table
                                        .dataTable( {
                                            aaData : table,
                                            aaSorting : [[ 2, 'desc' ]],
                                            aoColumns : tableCols.file,
                                            bJQueryUI : true,
                                            bFilter : false, // Disable searching
                                            bPaginate : false, // Disable pagination
                                            bDestroy : true, // Rebuild
                                        } )
                                        .data( {
                                            path : path,
                                        } )
                                } else if( path.match( /^xmpp:/ ) ) {
                                    console.log( list )
                                    var table = []
                                    $(list).each( function( idx, elem ) {
                                        table.push( [
                                            elem.name,
                                            elem.online,
                                            elem.connected
                                        ] )
                                    } )
                                    $table
                                        .dataTable( {
                                            aaData : table,
                                            aaSorting : [[ 3, 'desc' ]],
                                            aoColumns : tableCols.xmpp,
                                            bJQueryUI : true,
                                            bFilter : false, // Disable searching
                                            bPaginate : false, // Disable pagination
                                            bDestroy : true, // Rebuild
                                        } )
                                }
                            } )
            } )

        // Called before a jstree element is expanded
        function treedata( obj, callback ) {
            var listing;
            if( obj == -1 ) { // The default
                listing = [
                    {
                        data : 'Local',
                        attr : {
                            id : 'file', //escape( 'file:' ),
                            path : 'file:',
                            title : 'Browse',
                        },
                        children : [ 'placeholder' ],
                    },
                    {
                        data : 'Remote',
                        attr : {
                            id : escape( 'xmpp:' ),
                            path : 'xmpp:',
                            title : 'Connect',
                        },
                        children : [ 'placeholder' ],
                    },
                ]
                callback( listing )
            } else {
                var id = obj.attr( 'id' )
                var path = obj.attr( 'path' )

                console.log( path )
                mimis.list( path,
                            function( list ) {
                                listing = []
                                $(list).each( function( idx, elem ) {
                                    if( elem.type.match( /\/directory$/ ) ) {
                                        listing.push( {
                                            data : elem.name,
                                            attr : {
                                                path : addPath( path, elem.name ),
                                            },
                                            children : [ 'placeholder' ],
                                        } )
                                    }
                                } )
                                callback( listing )
                            } )
            }
        }
        
        // From: http://groups.google.com/group/jquery-dev/browse_thread/thread/86504e9660e893ef
        $.fn.equals = $.fn.equals || function( compareTo ) {
            if( !compareTo
                || !compareTo.length
                || this.length != compareTo.length ) { 
                return false
            }
            for( var i = 0; i < this.length; i++ ) { 
                if( this[i] !== compareTo[i] ) {
                    return false
                }
            }
            return true
        }

        var $lastSelected
        $tree
            .css ( {
                overflow : 'auto',
                width: '15%',
            } )
            .bind( 'open_node.jstree',
                   function( event, data ) {
                       var $selected = data.rslt.obj
                       $tree.jstree( 'refresh', $selected )
                   } )
            .bind( 'select_node.jstree',
                   function( event, data ) {
                       var $selected = data.rslt.obj
                       if( $selected.equals( $lastSelected ) ) {
                           $tree.jstree( 'toggle_node', $selected )
                       }
                       $lastSelected = $selected
                       mimis.trigger( 'path.selected',
                                      [ $selected.attr( 'path' ) ] )
                   } )
            .bind( 'hover_node.jstree',
                   function( event, data ) {
                       var active = data.rslt.obj
                       var display
                       var attrs = [ 'title', 'id', 'path' ]
                       do {
                           // display = active.attr( attrs.dequeue() )
                           display = active.attr( attrs.shift() )
                       } while( ( display == undefined || display == '' )
                                && attrs.length > 0 )
                       attrs = [ 'path' ]
                       while( ( display == undefined || display == '' )
                              && attrs.length > 0 ) {
                           display = active.data( attrs.shift() )
                       }
                       window.status = display
                       event.preventDefault()
                   } )
            .jstree( {
                json_data : {
                    data : treedata,
                },
                'progressive_render' : true,
                'plugins' : [ 'themes', 'json_data', 'ui' ],
            } )

        $listing.css( {
            overflow : 'auto',
        } );

        ( function() {
            var $loginform;
            function getLogin( onsubmit ) {
                //$listing.empty()
                $('#datatable_wrapper').hide()

                if( $loginform == undefined ) {
                    $.get( 'form/login/html',
                           function( data ) {
                               $loginform = $(data)
                               $loginform.bind( 'submit',
                                                function( event ) {
                                                    $loginform.fadeOut()
                                                    event.preventDefault()
                                                    onsubmit( event )
                                                } )
                               $loginform.find( 'input' ).keypress( function( event ) {
                                   if( ( event.which && event.which == 13 )
                                       || ( event.keyCode && event.keyCode == 13 ) ) {
                                       $loginform.trigger( 'submit' )
                                       return false
                                   } else {
                                       return true
                                   }
                               } )

                               // Add classes to theme interface
                               $loginform.find( 'fieldset' )
                                   .addClass( 'ui-widget-content' )
                               $loginform.find( 'input:text, input:password, textarea' )
                                   .addClass( 'ui-state-highlight ui-corner-all' )
                               // Theme buttons
                               $loginform.find( 'button, input:submit, a.button' ).button()
                               
                               // Fix object links by inserting a transparent link
                               $loginform.find( 'a.button object[type="image/svg+xml"]' )
                                   .each( function() {
                                       var $svg = $(this)
                                       var $link = $svg.parents( 'a' )
                                       var $overlay = ( $('<a/>')
                                                        .attr( {
                                                            href : $link.attr( 'href' ),
                                                        } ) )
                                       $link.append( $overlay.append( $link.children() ) )
                                   } )
                               
                               $listing.append( $loginform )
                           } )
                } else {
                    $loginform.fadeIn()
                }
            }
            
            var username;
            var password;
            var server;
            mimis.merge( {
                xmpp : {
                    credentials : function( callback ) {
                        if( username == undefined ) {
                            getLogin( function( event ) {
                                var $loginform = $(event.target)
                                username = $loginform.find( 'input[name="username"]' ).val()
                                password = $loginform.find( 'input[name="password"]' ).val()
                                server = $loginform.find( 'input[name="server"]' ).val()

                                if( ! username.match( /@/ ) ) {
                                    if( server == 'talk.google.com' ) {
                                        username += '@gmail.com'
                                    } else {
                                        username += '@' + server
                                    }
                                }

                                console.log( 'cred:' + username )
                                callback( {
                                    username : username,
                                    password : password,
                                    server : server,
                                } )
                            } )
                        } else {
                            callback( {
                                username : username,
                                password : password,
                                server : server,
                            } )
                        }
                    }
                }
            } )
        } )()

        $content.splitter( {
            type: 'v',
            outline: false,
            sizeLeft: $tree.width(),
            minLeft: 100,
            minRight: 100,
            resizeToWidth: true,
            dock: 'left',
            dockSpeed: 200,
            //cookie: "docksplitter",
            dockKey: 'Z',// Alt-Shift-Z in FF/IE
            accessKey: 'I'// Alt-Shift-I in FF/IE
        } )

        // Added by splitter
        $('.vsplitbar')
            .css( {
                width : '5px',
                'background-color' : '#cab',
            } )
    }
    $('head')
        .append(
            $('<script/>')
                .attr( {
                    type : 'application/javascript',
                    src : 'mimis.jquery',
                } )
                .bind( 'load', buildui )
        )
        .append(
            $('<script/>')
                .attr( {
                    type : 'application/javascript',
                    src : 'http://methvin.com/splitter/splitter.js',
                } )
                .bind( 'load', buildui )
        )
        .append(
            $('<script/>')
                .attr( {
                    type : 'application/javascript',
                    src : '.../lib/jquery-jstree/jquery.jstree.js',
                } )
                .bind( 'load', buildui )
        )
        .append(
            $('<script/>')
                .attr( {
                    type : 'application/javascript',
                    src : 'http://www.datatables.net/release-datatables/media/js/jquery.dataTables.js',
                } )
                .bind( 'load', buildui )
        )
        .append(
            $('<link/>')
                .attr( {
                    rel : 'stylesheet',
                    type : 'text/css',
                    href : 'filemanager.css',
                } )
        )

    $(document.documentElement)
        .bind( 'mimis.load', buildui )
} )
