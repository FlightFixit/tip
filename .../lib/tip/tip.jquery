( function() {
    var tip = {
        load : function( url, callback ) {
            $.ajax( { async : true,
                      dataType: 'script',
                      url: src,
                      beforeSend : function( xhr ) {
                          callback.apply( xhr, [ xhr, 'pre' ] )
                      },
                      error: function( xhr, status, error ) {
                          callback.apply( xhr, [ xhr, status, error ] )
                      },
                      success : function( data, status, xhr ) {
                          callback.apply( xhr, [ xhr, status, data ] )
                      },
                    } )
        },
    }
    window.__defineGetter__( '__', function() { return tip  } )

( function() {
    var store = {
        get : function( key ) {
            var str = localStorage[ key ]
            return JSON.parse( val )
        },
        set : function( key, val ) {
            var str = JSON.stringify( val )
            localStorage[ key ] = str
        },
        let : function( key, val ) {
            if( get( key ) === undefined ) {
                set( key, val )
            }
        },
    }
    if( window.__lookupGetter__( '__' ) === undefined ) {
        window.__defineGetter__( '__', function() {
            return store
        } )
    }
} )()

;

( function( $ ) {
    function load( src ) {
        $.ajax( {
            dataType: 'script',
            url: src,
            error: function( xhr, status, error ) {
                throw error;
            },
            success: function( data, status, xhr ) {
            }
        } )
    }

    var namespaces
    $.__ = window.__
    $.__.$ = function(arg) {
        var root = document.documentElement
        if( namespaces === undefined ) {
            namespaces = {}
            root.attributes.each( function( ) {
                if( match = /^(?:xmlns:?)(.*)/.exec( this.nodeName ) ) {
                    var name = match[1] || ''
                    namespaces[ name ] = this.nodeValue
                }
            })
        }

        // Special case for the document element
        if( arg == '#' ) {
            return $(root)

        // Match a single tag with optional namespace, attributes and content text
        } else if( tagMatch = /<(?:(?:(\w+):)?(\w+))([^>]*)(?:\/>|([^<]*)<\/\1>)/.exec( arg ) ) {
            var ns = tagMatch[1] || ''
            var $elem = $( document.createElementNS( namespaces[ns], tagMatch[2] ) )
            while( attrMatch = /(\w+)\s*=\s*(?:\'([^\']*)\'|\"([^\"]*)\")/g.exec( tagMatch[3] ) ) {
                $elem.attr( attrMatch[1],
                            attrMatch[2]
                              ? attrMatch[2]
                              : attrMatch[3] )
            }
            if( tagMatch[4] ) {
                $elem.text( tagMatch[4] )
            }
            return $elem

        // Match a namespaced tag name
        } else if( nameMatch = /(?:(\w+):)?(\w+)/.exec( arg ) ) {
            return $(document.getElementsByTagNameNS( namespaces[nameMatch[1]], nameMatch[2] ))

        // Otherwise pass on to jQuery
        } else {
            return $.apply( this, arguments )
        }
    }
} )( jQuery )

} )()
