( function( $ ) {
    var libs = {}
    var requests = {}

    var tip = ( {
        load : function( ) {
            var args = Array.prototype.slice.apply( arguments )
            var urn = args.shift()

            // Libraries are functions which are called
            // when the library is instantiated
            var lib = libs[ urn ]

            if( lib === undefined ) {
                // Copies are cached locally (eventually to be
                // managed in a more complex manner)
                var cached = localStorage[ urn ]
                if( cached ) {
                    lib = libs[ urn ] =
                        eval( '(function() { return ' + cached + ' })()' )
                }
            }

            if( lib !== undefined ) {
                return lib.apply( this, args )
            }

            // Otherwise the library is retrieved from the server
            if( requests[ urn ] === undefined ) {
                requests[ urn ] = true
                $.ajax( { async : true,
                          dataType: 'script',
                          url: urn,
                          error: function( xhr, status, error ) {
                              requests[ urn ] = false
                          },
                          success : function( data, status, xhr ) {
                              localStorage[ urn ] = data
                          },
                        } )
            }
        },
        get : function( key ) {
            var str = localStorage[ key ]
            return JSON.parse( val )
        },
        set : function( key, val ) {
            var str = JSON.stringify( val )
            localStorage[ key ] = str
        },
        let : function( key, val ) {
            if( get( key ) === undefined ) {
                set( key, val )
            }
        },
    } )
    ;
    // ToDo: load scene

/*
    [ window, $ ].each( function( global ) {
        global.__defineGetter__( '__', function() { return tip  } )
    } )
*/

    var namespaces

    tip.$ = function(arg) {
        var root = document.documentElement
        if( namespaces === undefined ) {
            namespaces = {}
            root.attributes.each( function( val, name ) {
                if( match = /^(?:xmlns:?)(.*)/.exec( name ) ) {
                    var ns = match[1] || ''
                    namespaces[ ns ] = val
                }
            })
        }

        // Special case for the document element
        if( arg == '#' ) {
            return $( root )

        // Match a single tag with optional namespace, attributes and content text
        } else if( tagMatch = /<(?:(?:(\w+):)?(\w+))([^>]*)(?:\/>|([^<]*)<\/\1>)/.exec( arg ) ) {
            var ns = tagMatch[1] || ''
            var $elem = $( document.createElementNS( namespaces[ns], tagMatch[2] ) )
            while( attrMatch = /(\w+)\s*=\s*(?:\'([^\']*)\'|\"([^\"]*)\")/g.exec( tagMatch[3] ) ) {
                $elem.attr( attrMatch[1],
                            attrMatch[2]
                              ? attrMatch[2]
                              : attrMatch[3] )
            }
            if( tagMatch[4] ) {
                $elem.text( tagMatch[4] )
            }
            return $elem

        // Match a namespaced tag name
        } else if( nameMatch = /(?:(\w+):)?(\w+)/.exec( arg ) ) {
            return $( document.getElementsByTagNameNS( namespaces[ nameMatch[1] ], nameMatch[2] ) )

        // Otherwise pass on to jQuery
        } else {
            return $.apply( this, arguments )
        }
    }
} )( jQuery )
