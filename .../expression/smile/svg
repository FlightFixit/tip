<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<svg xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:cc="http://creativecommons.org/ns#" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:svg="http://www.w3.org/2000/svg" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:sodipodi="http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd" xmlns:inkscape="http://www.inkscape.org/namespaces/inkscape" width="100%" height="100%" id="expression/smile" viewBox="-77.25 -77.25 155 155" version="1.1" inkscape:version="0.47 r22583" sodipodi:docname="smile.svg">
  <metadata id="metadata49">
    <rdf:RDF>
      <cc:Work rdf:about="">
        <dc:format>image/svg+xml</dc:format>
        <dc:type rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
      </cc:Work>
    </rdf:RDF>
  </metadata>
  <sodipodi:namedview pagecolor="#ffffff" bordercolor="#666666" borderopacity="1" objecttolerance="10" gridtolerance="10" guidetolerance="10" inkscape:pageopacity="0" inkscape:pageshadow="2" inkscape:window-width="1280" inkscape:window-height="775" id="namedview47" showgrid="false" inkscape:zoom="2.9744105" inkscape:cx="55.8719" inkscape:cy="90.962607" inkscape:window-x="0" inkscape:window-y="0" inkscape:window-maximized="1" inkscape:current-layer="body" />
  <defs id="defs">
    <style type="text/css" id="style4">
      #face {
        fill : #ffffaf;
        stroke : #060505;
        stroke-width : 1.25;
      }
    </style>
    <script xlink:href=".../lib/jquery/jquery.js" id="script6" type="application/javascript" />
    <script xlink:href=".../lib/tip/Array.each.js" id="script8" type="application/javascript" />
    <script xlink:href=".../lib/tip/List.js" id="script10" type="application/javascript" />
    <script xlink:href=".../lib/tip/__.jquery" id="script12" type="application/javascript" />
  </defs>
  <g id="body">
    <path d="m 77.25,0 a 77.25,77.25 1,1,1 0,-.0001" id="face" />
    <g id="eye" transform="translate(15.633351,0)">
      <path d="m 0.44996178,-51.355486 c 7.44642992,0.0096 10.09379622,42.1748654 -0.631305,42.1787823 -11.18210978,0.00408 -8.99824998,-42.1911683 0.631305,-42.1787823 z" id="right" sodipodi:nodetypes="css" />
      <use x="0" y="0" xlink:href="#right" id="use2871" width="155" height="155" />
    </g>
    <g id="g20" transform="matrix(1.5133735,-1.2678139,1.2678139,1.5133735,-243.95486,5.352585)">
      <path style="fill:black" d="m 75.963582,93.023133 c -3.477534,-4.490851 -5.110438,-9.000617 -5.42501,-14.982831 -0.261968,-4.981024 0.868611,-10.024517 3.083556,-13.756638 0.505391,-0.85155 0.919669,-1.655936 0.920534,-1.787427 8.78e-4,-0.13154 -0.354318,-0.396723 -0.789241,-0.589459 -1.793707,-0.794681 -1.145167,-2.516956 0.770079,-2.044845 1.311743,0.323411 3.668366,2.012529 4.022734,2.883414 0.583524,1.434148 -1.056773,2.273582 -1.974835,1.01066 -0.454333,-0.62494 -0.529746,-0.553112 -1.558604,1.484501 -2.060101,4.0798 -2.979523,8.535652 -2.697638,13.073667 0.852786,13.72813 12.510813,24.116065 26.207715,23.352415 5.372908,-0.29955 11.415028,-2.730179 15.050308,-6.054414 0.91472,-0.836467 0.94884,-0.911633 0.56115,-1.235662 -1.01647,-0.849819 -0.74709,-2.256855 0.43121,-2.25259 1.76901,0.0064 4.03104,4.284269 2.94947,5.577925 -0.54248,0.6488 -1.43198,0.42219 -1.90678,-0.485858 -0.20213,-0.386585 -0.41897,-0.689721 -0.4819,-0.673649 -0.063,0.01607 -0.74486,0.573387 -1.51548,1.238345 -3.57237,3.082843 -8.23935,4.946903 -13.739196,5.487653 -5.423897,0.53333 -9.319516,-0.0915 -13.981246,-2.24127 -2.628877,-1.212541 -8.056804,-5.588937 -9.926802,-8.003826 l -2.4e-5,-1.11e-4 z" id="path4424" sodipodi:nodetypes="cssssssssssssssssssscc" />
    </g>
    <use x="0" y="0" xlink:href="#eye" id="use2875" transform="translate(-31.771002,0)" width="155" height="155" />
  </g>
  <defs id="defs23">
    <script type="application/javascript" id="script25">
        function SplitAttribute( config ) {
            var $root = config.root || $.__.$('#')
            var attr = config.attribute || ( function() {
                throw { message: 'Missing Required Attribute: attribute' }
            } )()
            var strs = $root.attr( attr ).split( ' ' )
            var ids = List.invert( config.ids ) || ( function() {
                throw { message: 'Missing Required List: ids' }
            } )()

            var self = config.self || this

            ids.each( function( val, id ) {
                if( ! strs.empty ) {
                    ids[ id ] = parseFloat( strs.shift() )
                }
            } )
            
            var updatable = true
            var updateʻ = config.update || function() {
                return $root.attr( attr, self.asString )
            }
            var update = function( ʻpdatable ) {
                if( ʻpdatable !== undefined ) updatable = ʻpdatable
                return updatable &amp;&amp; updateʻ.call( self )
            }
            self.update = update

            ids.each( function( val, prop ) {
                self.__defineGetter__( prop, function() {
                    return ids.get( prop )
                } )
                self.__defineSetter__( prop, function( val ) {
                    ids.set( prop, val )
                    return update()
                } )
            } )

            self.__defineGetter__( 'asString', function() {
                return ids.join( ' ' )
            } )
            
            function configure( config ) {
                if( config instanceof Object ) {
                    update( false )
                    ids.each( function( val, id ) {
                        if( config[ id ] !== undefined ) {
                            self[ id ] = config[ id ]
                        }
                    } )
                    return update.call( this, true )
                }
            } 

            self.expose = function( config ) {
                var elem = config.through || ( function() {
                    throw { message: 'Missing Required Object: through' }
                } )() 
                var prop = config.as || ( function() {
                    throw { message: 'Missing Required String: as' }
                } )()
               
                elem.__defineGetter__( prop, function() { return self } )
                elem.__defineSetter__( prop, configure )
            }

            configure( config )
        }
    </script>
    <script type="application/javascript" id="script27">
        ( function() {
            var view = new SplitAttribute( {
                $root : $.__.$( '#' ),
                attribute : 'viewBox',
                ids : [ 'x', 'y', 'width', 'height' ],
            } )
            view.expose( {
                through : this,
                as : 'view',
            } )
        } )()
    </script>
    <script type="application/javascript" id="script29">
        ( function() {
            var win = {
                get width() { return window.innerWidth },
                get height() { return window.innerHeight },
            }
            this.__defineGetter__( 'win', function() { return win } )
            // this.__defineSetter__
        } )()
    </script>
    <script type="application/javascript" id="script31"> 
        ( function( $ ) {
            var Tip = {}
            this.__defineGetter__( 'Tip', function() { return Tip } )
        } )( jQuery )
    </script>
    <script type="application/javascript" id="script33">
        ( function() {
            var $work
            Tip.__defineGetter__( '$work', function() {
                return $work = $work || ( function() {
                    var $work = ( $.__.$( '&lt;g/&gt;' )
                                  .css( 'visibility', 'hidden' )
                                  .attr( 'id', 'work' ) )
                    $.__.$( '#' ).append( $work )
                    return $work
                } )()
            } )
        } )()
    </script>
    <script type="application/javascript" id="script35">
        ( function() {
            var add = {
                $root : function( config ) {
                    var self = config &amp;&amp; config.self || this
                    var $root = config &amp;&amp; config.$root || $.__.$( '&lt;g/&gt;' )
                    self.__defineGetter__( '$root', function() { return $root } )
                    return $root
                },
                id : function( config ) {
                    var self = config &amp;&amp; config.self || this
                    var id 
                    self.__defineGetter__( 'id', function() {
                        id = ( id !== undefined
                               ? id
                               : ( self.$root.attr( 'id' ) !== undefined
                                   ? self.$root.attr( 'id' )
                                   : ( function() {
                                       var id = 't' + time.now
                                       self.id = id
                                       return id
                                   } )() ) )
                        return id
                    } )
                    self.__defineSetter__( 'id', function( id ) {
                        return self.$root.attr( 'id', id )
                    } )
                },
                shape : function( config ) {
                    var self = config &amp;&amp; config.self || this

                    ;[ 'stroke-width' ].each( function( attr ) {
                        self.__defineGetter__( attr, function() {
                            return parseFloat( self.$root.css( attr ) )
                        } )
                        self.__defineSetter__( attr, function( val ) {
                            //$root.css( attr, val )
                            self.$root.get(0).style.setProperty( attr, val, null )
                        } )
                    } )

                    ;[ 'stroke', 'fill' ].each( function( attr ) {
                        self.__defineGetter__( attr, function() {
                            return self.$root.css( attr )
                        } )
                        self.__defineSetter__( attr, function( val ) {
                            self.$root.get(0).style.setProperty( attr, val, null )
                        } )
                    } )

                    self.__defineSetter__( 'clear', function( clear ) {
                        self.stroke = 'none'
                        self.fill = 'none'
                    } )
                },
            }
            Tip.__defineGetter__( 'add', function() { return add } )
        } )()
    </script>
    <script type="application/javascript" id="script37">
        ( function() {
            function configure( config ) {
                for( prop in config ) {
                    if( config.hasOwnProperty( prop ) ) {
                        var next = config[ prop ]
                        var current = this[ prop ]
                        if( next instanceof Object &amp;&amp; current instanceof Object ) {
                            configure.call( current, next )
                        } else {
                            this[ prop ] = next
                        }
                    }
                }
            }
            Tip.configure = configure
        } )()
    </script>
    <script type="application/javascript" id="script39">
        function Container( config ) {
            var args = Array.prototype.slice.call( arguments )
            config = config || ( function() {
                var config = {}
                args.unshift( config )
                return config
            } )()
            var self = config.self || this
            var $root = Tip.add.$root.apply( self, args )
            Tip.add.id.apply( self, args )

            $root.parent().size() == 0 &amp;&amp; Tip.$work.append( $root )

            function update() {
                $root.attr( 'transform',
                            ( 'rotate(' + this.rotation + ')'
                              + 'translate(' + this.x + ',' + this.y + ')'
                              + ' scale(' + this.scale + ')' ) )
            }

            var transform = {
                x: 0,
                y: 0,
                scale: 1,
                rotation : 0,
            }
            update.call( transform )

            var elems = []

            function add( elem ) {
                elems.push( elem )
                $root.append( elem &amp;&amp; elem.$root || elem )
            }
            self.add = add

            function each( f ) {
                elems.each( f )
            }
            self.each = each

            ;[ 'x', 'y', 'scale', 'rotation' ].each( function( attr ) {
                self.__defineGetter__( attr, function() { return transform[ attr ] } )
                self.__defineSetter__( attr, function( val ) {
                    transform[ attr ] = val
                    update.call( transform )
                } )
            } )

            var sizeʻ = {
                internal : {
                    width : view.width,
                    height : view.height,
                },
                external : {
                    width : 1,
                    height : 1,
                },
                
            }
            self.__defineSetter__( 'size', function( size ) {
                size = size || {}
                [ 'internal', 'external' ].each( function( dimension ) {
                    size[ dimension ] = size[ dimension ] || {}
                    [ 'width', 'height' ].each( function( axis ) {
                        if( size[ dimension ].__lookupGetter__( axis ) == undefined
                            &amp;&amp; size[ dimension ][ axis ] == undefined ) {
                            size[ dimension ][ axis ] = sizeʻ[ dimension ][ axis ]
                        }
                        sizeʻ[ dimension ][ axis ] = size[ dimension ][ axis ]
                    } )
                } )
                return self.scale = Math.min( size.external.width * win.width / size.internal.width,
                                              size.external.height * win.height / size.internal.height ) / 2
            } )

            var on = {
                click : function( f ) {
                    self.$root.click( function( event ) {
                        var port = {
                            event : event,
                        }
                        var point
                        ;[ 'x', 'y' ].each( function( axis ) {
                            port.__defineGetter__( axis, function() {
                                return ( point = point || ( function() {
                                    var point = document.documentElement.createSVGPoint()
                                    ;[ 'x', 'y' ].each( function( axisʻ ) {
                                        point[ axisʻ ] = event[ 'client' + axisʻ.toUpperCase() ]
                                    } )
                                    return point.matrixTransform( $root.get(0).getScreenCTM().inverse() )
                                } )() )[ axis ]
                            } )
                        } )
                        f.call( self, port )
                    } )
                },
            }
            self.__defineGetter__( 'on', function() { return on } )

            Tip.configure.apply( self, args )
        }
    </script>
    <script type="application/javascript" id="script41">
        $( function() {
            var orig = {
                width : view.width,
                height : view.height,
            }
/*
            view = {
                x : - win.width / 2,
                y : - win.height / 2,
                width : win.width,
                height : win.height,
            }
*/
            var body = new Container( {
                $root : $( '#body' ),
/*
                size : {
                    internal : {
                        width : orig.width,
                        height : orig.height,
                    },
                    external : {
                        width : .95,
                        height : .95,
                    },
                },
*/
           } )
           body.on.click( function( click ) {
                console.log( click.x + ',' + click.y )
            } )
        } )
    </script>
    <script type="application/javascript" id="script43" />
    <script type="application/javascript" id="script45" />
  </defs>
</svg>
