<?xml version="1.0" encoding="UTF-8"?>
<svg viewBox="-50 -50 100 100" width="100%" height="100%"
     xmlns="http://www.w3.org/2000/svg"
     xmlns:html="http://www.w3.org/1999/xhtml"
     xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Department of Happiness Logo</title>
  <defs>
    <script type='application/javascript' xlink:href='.../lib/jquery/jquery.js'></script>

    <script type="application/javascript" xlink:href=".../lib/tip/Array.each.js"/>
    <script type="application/javascript" xlink:href=".../lib/tip/List.js"/>
    <script type="application/javascript" xlink:href=".../lib/tip/__.jquery"/>
    
    <script type="application/javascript"><![CDATA[
        $( function() {
            var script = {}
            var lists = []
            var list = { idx : 0 }
            $( 'script' ).each( function( idx, scpt ) {
                var $script = $( scpt )
                var base = { type : 'application/javascript' }
                if( $script.attr( 'type' ).substr( 0, base.type.length ) == base.type ) {
                    var classes = $script.attr( 'type' ).substr( base.type.length )
                    if( classes != '' ) {
                        classes = $script.attr( 'type' ).substr( base.type.length + 1 ).split( '+' )
                        
                        var pos = script
                        var idx = 0
                        /*
                        for( var idx = 0; idx < classes.length; idx++ ) {
                            pos[ classes[ idx ] ] = ( pos[ classes[ idx ] ]
                                                      ? pos[ classes[ idx ] ]
                                                      : {} )
                            if( idx < classes.length - 1 ) {
                                pos = pos[ classes[ idx ] ]
                            }
                        }
                        */
                        
                        var cls = { name : classes[ idx ] }

                        var list = pos[ cls.name ] || []
                        var func = eval( '( function() { return ' + $script.text().trim() + '} )()' )
                        list.push( func )

                        if( pos.__lookupGetter__( cls.name ) == undefined ) {
                            var indx = lists.length + 1
                            lists[ indx ] = list

                            pos.__defineGetter__( cls.name, function() {
                                return lists[ indx ]
                            } )
                            pos.__defineSetter__( cls.name, function( val ) {
                                lists[ indx ] = val
                                return lists[ indx ]
                            } )
                        }
                    }
                }
            } )
            $.get( '.../expression/smile.svg',
                   function( xhr ) {
                       //console.log( xhr )
                       var doc = xhr.documentElement
                       $.__.$( '#' ).append( doc )
                       doc.setAttribute( 'width', '40' ) 
                       doc.setAttribute( 'height', '40' ) 
                   }
                 )
            
            var self = this
            script.reload.each( function( func ) {
                func.call( self, {
                    self : self
                } )
            } )
            console.log( self.win )
            script.postload.each( function( func ) {
                func.call( self, {
                    self : self,
                } )
            } )
        } )
    ]]></script>

    <script type="application/javascript" xlink:href=".../lib/tip/SplitAttribute.jquery"/>

    <script type="application/javascript" xlink:href=".../lib/tip/view.js"/>

    <script type="application/javascript+reload"><![CDATA[
        function( config ) {
            config = config !== undefined ? config : {}
            var self = config.self || this
            var win = {
                get width() { return window.innerWidth },
                get height() { return window.innerHeight },
            }
            self.__defineGetter__( 'win', function() { return win } )
            // self.__defineSetter__
        }
    ]]></script>

    <script type="application/javascript" xlink:href=".../lib/tip/scene.js"/>
    <script type="application/javascript"><![CDATA[
    ]]></script>

    <script type="application/javascript"><![CDATA[ 
        ( function( $ ) {
            var Tip = {}
            this.__defineGetter__( 'Tip', function() { return Tip } )
        } )( jQuery )
    ]]></script>

    <script type="application/javascript"><![CDATA[
        ( function() {
            var $work
            Tip.__defineGetter__( '$work', function() {
                return $work = $work || ( function() {
                    var $work = ( $.__.$( '<g/>' )
                                  .css( 'visibility', 'hidden' )
                                  .attr( 'id', 'work' ) )
                    $.__.$( '#' ).append( $work )
                    return $work
                } )()
            } )
        } )()
    ]]></script>

    <script type="application/javascript"><![CDATA[
        ( function() {
            var add = {
                $root : function( config ) {
                    var self = config && config.self || this
                    var $root = config && config.$root || $.__.$( '<g/>' )
                    self.__defineGetter__( '$root', function() { return $root } )
                    return $root
                },
                id : function( config ) {
                    var self = config && config.self || this
                    var id 
                    self.__defineGetter__( 'id', function() {
                        id = ( id !== undefined
                               ? id
                               : ( self.$root.attr( 'id' ) !== undefined
                                   ? self.$root.attr( 'id' )
                                   : ( function() {
                                       var id = 't' + time.now
                                       self.id = id
                                       return id
                                   } )() ) )
                        return id
                    } )
                    self.__defineSetter__( 'id', function( id ) {
                        return self.$root.attr( 'id', id )
                    } )
                },
                shape : function( config ) {
                    var self = config && config.self || this

                    ;[ 'stroke-width' ].each( function( attr ) {
                        self.__defineGetter__( attr, function() {
                            return parseFloat( self.$root.css( attr ) )
                        } )
                        self.__defineSetter__( attr, function( val ) {
                            //$root.css( attr, val )
                            self.$root.get(0).style.setProperty( attr, val, null )
                        } )
                    } )

                    ;[ 'stroke', 'fill' ].each( function( attr ) {
                        self.__defineGetter__( attr, function() {
                            return self.$root.css( attr )
                        } )
                        self.__defineSetter__( attr, function( val ) {
                            self.$root.get(0).style.setProperty( attr, val, null )
                        } )
                    } )

                    self.__defineSetter__( 'clear', function( clear ) {
                        self.stroke = 'none'
                        self.fill = 'none'
                    } )
                },
            }
            Tip.__defineGetter__( 'add', function() { return add } )
        } )()
    ]]></script>

    <script type="application/javascript"><![CDATA[
        ( function() {
            function configure( config ) {
                for( prop in config ) {
                    if( config.hasOwnProperty( prop ) ) {
                        var next = config[ prop ]
                        var current = this[ prop ]
                        if( next instanceof Object && current instanceof Object ) {
                            configure.call( current, next )
                        } else {
                            this[ prop ] = next
                        }
                    }
                }
            }
            Tip.configure = configure
        } )()
    ]]></script>
    
    <script type="application/javascript"><![CDATA[
        function Container( config ) {
            var args = Array.prototype.slice.call( arguments )
            config = config || ( function() {
                var config = {}
                args.unshift( config )
                return config
            } )()
            var self = config.self || this
            var $root = Tip.add.$root.apply( self, args )
            Tip.add.id.apply( self, args )

            Tip.$work.append( $root )

            function update() {
                $root.attr( 'transform',
                            ( 'rotate(' + this.rotation + ')'
                              + 'translate(' + this.x + ',' + this.y + ')'
                              + ' scale(' + this.scale + ')' ) )
            }

            var transform = {
                x: 0,
                y: 0,
                scale: 1,
                rotation : 0,
            }
            update.call( transform )

            var elems = []

            function add( elem ) {
                elems.push( elem )
                $root.append( elem && elem.$root || elem )
            }
            this.add = add

            function each( f ) {
                elems.each( f )
            }
            this.each = each

            ;[ 'x', 'y', 'scale', 'rotation' ].each( function( attr ) {
                self.__defineGetter__( attr, function() { return transform[ attr ] } )
                self.__defineSetter__( attr, function( val ) {
                    transform[ attr ] = val
                    update.call( transform )
                } )
            } )

            this.__defineSetter__( 'size', function( size ) {
                console.log( size )
                self.scale =
                    Math.min( size.external.width * self.win.width / size.internal.width,
                              size.external.height * self.win.height / size.internal.height ) / 2
            } )

            Tip.configure.apply( self, args )
        }
    ]]></script>

    <script type="application/javascript"><![CDATA[
        function Label( text ) {
            var container = new Container

            var $bg = $.__.$( '<rect/>' )
            container.add( $bg )

            var $text = ( $.__.$( '<html:input/>' )
                          .attr( 'class', 'value' )
                          .attr( 'value', text ) )
            var $obj = ( $.__.$( '<foreignObject/>' )
                         .append( $text ) )
            container.add( $obj )
            
            this.__defineGetter__( 'width', function() {
                return ( parseFloat( $text.width() )
                         + parseFloat( $text.css( 'padding-left' ) )
                         + parseFloat( $text.css( 'padding-right' ) )
                         + parseFloat( $text.css( 'border-left-width' ) )
                         + parseFloat( $text.css( 'border-right-width' ) )
                       ) } )
            this.__defineGetter__( 'height', function() {
                return ( parseFloat( $text.height() )
                         + parseFloat( $text.css( 'padding-top' ) )
                         + parseFloat( $text.css( 'padding-bottom' ) )
                         + parseFloat( $text.css( 'border-top-width' ) )
                         + parseFloat( $text.css( 'border-bottom-width' ) )
                       ) } )
            this.__defineSetter__( 'x', container.__lookupSetter__( 'x' ) ) 
            this.__defineGetter__( 'x', container.__lookupGetter__( 'x' ) ) 
            this.__defineSetter__( 'y', container.__lookupSetter__( 'y' ) ) 
            this.__defineGetter__( 'y', container.__lookupGetter__( 'y' ) ) 

            this.__defineGetter__( '$root', container.__lookupGetter__( '$root' ) ) 

            this.__defineGetter__( 'text', function() { return $text.text() } )
            this.__defineSetter__( 'text', function( text ) { $text.text( text ) } )

            this.__defineGetter__( 'background', function() {
                return {
                    set radius( r ) {
                        $bg.attr( 'rx', r )
                        $bg.attr( 'ry', r )
                    }, 
                }
            } )
            this.background.radius = 4

            var size = {
                x: - this.width / 2,
                y: 0,
                width: this.width,
                height: this.height,
            }
            $obj.attr( size )
            $bg.attr( size )

            //Tip.configure.apply( self, args )
        }
    ]]></script>

    <script type="application/javascript"><![CDATA[
        var slide = {
            linear: function( begin, end ) {
                if( end === undefined ) {
                    end = begin
                    begin = undefined
                }
                return function( deltaTime ) {
                    if( begin === undefined ) {
                        begin = this.elem[ this.attr ]
                    }
                    // The transition is rate based rather than percentage based
                    //   in an attempt to prevent jumps when transitions are
                    //   joined unexpectedly.
                    // 
                    this.last = this.last || {}
                    this.last.value = ( this.last.value === undefined
                                        ? this.elem[ this.attr ]
                                        : this.last.value )
                    var scale = this.scale || 1
                    this.last.value += ( scale * ( end - begin ) * deltaTime / this.duration )
                    this.last.value = Math.max( Math.min( begin, end ), this.last.value )
                    this.last.value = Math.min( Math.max( begin, end ), this.last.value )
                    return this.last.value
                }
            },
        }
    ]]></script>

    <script type="application/javascript"><![CDATA[
        function Value( val, id ) {
            var container = new Container
            this.__defineGetter__( '$root', container.__lookupGetter__( '$root' ) ) 
            this.__defineSetter__( 'x', container.__lookupSetter__( 'x' ) ) 
            this.__defineGetter__( 'x', container.__lookupGetter__( 'x' ) ) 
            this.__defineSetter__( 'y', container.__lookupSetter__( 'y' ) ) 
            this.__defineGetter__( 'y', container.__lookupGetter__( 'y' ) ) 

            var hover = {
                start: false,
                duration: .5 * 1000,
            }

            if( typeof val == 'function' ) {
                var id = new Label( id )
                container.add( id )
                this.__defineGetter__( 'width', id.__lookupGetter__( 'width' ) )
                this.__defineGetter__( 'height', id.__lookupGetter__( 'height' ) )

                container.$root.click( val )                
            } else {
                var value = new Label( val )
                var id = new Label( id )
                container.add( value )
                container.add( id )
                this.__defineGetter__( 'width', function() {
                    return Math.max( value.width, id.width )
                } )
                this.__defineGetter__( 'height', function() {
                    return Math.max( value.height, id.height )
                } )
                
                scene.add( {
                    elem: value,
                    attr: 'x',
                    get start() { return hover.start },
                    get scale() { return hover.scale },
                    get duration() { return hover.duration },
                    val: slide.linear( value.x, value.x - value.width / 2 )
                } )
                scene.add( {
                    elem: id,
                    attr: 'x',
                    get start() { return hover.start },
                    get scale() { return hover.scale },
                    get duration() { return hover.duration },
                    val: slide.linear( id.x + id.width / 2 )
                } )
            }
            
            container.$root.hover(
                function() {
                    hover.start = time.now
                    hover.scale = 1
                },
                function() {
                    hover.start = time.now
                    hover.scale = -1
                } )
        }
    ]]></script>

    <script type="application/javascript+reload"><![CDATA[
        function( config ) {
            config = config !== undefined ? config : {}
            var self = config.self || this

            var pad = { top: 5, between: 5, bottom: 5, left: 5, right: 5 }
            var display = {
                JSON: function( config ) {
                    var lines = []
                    var container = new Container
                    config = config || {}
                    var self = config.self || this

                    this.__defineGetter__( '$root', function() { return container.$root } )
                    
                    var list = as.List( config.source )

                    list.each( function( line, id ) {
                        var val = new Value( line, id )
                        container.add( val )
                    } )
                    var y = pad.top
                    container.each( function( line ) {
                        line.y = y
                        y += line.height + pad.between
                    } )
                    y -= pad.between - pad.bottom
                    container.y = - y / 2
                },
            }

            self.__defineGetter__( 'display', function() { return display } )
        }
    ]]></script>

    <script type="application/javascript" xlink:href=".../lib/tip/Circle.js"/>
    <script type="application/javascript"><![CDATA[
    ]]></script>

    <script type="application/javascript"><![CDATA[
        function Text( config ) {
            var args = Array.prototype.slice.call( arguments )
            config = config || ( function() {
                var config = {}
                args.unshift( config )
                return config
            } )()
            var self = config.self || this
            config.$root = ( $.__.$( '<text/>' )
                             .attr( {
                                 x : 0,
                                 y : 0,
                                 'letter-spacing' : '1em',
                             } ) )
            var $root = Tip.add.$root.apply( self, args )
            Tip.add.id.apply( self, args )
            Tip.add.shape.apply( self, args )

            Tip.$work.append( $root )

            var $text = $root

            this.__defineGetter__( 'text', function() { return $text.text() } )
            this.__defineSetter__( 'text', function( text ) { $text.text( text ) } )

            this.__defineSetter__( 'font', function( font ) {
                $root.get(0).style.setProperty( 'font-family', font, null )
            } )

            this.__defineSetter__( 'height', function( height ) {
                height = typeof height == 'number' ? height + 'px' : height
                $root.get(0).style.setProperty( 'font-size', height, null )
            } )

            function align( position ) {
                position = position == 'center' ? 'middle' : position
                return $root.get(0).style.setProperty( 'text-anchor', position, null )
            }
            this.__defineGetter__( 'align', function() { return {
                get center() { return align( 'middle' ) },
                get start() { return align( 'start' ) },
                get end() { return align( 'end' ) },
            } } )
            this.__defineSetter__( 'align', function( alignment ) { return align( alignment ) } )

            var $path = {
                textʻʻ : '',
                get textʻ() { return this.textʻʻ },
                set textʻ( text ) {
                    this.textʻʻ = text
                    this.update()
                    this.display.length = $root.get(0).getBBox().width
                },
                display : { },
                methodʻ : 'align',
                $letters : [],
                text : function( text ) {
                    if( arguments.length == 0 ) {
                        return this.textʻ
                    }
                    if( text === null ) {
                        $letters.each( function( $letter ) {
                            $letter.erase()
                        } )
                    } else {
                        this.textʻ = text
                    }
                },
                update : function() {
                    var self = this
                    var text = self.textʻ
                    var stretch = self.method == 'stretch'
                    var num = { slots : ( stretch ? text.length : 1 ) }
                    while( self.$letters.length < num.slots ) {
                        var $slot = ( $.__.$( '<textPath/>' )
                                      .attr( {
                                          startOffset : '50%',
                                          method : this.method,
                                      } ) )
                        self.path.id !== undefined
                            && $slot.get(0).setAttributeNS( $.__.$.ns[ 'xlink' ], 'xlink:href', self.path.id )
                        $root.append( $slot )
                        self.$letters.push( $slot )
                    }

                    var $box = $.__.$( '<text/>' )
                    Tip.$work.append( $box )
                    var Box = { for : function( str ) {
                        if( str == ' ' ) {
                            var quote = $box.text( '""'.substring( 1 ) ).get(0).getBBox()
                            var quoted = { space : $box.text( '" "' ).get(0).getBBox() }
                            return {
                                x : quote.x, y : quote.y,
                                width : quoted.space.width - 2 * quote.width,
                                height : quoted.space.height - 2,
                            }
                        }
                        return $box.text( str ).get(0).getBBox()
                    } }

                    if( stretch ) {
                        var width = Box.for( text ).width
                        var sum = 0
                        text.each( function( letter, idx ) {
                            var $letter = self.$letters[ idx ]
                            $letter.text( letter )
                            var next = Box.for( letter ).width
                            $letter.attr( 'startOffset', ( ( sum + next / 2 ) / width ) * 100 + '%' )
                            sum += next
                        } )
                    } else if( this.path.id !== undefined ) {
                        var $letter = this.$letters[ 0 ]
                        $letter.text( text )
                    }
                },
                get method() { return this.methodʻ },
                set method( method ) {
                    this.methodʻ = method
                    this.$letters.each( function( $letter ) {
                        $letter.attr( 'method', method )
                    } )
                    this.update()
                    return method
                },
                pathʻ : { },
                get path() { return this.pathʻ },
                set path( path ) {
                    var self = this
                    self.path.id = typeof path == 'string' ? path : '#' + path.id
                    self.$letters.each( function( $letter ) {
                        $letter.get(0).setAttributeNS( $.__.$.ns[ 'xlink' ], 'xlink:href', self.path.id )
                        $root.append( $letter )
                    } )
                    self.update()
                },
            }

            this.__defineSetter__( 'path', function( path ) {
                if( path ) {
                    $path.text( self.text )
                    $root.text( '' )
                    $text = $path
                    $path.path = path
                } else { 
                    $root.text( self.text )
                    $path.text( '' )
                    $text = $root
                }
            } )

            this.__defineSetter__( 'spacing', function( spacing ) { return $path.attr( 'spacing', spacing ) })

            this.__defineGetter__( 'to', function() { return {
                // Ideally, there should be a way to fill the space above the curve
                set path( opt ) { return $path.method = opt },
                get path() { return $path.method },
            } } )
            
            Tip.configure.call( self, config )
        }
    ]]></script>

    <script type="application/javascript"><![CDATA[
        function Point( config ) {
            var args = Array.prototype.slice.call( arguments )
            config = config || ( function() {
                var config = {}
                args.unshift( config )
                return config
            } )()
            var self = config.self || this
            var circle = new Circle

            this.__defineGetter__( '$root', circle.__lookupGetter__( '$root' ) )

            var self = this
            ;[ 'x', 'y' ].each( function( attr ) {
                self.__defineGetter__( attr, circle.center.__lookupGetter__( attr ) )
                self.__defineSetter__( attr, circle.center.__lookupSetter__( attr ) )
            } )

            for( prop in circle ) {
                if( circle.hasOwnProperty( prop ) && prop != 'center' ) {
                    self.__defineGetter__( prop, circle.__lookupGetter__( prop ) )
                    self.__defineSetter__( prop, circle.__lookupGetter__( prop ) )
                }
            }
            self.radius = config.radius || 1

            self.__defineSetter__( 'color', function( color ) {
                return $root.get(0).style.setProperty( 'fill', color, null )
            } )

            Tip.configure.apply( self, args )
        }
        function Tracker( config ) {
            var elem = config.elem || ( function() {
                throw 'Missing Required Argument: elem'
            } ) ()
            this.start = null
            this.end = null

            var point = new Point
            this.__defineGetter__( '$root', function() { return point.$root } )

            this.snap = function() {
                [ 'x', 'y' ].each( function( axis ) {
                    point[ axis ] = elem[ axis ]
                } )
            }

            self.__defineSetter__( 'color', point.__lookupSetter__( 'color' ) )

            if( config instanceof Object ) {
                for( prop in self ) {
                    if( config[ prop ] !== undefined ) {
                        self[ prop ] = config[ prop ]
                    }
                }
            }
        }
    ]]></script>

    <script type="application/javascript"><![CDATA[
        var Degrees = { to : { Radians : function( degrees ) {
            return degrees * ( 2 * Math.PI ) / 360
        } } }
        function Arc( config ) {
            var args = Array.prototype.slice.call( arguments )
            config = config || ( function() {
                var config = {}
                args.shift()
                args.unshift( config )
                return config
            } )()
            var self = config.self || this

            config.$root = $.__.$( '<path/>' )
            var $root = Tip.add.$root.apply( self, args )

            Tip.add.id.apply( self, args )
            Tip.add.shape.apply( self, args )

            var attrs = new List( {
                center : { x : 0, y : 0 },
                radius : 0,
                offset : 0,
                extent : 0,
                positive : { arc : true },
            } )

            var start = {
                get x() { return attrs.center.x },
                get y() { return ( - attrs.center.y ) - attrs.radius },
            }
            self.__defineGetter__( 'start', function() { return start } )

            var end = {
                get x() {
                    return attrs.center.x + attrs.radius * Math.sin( Degrees.to.Radians( attrs.extent ) )
                },
                get y() {
                    return ( - attrs.center.y ) - attrs.radius * Math.cos( Degrees.to.Radians( attrs.extent ) )
                },
            }
            self.__defineGetter__( 'end', function() { return end } )

            function update() {
                var x = { axis : { rotation : 0 } }
                $root.attr( 'd', [
                    'm',
                    start.x, start.y,
                    'A', this.radius, this.radius,
                    x.axis.rotation,
                    Math.abs( this.extent ) >= 180 ? 1 : 0,
                    this.extent > 0 ? 1 : 0,
                    end.x, end.y
                ].join( ' ' ) )
                $root.attr( 'transform', 'rotate(' + ( this.offset + ' '
                                                       + this.center.x + ',' + ( - this.center.y )
                                                       + ')' ) )
            }
            update.call( attrs )
 
            attrs.each( function( val, attr ) {
                self.__defineGetter__( attr, function() {
                    return attrs[ attr ]
                } )
                self.__defineSetter__( attr, function( val ) {
                    attrs[ attr ] = val
                    update.call( attrs )
                    return self[ attr ]
                } )
            } )

            Tip.configure.apply( self, args )
        }
    ]]></script>

    <style id="fonts" type="text/css">
        @font-face {
            font-family: 'Ragg Mopp';
            src: url(".../font/by/Nick Curtis/nicksfonts.com/Ragg Mopp/Ragg Mopp.ttf");
        }
        @font-face {
            font-family: Lionheart;
            src: url(".../font/by/Dan Zadorozny/iconian@aol.com/Lionheart/Lionheart.ttf");
        }
    </style>

    <script type="application/javascript+postload"><![CDATA[
        function( config ) {
            var self = config && config.self || this

            self.view = {
                x : - self.win.width / 2,
                y : - self.win.height / 2,
                width : self.win.width,
                height : self.win.height,
            }

            var canvas = new Container( {
                self : self,
                size : {
                    internal : {
                        width : 100,
                        height : 100,
                    },
                    external : {
                        width : .95,
                        height : .95,
                    },
                },
            } )
            $('#body').append( canvas.$root )
            
            var json = new self.display.JSON( {
                self : self,
                source : {
                    username : 'bob@localhost',
                    password : 'bob\'spass',
                    connect : function() {
                        alert( 'hi' )
                    },
                },
            } )
            //$('#body').append( json.$root )

            var trigger = new Circle
            trigger.id = 'trigger'
            trigger.radius = 10
            $('#body').append( trigger.$root )

            var hover = {
                start: time.now,
                duration: 1000,
            }

            trigger.$root.hover(
                function() {
                    hover.start = time.now
                    hover.scale = 1
                },
                function() {
                    hover.start = time.now
                    hover.scale = -1
                } )

            var border = {
                outer: new Circle,
                inner: new Circle,
            }
            canvas.add( border.outer )
            canvas.add( border.inner )

            var band = new Circle
            canvas.add( band )

            var head = new Container( {
                id : 'head',
            } )
            head.path = new Arc( {
                radius : 80.5,
                clear : true,
            } )
            head.text = new Text( {
                self : self,
                text : 'Department of Happiness',
                font : 'Ragg Mopp',
                path : head.path,
                align : 'center',
                fill : 'white',
                height : 25,
                extent : 210,
                to : { path : 'stretch' },
            } )
            console.log(self)

            canvas.add( head )
            head.add( head.path )
            head.add( head.text )

            var sub = new Container( {
                id : 'sub',
                rotation : 180,
            } )
            sub.path = new Circle( {
                path : true,
                radius : 93,
                positive : { arc : false },
                clear : true,
            } )
            sub.text = new Text( {
                self : self,
                text : 'Totus Custodes',
                path : sub.path,
                font : 'Lionheart',
                align : 'center',
                fill : 'white',
                height : 22,
            } )

            canvas.add( sub )
            sub.add( sub.path )
            sub.add( sub.text )

            ;[
                {
                    elem : head.path,
                    attr : 'offset',
                    val : slide.linear( - head.text.extent / 2 ),
                    get start() { return hover.start + hover.duration },
                },
                {
                    elem : head.path,
                    attr : 'extent',
                    val : slide.linear( head.text.extent ),
                    get start() { return hover.start + hover.duration },
                },
                {
                    elem : border.outer,
                    attr : 'radius',
                    val : slide.linear( 100 )
                },
                {
                    elem : border.inner,
                    attr : 'radius',
                    val : slide.linear( 74 )
                },
                {
                    elem : band,
                    attr : 'radius',
                    val : slide.linear( 87 )
                },
                {
                    elem : band,
                    attr : 'stroke-width',
                    val : slide.linear( 23 )
                },
                {
                    elem : border.outer,
                    attr : 'stroke-width',
                    val : slide.linear( 1 )
                },
                {
                    elem : border.inner,
                    attr : 'stroke-width',
                    val : slide.linear( 1 )
                }
            ].each( function( tixel ) {
                [ 'start', 'scale', 'duration' ].each( function( attr ) {
                    if( tixel.__lookupGetter__( attr ) == undefined && tixel[ attr ] == undefined ) {
                        tixel.__defineGetter__( attr, function() { return hover[ attr ] } )
                    }
                } )
                scene.add( tixel )
            } )
        }
    ]]></script>

    <style type="text/css">
    path { stroke: red; stroke-width: 5 }
    rect { fill: lightblue; stroke: darkgray }
    #trigger { fill: lightblue; stroke: darkgray }
    #log { text-anchor: middle }

input { text-align: center; font-size: 13pt; border: none }
foreignObject { overflow: visible; }
[class~='value'] { background-color: transparent; padding: .25em .5em }
circle, path { fill: none; stroke: black }
text { fill: black }
    </style>
  </defs>
    <g id="body"/>
<!--
    <path id="c" d="m 0,-30 a 30,30 0,0,0 0,60 a 30,30 0,0,0 0,-60" />
    <path id="d" d="m 0,-30 a 30,30 0,0,1 0,60 a 30,30 0,0,0 0,-60" />
    <text><textPath xlink:href="#c">Test</textPath></text>
    <text><textPath xlink:href="#d">Test</textPath></text>
-->
</svg>
