<?xml version="1.0" encoding="UTF-8"?>
<svg viewBox="-50 -50 100 100" width="100%" height="100%"
     xmlns="http://www.w3.org/2000/svg"
     xmlns:html="http://www.w3.org/1999/xhtml"
     xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Department of Happiness Logo</title>
  <defs>
    <script type='application/javascript' xlink:href='.../lib/jquery/jquery.js'></script>

    <script type="application/javascript" xlink:href=".../lib/tip/Array.each.js"/>
    <script type="application/javascript" xlink:href=".../lib/tip/List.js"/>
    <script type="application/javascript" xlink:href=".../lib/tip/__.jquery"/>

    <script type="application/javascript"><![CDATA[
        function Attribute( config ) {
            var $root = config.$root || $.__.$('#')
            var attr = config.attribute || ( function() {
                throw {
                    message: 'Missing Required Attribute: attribute'
                }
            } )()
            var str = $root.attr( attr ).split( ' ' )
            var ids = config.ids instanceof List && config.ids || ( function() {
                throw {
                    message: 'Missing Required List: ids'
                }
            } )()

            ids.__.each( function( val, prop ) {
                ids[ prop ] = parseFloat( str.shift() )
            } )

            var updatable = true

            function update() {
                return ( updatable
                         && ( function() {
                             return $root.attr( attr, viewbox.__.join( ' ' ) )
                         } )() )
            }
            this.update = update

            var self = this
            viewbox.__.each( function( val, prop ) {
                self.__defineGetter__( prop, function() {
                    return viewbox.__.get( prop )
                } )
                self.__defineSetter__( prop, function( val ) {
                    viewbox.__.set( prop, val )
                    return update()
                } )
            } )
            if( arguments.length > 0
                && arguments[ 0 ] instanceof Object ) {
                this.self = arguments[ 0 ]
            }

            this.__defineGetter__( 'self', function() {
                return viewbox.__.join( ' ' )
            } )
            this.__defineSetter__( 'self', function( view ) {
                updatable = false
                viewbox.__.each( function( val, prop ) {
                    if( view[ prop ] !== undefined ) {
                        self[ prop ] = view[ prop ]
                    }
                } )
                updatable = true
                return update()
            } )
        }
    ]]></script>

    <script type="application/javascript"><![CDATA[
        var view = new Attribute( {
            attribute: 'viewBox',
            ids: new List.by.ids( [ 'x', 'y', 'width', 'height' ] ),
        } )
            
        var win = { width: window.innerWidth,
                    height: window.innerHeight, }
        view.self = {
            x: - win.width / 2,
            y: - win.height / 2,
            width: win.width,
            height: win.height,
        }
    ]]></script>

    <script type="application/javascript"><![CDATA[
        var time = {
            get now() { return ( new Date() ).getTime() }
        }

        function Scene() {
            var state = new List( {
                'tixel.capture.frequency.mHz' : .025 * 1000,
                'time.epoch' : time.now,
            } )
            var interval = {
                id: undefined,
            }

            var contents = new List()

            var last = time.now
            function once() {
                var now = time.now
                
                contents.__.each( function( tixel ) {
                    var start = tixel.start || tixel.end - tixel.duration
                    var end = tixel.end || start + tixel.duration
                    if( ( last < start && now >= start )
                        || ( last > end && now <= end )
                        || ( tixel.percent > 0 && tixel.percent < 1 ) ) {
                        var percent = ( now - start ) / tixel.duration
                        tixel.percent = {
                            valueOf: function() { return percent },
                            get raw() { return percent },
                            get capped() { return Math.max( 0, Math.min( 1, percent ) ) },
                        }
                        tixel.elem[ tixel.attr ] = tixel.val.call( tixel, now - last )
                    }
                } )
                last = now
            }

            this.__defineGetter__( 'once', once )

            this.__defineGetter__( 'go', function() {
                if( interval.id === undefined ) {
                    var self = this
                    var freq = state.__.get( 'tixel.capture.frequency.mHz' ) || 100
                    interval.id =
                        setInterval( function() {
                            once.apply( self, arguments )
                        },
                                     freq )
                }
                return this
            } )

            this.__defineGetter__( 'stop', function() {
                if( interval.id !== undefined ) {
                    clearInterval( interval.id )
                    interval.id = undefined
                }
                return this
            } )

            this.__defineGetter__( 'running', function() {
                return interval.id !== undefined
            } )

            this.__defineGetter__( 'pause', function() {
                return this.running ? this.stop : this.go
            } )
            
            this.add = function( tixel ) {
                tixel.speed = tixel.speed || 1
                contents.__.add( tixel )
            }
        }

        var scene = new Scene
        scene.go
    ]]></script>

    <script type="application/javascript"><![CDATA[
        var $work = $.__.$( '<g/>' ).css( 'visibility', 'hidden' )
        $.__.$( '#' ).append( $work )
    ]]></script>

    <script type="application/javascript"><![CDATA[
        function Container() {
            var $root = $.__.$( '<g/>' )
            $work.append( $root )

            var transform = {
                x: 0,
                y: 0,
                scale: 1,
                update: function() {
                    $root.attr( 'transform',
                                     'translate(' + this.x + ',' + this.y + ')'
                                     + ' scale(' + this.scale + ')' )
                },
            }
            transform.update()

            var elems = []

            function add( elem ) {
                elems.push( elem )
                if( elem && elem.$root ) {
                    elem = elem.$root
                }
                $root.append( elem )
            }
            this.add = add

            this.each = function( f ) {
                elems.each( f )
            }

            this.__defineGetter__( '$root', function() { return $root } )
        
            this.__defineGetter__( 'transform', function() { return {
                set x( x ) {
                    transform.x = x
                    transform.update()
                },
                // This assumes transform will not be externally set
                get x() { return transform.x },
                set y( y ) {
                    transform.y = y
                    transform.update()
                },
                get y() { return transform.y },
            } } )

            this.__defineSetter__( 'scale', function( scale ) { 
                transform.scale = scale
                transform.update()
            } )
        }
    ]]></script>

    <script type="application/javascript"><![CDATA[
        function Label( text ) {
            var container = new Container

            var $bg = $.__.$( '<rect/>' )
            container.add( $bg )

            var $text = ( $.__.$( '<html:input/>' )
                          .attr( 'class', 'value' )
                          .attr( 'value', text ) )
            var $obj = ( $.__.$( '<foreignObject/>' )
                         .append( $text ) )
            container.add( $obj )
            
            this.__defineGetter__( 'width', function() {
                return ( parseFloat( $text.width() )
                         + parseFloat( $text.css( 'padding-left' ) )
                         + parseFloat( $text.css( 'padding-right' ) )
                         + parseFloat( $text.css( 'border-left-width' ) )
                         + parseFloat( $text.css( 'border-right-width' ) )
                       ) } )
            this.__defineGetter__( 'height', function() {
                return ( parseFloat( $text.height() )
                         + parseFloat( $text.css( 'padding-top' ) )
                         + parseFloat( $text.css( 'padding-bottom' ) )
                         + parseFloat( $text.css( 'border-top-width' ) )
                         + parseFloat( $text.css( 'border-bottom-width' ) )
                       ) } )
            this.__defineSetter__( 'x', container.transform.__lookupSetter__( 'x' ) ) 
            this.__defineGetter__( 'x', container.transform.__lookupGetter__( 'x' ) ) 
            this.__defineSetter__( 'y', container.transform.__lookupSetter__( 'y' ) ) 
            this.__defineGetter__( 'y', container.transform.__lookupGetter__( 'y' ) ) 

            this.__defineGetter__( '$root', container.__lookupGetter__( '$root' ) ) 

            this.__defineGetter__( 'text', function() { return $text.text() } )
            this.__defineSetter__( 'text', function( text ) { $text.text( text ) } )

            this.__defineGetter__( 'background', function() {
                return {
                    set radius( r ) {
                        $bg.attr( 'rx', r )
                        $bg.attr( 'ry', r )
                    }, 
                }
            } )
            this.background.radius = 4

            var size = {
                x: - this.width / 2,
                y: 0,
                width: this.width,
                height: this.height,
            }
            $obj.attr( size )
            $bg.attr( size )
        }
    ]]></script>

    <script type="application/javascript"><![CDATA[
        var slide = {
            linear: function( begin, end ) {
                if( end === undefined ) {
                    end = begin
                    begin = undefined
                }
                return function( deltaTime ) {
                    if( begin === undefined ) {
                        begin = this.elem[ this.attr ]
                    }
                    // The transition is rate based rather than percentage based
                    //   in an attempt to prevent jumps when transitions are
                    //   joined unexpectedly.
                    // 
                    this.last = this.last || {}
                    this.last.value = ( this.last.value === undefined
                                        ? this.elem[ this.attr ]
                                        : this.last.value )
                    var scale = this.scale || 1
                    this.last.value += ( scale * ( end - begin ) * deltaTime / this.duration )
                    this.last.value = Math.max( Math.min( begin, end ), this.last.value )
                    this.last.value = Math.min( Math.max( begin, end ), this.last.value )
                    return this.last.value
                }
            },
        }
    ]]></script>

    <script type="application/javascript"><![CDATA[
        function Value( val, id ) {
            var container = new Container
            this.__defineGetter__( '$root', container.__lookupGetter__( '$root' ) ) 
            this.__defineSetter__( 'x', container.transform.__lookupSetter__( 'x' ) ) 
            this.__defineGetter__( 'x', container.transform.__lookupGetter__( 'x' ) ) 
            this.__defineSetter__( 'y', container.transform.__lookupSetter__( 'y' ) ) 
            this.__defineGetter__( 'y', container.transform.__lookupGetter__( 'y' ) ) 

            var hover = {
                start: false,
                duration: .5 * 1000,
            }

            if( typeof val == 'function' ) {
                var id = new Label( id )
                container.add( id )
                this.__defineGetter__( 'width', id.__lookupGetter__( 'width' ) )
                this.__defineGetter__( 'height', id.__lookupGetter__( 'height' ) )

                container.$root.click( val )                
            } else {
                var value = new Label( val )
                var id = new Label( id )
                container.add( value )
                container.add( id )
                this.__defineGetter__( 'width', function() {
                    return Math.max( value.width, id.width )
                } )
                this.__defineGetter__( 'height', function() {
                    return Math.max( value.height, id.height )
                } )
                
                scene.add( {
                    elem: value,
                    attr: 'x',
                    get start() { return hover.start },
                    get scale() { return hover.scale },
                    get duration() { return hover.duration },
                    val: slide.linear( value.x, value.x - value.width / 2 )
                } )
                scene.add( {
                    elem: id,
                    attr: 'x',
                    get start() { return hover.start },
                    get scale() { return hover.scale },
                    get duration() { return hover.duration },
                    val: slide.linear( id.x + id.width / 2 )
                } )
            }
            
            container.$root.hover(
                function() {
                    hover.start = time.now
                    hover.scale = 1
                },
                function() {
                    hover.start = time.now
                    hover.scale = -1
                } )
        }
    ]]></script>

    <script type="application/javascript"><![CDATA[
        var pad = { top: 5, between: 5, bottom: 5, left: 5, right: 5 }
        var display = {
            JSON: function( list ) {
                var lines = []
                var container = new Container

                list.__.each( function( line, id ) {
                    var val = new Value( line, id )
                    container.add( val )
                } )
                var y = pad.top
                container.each( function( line ) {
                    line.y = y
                    y += line.height + pad.between
                } )
                y -= pad.between - pad.bottom
                container.transform.y = - y / 2

                return container
            },
        }
    ]]></script>

    <script type="application/javascript"><![CDATA[
        function Circle() {
            var $root = $.__.$( '<circle/>' ).attr( {
                cx: 0,
                cy: 0,
                r: 0,
            } )
            
            var center = {
                get x() { return parseFloat( $root.attr( 'cx' ) ) },
                set x( x ) { return $root.attr( 'cx', x ) },
                get y() { return parseFloat( $root.attr( 'cy' ) ) },
                set y( y ) { return $root.attr( 'cy', y ) },
            }

            var circle = new List( {
                get radius() { return parseFloat( $root.attr( 'r' ) ) },
                set radius( radius ) { $root.attr( 'r', radius ) },
                get center() { return center },
                set center( c ) {
                    if( c.x !== undefined ) {
                        center.x = c.x
                    }
                    if( c.y !== undefined ) {
                        center.y = c.y
                    }
                    return center
                },
            } )

            this.__defineGetter__( '$root', function() { return $root } )

            this.__defineGetter__( 'id', function() {
                return $root.attr( 'id' )
            } )
            this.__defineSetter__( 'id', function( id ) {
                return $root.attr( 'id', id )
            } )
            
            this.__defineGetter__( 'stroke-width', function( strokeWidth ) {
                return parseFloat( $root.css( 'stroke-width' ) )
            } )
            this.__defineSetter__( 'stroke-width', function( strokeWidth ) {
                //$root.css( 'stroke-width', strokeWidth )
                $root.get(0).style.setProperty( 'stroke-width', strokeWidth, null )
            } )
        }
    ]]></script>

    <script type="application/javascript"><![CDATA[
        function Arc() {
            var $root = $.__.$( '<path/>' )
            this.__defineGetter__( '$root', function() { return $root } )
           
            var arc = new List( {
                offset: 0,
                extent: 0,
                radius: 0,
            } )
            var updatable = true
          
            function update() {
                $root.attr( 'd',
                            'm 0,0 t 30 30 30 30' )
                //'a ' + self.self )
            }
            this.update = update
            update()

            var self = this
            arc.__.each( function( val, prop ) {
                self.__defineGetter__( prop, function() {
                    return arc.__.get( prop )
                } )
                self.__defineSetter__( prop, function( val ) {
                    arc.__.set( prop, val )
                    return update()
                } )
            } )
            
            this.__defineGetter__( 'self', function() {
                return arc.__.join( ' ' )
            } )
            this.__defineSetter__( 'self', function( view ) {
                updatable = false
                arc.__.each( function( val, prop ) {
                    if( view[ prop ] !== undefined ) {
                        self[ prop ] = view[ prop ]
                    }
                } )
                updatable = true
                return update()
            } )
            if( arguments.length > 0
                && arguments[ 0 ] instanceof Object ) {
                this.self = arguments[ 0 ]
            }
        }
    ]]></script>

    <script type="application/javascript"><![CDATA[
        $( function() {
            var json = display.JSON( new List( {
                username: 'bob@localhost',
                password: 'bob\'spass',
                connect: function() {
                    alert( 'hi' )
                },
            } ) )
            //$('#body').append( json.$root )

            var trigger = new Circle
            trigger.id = 'trigger'
            trigger.radius = 10
            $('#body').append( trigger.$root )

            var hover = {
                start: time.now,
                duration: 1000,
            }

            trigger.$root.hover(
                function() {
                    hover.start = time.now
                    hover.scale = 1
                },
                function() {
                    hover.start = time.now
                    hover.scale = -1
                } )

            var canvas = new Container
            canvas.scale = Math.min( win.width / 100, win.height / 100 ) / 2 * .95
            $('#body').append( canvas.$root )

            var border = {
                outer: new Circle,
                inner: new Circle,
            }
            canvas.add( border.outer )
            canvas.add( border.inner )

            var band = new Circle
            canvas.add( band )

            var head = {
                text: 'Department of Happiness',
                path: new Circle( {
                    radius: 30,
                    extent: 90,
                    offset: 45,
                } ),
            }
            canvas.add( head.path )
            
            ;[
                {
                    elem: border.outer,
                    attr: 'radius',
                    val: slide.linear( 100 )
                },
                {
                    elem: border.inner,
                    attr: 'radius',
                    val: slide.linear( 74 )
                },
                {
                    elem: band,
                    attr: 'radius',
                    val: slide.linear( 87 )
                },
                {
                    elem: band,
                    attr: 'stroke-width',
                    val: slide.linear( 23 )
                },
                {
                    elem: border.outer,
                    attr: 'stroke-width',
                    val: slide.linear( 1 )
                },
                {
                    elem: border.inner,
                    attr: 'stroke-width',
                    val: slide.linear( 1 )
                }
            ].each( function( tixel ) {
                [ 'start', 'scale', 'duration' ].each( function( attr ) {
                    tixel.__defineGetter__( attr, function() { return hover[ attr ] } )
                } )
                scene.add( tixel )
            } )
        } )
    ]]></script>

    <style type="text/css">
    path { stroke: red; stroke-width: 10 }
    rect { fill: lightblue; stroke: darkgray }
#trigger { fill: lightblue; stroke: darkgray }
    #log { text-anchor: middle }
input { text-align: center; font-size: 13pt; border: none }
foreignObject { overflow: visible; }
[class~='value'] { background-color: transparent; padding: .25em .5em }
circle { fill: none; stroke: black }
    </style>
  </defs>
    <g id="body"/>
</svg>
