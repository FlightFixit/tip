var mimis = mimis || {};

// Adds an object to the default namespace without
// overiding existing variables unless there is a
// direct conflict.
mimis.merge = mimis.merge ? mimis.merge : function( struct ) {
    for( prop in struct ) {
        if( typeof this[prop] == 'object' && this[prop] !== null ) {
            mimis.merge.call( this[prop], struct[prop] )
        } else {
            this[prop] = struct[prop]
        }
    }
    return struct
}

// Mimis may be loaded into other types of
// documents than html, so no specific tag
// name can be used.
//$.trigger( 'mimis.load' )
//$('#').trigger( 'mimis.load' )
mimis.bind = mimis.bind ? mimis.bind : function( name, listener ) {
    $(document.documentElement).bind( 'mimis.' + name, listener )
}

mimis.unbind = mimis.unbind ? mimis.unbind : function( name, listener ) {
    $(document.documentElement).unbind( 'mimis.' + name, listener )
}

mimis.trigger = mimis.trigger ? mimis.trigger : function( name, extra ) {
    $(document.documentElement).trigger( 'mimis.' + name, extra )
}

// Load the applet into the page
$( function() {
    mimis.merge( {
        applet : {
            load : function( config ) {
                var instance = ( $object.get( 0 ).get
                             ? $object.get( 0 )
                             : $applet.get( 0 ) )
                mimis.merge( {
                    applet : {
                        instance : instance,
                        callback : function( id, data ) {
                            console.log( 'callback:' + id )
                            return mimis.applet.instance.callback( id, data )
                        },
                    },
                    list : function( path, callback ) {
                        return mimis.applet.instance.list( path, callback )
                    },
                    get : function( path, callback ) {
                        // ReferenceError: NPMethod called on non-NPObject
                        //return mimis.applet.instance.get.apply( this, arguments )
                        return mimis.applet.instance.get( path, callback )
                    },
                    set : function( path, val ) {
                        return mimis.applet.instance.set.apply( this, arguments )
                    },
                    browser : {
                        get : function( path, callback ) {
                            console.log( 'browser.get:' + path )
                            var obj = window
                            var elems = path.split( '.' )
                            while( elems.length > 0 && obj) {
                                var sub = obj[ elems.shift() ]
                                obj = sub
                            }
                            if( $.isFunction( obj ) ) {
                                obj( callback )
                            } else {
                                callback( obj )
                            }
                            return obj
                        },
                    },
                } )
                mimis.trigger( 'load' )
                console.log( 'applet:load' )
            }
        }
    } )

    var onload = function() { console.log( 'onload' ) }
                
    var agentClass = 'org.dhappy.mimis.CacheAgentApplet';
    var jar = 'target/mimis-0.2.a.jar';
    
    var $applet = ( $('<applet/>')
                    .attr( {
                        code : agentClass,
                        codebase : jar.replace( /[^\/]*$/, '' ),
                        archive : jar.replace( /.*\//, '' ),
                        height : 0,
                        width : 0,
                    } ) )
    var $object = ( $('<object/>')
                    .attr( {
                        classid : 'java:' + agentClass,
                        type : 'application/x-java-applet',
                        codetype : 'application/java',
                        archive : jar,
                        height : 0,
                        width : 0,
                    } )
                    .bind( 'load', onload )
                    .append(
                        $('<param/>').attr( {
                            name : 'archive',
                            value : jar,
                        } )
                    )
                    .append( $applet )
                    .bind( 'load', onload ) )
    
    $('body').append( $object );
} )

