( function() {
    var $current = $('body').children().last()
    var $container, $map, $slider, label

    var geocoder
    var map 

    // A sorted list of active locations
    var opens = ( function() {
        var opens = []
        var concat = opens.concat
        opens.concat = function() {
            return ( concat
                     .apply( opens, arguments )
                     .sort( function( a, b ) {
                         return a.date.open - b.date.open
                     } ) )
        }
        return opens
    } )()

    function buildUI() {
        $container = 
            $('<div/>')
            .css( {
                height : '500px',
                width : '900px',
                margin : 'auto',
            } )
        $map =
            $('<div/>')
            .css( {
                height : '100%',
                'margin-bottom' : '1.5em',
            } )
        $container.append( $map )

        label = {
            date : {
                $start : ( $('<div/>')
                           .css( {
                               float : 'left',
                               'text-align' : 'left',
                           } ) ),
                $end : ( $('<div/>')
                         .css( {
                             float : 'right',
                             'text-align' : 'right',
                         } ) ),
            }
        }
        
        $container.append( $('<div/>')
                           .addClass( 'wrap' )
                           .append( label.date.$start )
                           .append( label.date.$end ) )

        $slider =
            $('<div/>')
            .slider()
        $container.append( $slider )
                           
        $current.after( $container )
    }

    // Places a marker on the map at pos with an optional InfoWindow
    function placeMarker( pos, title, infowin ) {
        pos = new google.maps.LatLng( pos.latitude, pos.longitude )
        var marker = new google.maps.Marker( {
            position : pos,
            map : map,
            title : title,
        } )
        if( infowin ) {
            infowin.isOpen = false
            var opener = infowin.open
            infowin.open = function() {
                opener.apply( this, arguments )
                infowin.isOpen = true
            }
            var closer = infowin.close
            infowin.close = function() {
                closer.apply( this, arguments )
                infowin.isOpen = false
            }
            google.maps.event.addListener( marker, 'click', function() {
                if( !infowin.isOpen ) {
                    infowin.open( map, marker )
                } else {
                    infowin.close()
                }
            } )
            // Has no effect
            google.maps.event.addListener( infowin, 'click', function() {
                infowin.close()
            } )
            $(infowin.getContent()).click( function() {
                infowin.close()
            } )
        }
        return marker
    }

    // Look up address and place a marker
    function markAddress( address, title ) {
        geocoder.geocode( { address : address }, function( results, status ) {
            if( status == google.maps.GeocoderStatus.OK ) {
                var pos = results[0].geometry.location
                pos.__defineGetter__( 'latitude', function() { return pos.lat } )
                pos.__defineGetter__( 'longitude', function() { return pos.long } )
                return placeMarker( pos )
            } else {
                console.log( 'Geocode Failed: ' + status )
            }
        } )
    }

    var service_url = 'http://api.freebase.com/api/service/mqlread'
    function retrieveLocations( mql, oncomplete, callback ) {
        callback = callback || function( data ) {
            var locations = []
            $(data.result[0].locations).each( function( idx, location ) {
                var addr = location[ 'mail:address' ]
                
                locations.push( {
                    name : location.name,
                    pos : location[ 'geo:address' ].geolocation,
                    street : addr.street_address.value,
                    city : addr.citytown.name,
                    state : addr.state_province_region.name,
                    zip : addr.postal_code.name,
                    date : {
                        open : ( function() {
                            var date = new Date( location.opening_date )
                            var toString = date.toString
                            date.toString = function() {
                                return toString.call( this, 'writtenDate' )
                            }
                            return date
                        } )(),
                        close : Date.parse( location.closing_date ),
                    },
                } )
            } )
            arguments.callee.oncomplete.call( this, locations )
        }
        callback.oncomplete = oncomplete

        var query_envelope = { query : mql }
        $.getJSON( service_url + '?callback=?',
                   { query : JSON.stringify( query_envelope ) },
                   callback )
    }
    
    var genBubbles = false // ToDo: add configuration passing
    function addMarkers( locs ) {
        $(locs).each( function( idx, loc ) {
            if( genBubbles ) {
                var $info = $('<div/>').addClass( 'info' )
                $info.append( $('<h1/>').text( loc.name ) )
                var $props
                $info.append( $props = $('<ul/>') )
        
                $props.append( $('<li/>').text( 'Opened: ' + loc.date.open ) )
                if( loc.date.close ) {
                    $props.append( $('<li/>').text( 'Closed: ' + loc.date.close ) )
                }
                
                $props.append( $('<li/>').text( loc.street ) )
                $props.append( $('<li/>').text( loc.city + ', ' + loc.state + ' ' + loc.zip ))
                
                loc.infowin = new google.maps.InfoWindow( {
                    content : $info.get(0),
                } )
            }

            loc.marker = placeMarker( loc.pos, loc.name, loc.infowin )
        } )
        opens = opens.concat( locs )
        configSlider()
    }

    function configSlider() {
        $slider.slider( 'option', 'min', opens[0].date.open.valueOf() )
        label.date.$start.text( opens[0].date.open )
        $slider.slider( 'option', 'max', opens[-1].date.open.valueOf() )
        label.date.$end.text( opens[-1].date.open )
        setDate( new Date(  $slider.slider( 'value' ) ) )
    }

    function setDate( date ) {
        $(opens).each( function( idx, loc ) {
            loc.marker.setVisible( loc.date.open < date )
        } )
    }

    $( function() {
        buildUI()

        $.fx.step[ 'slide' ] = function( fx ) {
            if( ! fx.initialized ) {
                fx.start = $slider.slider( 'value' )
                fx.min = $slider.slider( 'option', 'min' )
                //percent = 
                fx.initialized = true
            }
            $slider.slider( 'value', fx.pos * ( fx.end - fx.min ) )
            //console.log( fx )
        }

        $slider.bind( 'slidechange', function( evt, ui ) {
            setDate( new Date( ui.value ) )
        } )

        $slider.bind( 'dblclick', function( evt ) {
            var end = $slider.slider( 'option', 'max' )
            $slider.animate( { slide : end }, 30000 )
        } )

        var mapOptions = {
            zoom : 4,
            mapTypeId : google.maps.MapTypeId.ROADMAP,
            mapTypeId : google.maps.MapTypeId.TERRAIN,
        }
        map = new google.maps.Map( $map.get(0), mapOptions )
        geocoder = new google.maps.Geocoder()
    
        var address = 'United States'
        geocoder.geocode( { address : address }, function( results, status ) {
            if( status == google.maps.GeocoderStatus.OK ) {
                map.setCenter( results[0].geometry.location, 4, google.maps.MapTypeId.ROADMAP )
            } else {
                console.log( 'Geocode Failed: ' + status )
            }
        } )

        var loc = google.loader.ClientLocation
        placeMarker( loc, 'Current Location' )
        
        var mqlURI = '.../co/Wal-mart/locations/mql'

        $.getJSON( mqlURI,
                   function( data ) {
                       retrieveLocations( data, addMarkers )
                   } )
    } )
} )()
