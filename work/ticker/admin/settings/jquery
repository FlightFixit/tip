// Formats input fields to show a HTML example when not being edited.

$( function() {
    jQuery.expr[':'].focus = jQuery.expr[':'].focus || function( elem ) {
        return elem === document.activeElement && ( elem.type || elem.href )
    }

    var rows = []
    function wrapElem( elem, idx ) {
        var $elem = $(elem).css( { width: '100%' } )
        var $input = $('<div/>').css( { postion: 'relative' } )
            .appendTo( $elem.parent() ).append( $elem )
        var $exe = $('<div/>').css( {
            padding: '2px',
            position: 'absolute',
        } )
        var $row = $('<div/>')
            .css( { height: '1em' } )
            .appendTo( $input.parent() ).append( $input )
            .append( $exe )

        var isInput = true
        var row = {
            get isInput() { return isInput },
            get empty() { return $elem.val() === '' },
            set : {
                get $input() {
                    $exe.hide()
                    $input.show()
                    isInput = true
                    return true
                },
                get $exe() {
                    if( ! isInput ) { return true }
                    
                    var val
                    if( ! $elem.is( ':focus' ) && ( val = $elem.val() ) != '' ) {
                        $exe.html( val )
                        $input.hide()
                        $exe.show() //.fadeIn( 'fast' )
                        isInput = false
                        return true
                    }
                },
            },
        }

        row.set.$exe
        rows.push( row )

        var init = $elem.val()
        var $reset = $('<div/>')
            .addClass( 'reset button' )
            .css( { position: 'absolute', right: '3em' } )
            .text( 'â†º' )
            .hide()
            .click( function() {
                $elem.val( init )
                $reset.toggle( $elem.val() != init )
            } )
        $elem.before( $reset )

        function all$exe() {
            $.each( rows, function( idx, row ) { row.set.$exe } )
        }

        $elem.bind( 'keyup', function() {
            $reset.toggle( $elem.val() != init )
        } )

        $exe.bind( 'mouseover', function() {
            all$exe()
            row.set.$input
        } )
        $input.bind( 'mouseout blur', function() { row.set.$exe } )
        $input.bind( 'focus', all$exe )

        return row
    }

    $('.inputlist input').each( function( idx, elem ) { wrapElem( elem, idx ) } )

    function addNew( val ) {
        var $input = $('<input type="text"/>')
            .attr( {
                //type: 'text', // Occassional error in chrome
                name: 'messages[new][]',
            } )
            .appendTo( $('<div/>').addClass( 'form-item' )
                       .appendTo( $('.inputlist fieldset fieldset') ) )
            .change( function() {
                for( var i = 0; i < rows.length; i++ ) {
                    if( rows[i].empty ) { return }
                }
                addNew()
            } )
        $input.val( val )
        wrapElem( $input )
    }

    if( false && ! $.browser.msie ) {
        $('.inputlist input[name="messages[new][1]"]')
            .attr( { name: 'messages[new][]' } )
            .change( function() {
                for( var i = 0; i < rows.length; i++ ) {
                    if( rows[i].empty ) { return }
                }
                addNew()
            } )
    }
} )
