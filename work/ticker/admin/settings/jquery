// Formats input fields to show a HTML example when not being edited.

$( function() {
    jQuery.expr[':'].focus = jQuery.expr[':'].focus || function( elem ) {
        return elem === document.activeElement && ( elem.type || elem.href )
    }

    var rows = []
    function wrapElem( elem, idx ) {
        var $elem = $(elem).css( { width: '100%' } )
        var $input = $('<div/>').css( { postion: 'relative' } )
            .appendTo( $elem.parent() ).append( $elem )
        var $exe = $('<div/>').css( {
            position: 'absolute'
        } )
        var $row = $('<div/>')
            .addClass( 'input' )
            .css( { height: '1em', position: 'relative' } )
            .appendTo( $input.parent() ).append( $input )
            .append( $exe )

        var isInput = true
        var row = {
            get isInput() { return isInput },
            get empty() { return $elem.val() === '' },
            set : {
                get $input() {
                    $exe.hide()
                    $input.show()
                    isInput = true
                    return true
                },
                get $exe() {
                    if( ! isInput ) { return true }
                    
                    var val
                    if( ! $elem.is( ':focus' ) && ( val = $elem.val() ) != '' ) {
                        $exe.html( val )
                        $input.hide()
                        $exe.show() //.fadeIn( 'fast' )
                        isInput = false
                        return true
                    }
                },
            },
        }

        row.set.$exe
        rows.push( row )

        var init = $elem.val()
        var $revert = $('<button/>')
            .addClass( 'revert button' )
            .attr( { title: 'Revert' } )
            .hide()
            .click( function( evt ) {
                $elem.val( init )
                $revert.toggle( $elem.val() != init )
                evt.preventDefault()
            } )
            .text( '↺' )
        $elem.before( $revert )

	$revert.hide() // Not hidden @ this point
        // DHSI internal pages run jquery 1.2
	$revert.toggle = function( visible ) {
		if( ! visible ) { $revert.hide() }
		else { $revert.show() }
	}

        var $delete = $('<div/>')
            .addClass( 'delete button' )
            .attr( { title: 'Delete' } )
            .text( '✖' )
            .click( function( evt ) {
                row.set.$input
                $elem.val( '' )
                $revert.toggle( $elem.val() != init )
                evt.preventDefault()
            } )
        $row.append( $delete )

        function all$exe() {
            $.each( rows, function( idx, row ) { row.set.$exe } )
        }
        
        $elem.bind( 'keyup', function() {
            //console.log( $elem.val() != init, $elem.val(), init )
            $revert.toggle( $elem.val() != init )
        } )

        $exe.bind( 'mouseover', function() {
            all$exe()
            row.set.$input
        } )
        $input.bind( 'mouseout blur', function() { row.set.$exe } )
        $input.bind( 'focus', all$exe )

        return row
    }

    $('.inputlist input').each( function( idx, elem ) { wrapElem( elem, idx ) } )

    var newCount = 0 // '[]' array passing not ordering correctly in IE
    function addNew( val ) {
        var $input = $('<input type="text"/>')
            .attr( {
                //type: 'text', // Occassional "cannot modify attribute" error in chrome
                name: 'messages[new][' + ++newCount + ']',
            } )
            .appendTo( $('<div/>').addClass( 'form-item' )
                       .appendTo( $('.inputlist fieldset') ) )
            .bind( 'keyup change', checkForBlanks )
        $input.val( val )
        wrapElem( $input )
    }

    function checkForBlanks() {
        for( var i = 0; i < rows.length; i++ ) {
            if( rows[i].empty ) { return }
        }
        addNew()
    } 

    //$('.inputlist input[name="messages[new][]"]').live()
    $('.inputlist input[name="messages[new][]"]')
        .attr( { name : 'messages[new][' + ++newCount + ']' } )
        .bind( 'keyup change', checkForBlanks )

    var $url =
        $('<input/>')
        .attr( { type: 'text', name: 'url' } )
        .keyup( function( evt ) {
            if( evt.which == 27 ) {
                $urlDialog.hide()
            }
            if( evt.which == 13 ) {
                $urlDialog.hide()
                
                var url = $(this).val()
                if( url !== '' ) { // $.get '' returns the current page
                    $.get( url,
                           function( data ) {
                               $(data).find( 'ul' ).children().each( function() {
                                   //addNew( $(this).html() ) // Document is XML & has no innerHTML
                                   
                                   var out = ''
                                   $(this).contents().each( function() {
                                       out += ( new XMLSerializer() ).serializeToString( this )
                                   } )
                                   addNew( out )
                               } )
                           } )
                }
            }
        } )
    var $urlDialog =
        $('<div/>')
        .addClass( 'dialog' )
        .append( $('<div/>').addClass( 'background' ) )
        .append( $url )
        .hide()

    $('body').append( $urlDialog )

/* // No UI & doesn't work in IE
    $('.inputlist').append(
        $('<button/>')
            .addClass( 'load button' )
            .text( '✚ Load <ul>' )
            .click( function( evt ) {
                $urlDialog.show()
                evt.preventDefault()
            } )
    )
*/

    $('body').bind( 'keyup keypress',
                    function( evt ) {
                        if( ( evt.which === 12 && evt.ctrlKey && evt.shiftKey )
                            || ( evt.which === 119 /* F8 */ ) ) {
                            $urlDialog.show()
                            $url.focus()
                        }
                    } )

    var $float = $('<div/>').appendTo( $('.inputlist') )

    $('.inputlist > fieldset > div').each( function( div ) {
        var $div = $(div)
            .prepend(
                $('<button/>')
        /*
                    .addClass( 'reorder button' )
                    .attr( { title: 'Reorder' } )
                    .text( '↕' )
                    .click( function( evt ) { evt.preventDefault() } )
                    .mousedown( function( evt ) {
                        $div.addClass( 'reordering' )
                        row.set.$input
                        $elem.val( '' )
                        $revert.toggle( $elem.val() != init )
                    } )
                    .mouseup( function( evt ) {
                        $div.removeClass( 'reordering' )
                    } )
*/
            )
    } )
} )
