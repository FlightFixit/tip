//!/bin/js

// Symlinks don't work in the jvm
// ToDo: Mirror fs & load from mapping
//load( '.../lib/mimis/js' )

console = typeof console !== 'undefined' ? console :
    {
        log : print,
        debug : print,
        error : print,
    }

//console.log( environment[ 'os.emulator' ] )

;( function() {
    var File = java.io.File

    function toString( file ) {
        var FileInputStream = java.io.FileInputStream
        var Reader = java.io.Reader
        var BufferedReader = java.io.BufferedReader
        var InputStreamReader = java.io.InputStreamReader
        var StringBuffer = java.lang.StringBuffer

        var stream = new FileInputStream( file )
        try {
            var charset =
                java.nio.charset.Charset.availableCharsets().get( 'UTF-8' )
            var reader = new BufferedReader(
                new InputStreamReader( stream, charset )
            )
            var builder = new StringBuffer()
            var buffer = new Array( 8192 )
            var read
            while( ( read = reader.read( buffer, 0, buffer.length ) ) > 0 ) {
                builder.append( buffer, 0, read )
            }
            var ret = builder.toString()
            console.log( '!:' + ret )
            return ret
        } finally {
            stream.close()
        }
    }

    mimis = typeof mimis !== 'undefined' ? mimis : {} 
    mimis.__defineGetter__( 'out', function() {
        var store = File.createTempFile( 'mimis.out.', '.log' )
        var jOut = new java.io.FileOutputStream( store )
        return {
            get stream() {
                return jOut
            },
            toString : function() {
                console.log( store.getName() )
                return toString( store )
            },
        }
    } )

    try {
        var Connection = java.sql.Connection
        //var server = mimis.load( '.../work/ssis/server/mimis' )

        function deref( link ) {
            var out = mimis.out
            runCommand( 'cygpath', '-w', link,
                        { output : out.stream } )
            return out.toString()
        }

        var pth = 'C:\\progra~1\\cygwin\\home\\wholcol1\\...\\hashes\\sha256\\8777a243e10e0825b0693ca200c2a55c03df6f726ddb2347d18c4bde9b2c43ba'
        //console.log( pth )
        //console.log( readFile( pth ) )
        console.log( deref( '.../work/ssis/server/mimis' ) )
        console.log( readFile( deref( '~/.../work/ssis/server/mimis' ) ) )

        return

    var DriverManager = java.sql.DriverManager

    try {
        java.lang.Class.forName( 'com.microsoft.sqlserver.jdbc.SQLServerDriver' ).newInstance()
        console.log( '!' )
        var con =
            DriverManager.getConnection( server.uri, server.user, server.pass )
        if( con != null ) {
            console.log( 'Connected: ' + server.uri )

            var meta = con.getMetaData()
            console.log( 'Driver Information:' )
            console.log( "\tDriver Name:" + meta.getDriverName() )
            console.log( "\tDriver Version:" + meta.getDriverVersion() )
            console.log( 'Database Information:' )
            console.log( "\tDatabase Name: " + meta.getDatabaseProductName() )
            console.log( "\tDatabase Version: " + meta.getDatabaseProductVersion() )

            var cats = meta.getCatalogs()
            console.log( 'Avalilable Catalogs:' )
            while( cats.next() ) {
                console.log( "\tCatalog: "+ cats.getString( 1 ) )
            } 
            cats.close()

            con.close()
        }
    } catch( e ) {
        console.error( 'Error Connecting: ' + e )
    }

    var neo4j = mimis.load( '.../lib/mimis/neo4j/mimis' )
    var db = new neo4j.Database( 'tmp/xls/neo4j/' )

    var tx = db.mk.tx
    try {
        var xls = mimis.load( '.../lib/mimis/xls/rhino' )
        var workbook = new xls.Workbook( 'test.xlsx' )
        var node = { workbook : db.mk.node }
        var rel = { workbook : db.mk.rel( 'workbook' ) }
        db.ref.rel.to( node.workbook, rel.workbook )
        workbook.sheets.each( function( sheet ) {
            node.sheet = db.mk.node
            node.workbook.rel.to( node.sheet, rel.workbook )
            node.workbook.rel.to( node.sheet, db.mk.rel( 'sheet' ) )
            sheet.rows.each( function( row ) {
                node.row = db.mk.node
                node.sheet.rel.to( node.row, rel.workbook )
                node.sheet.rel.to( node.row, db.mk.rel( 'row' ) )
                node.row.prop( 'num', row.num )
                row.cells.each( function( cell ) {
                    node.cell = db.mk.node
                    node.row.rel.to( node.cell, rel.workbook )
                    node.row.rel.to( node.cell, db.mk.rel( 'cell' ) )
                    node.cell.prop( 'val', cell )
                } )
            } )
        } )

        db.ref.traverse( { rel : rel.workbook } )
            .each( function( node ) {
                console.log( node )
            } )
        tx.success
    } finally {
        tx.finish
    }

    db.shutdown
} catch ( ioe ) {
    console.log( ioe )
}

} )()
