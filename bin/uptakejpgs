#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Pull jpeg images into mȉmis structure
"""

import logging
import os, re, sys, glob
import shutil
from PIL import Image
from PIL.ExifTags import TAGS
import getopt

config = {
    'preface' : '.../by/time/',
    'maxpath' : '__/lib/uptake/max',
}

# ToDo: merge config with json.load( '.../lib/uptake/jpeg/json' )

logging.basicConfig( level = logging.INFO )
log = logging.getLogger(__name__)

try:
    optList, args = getopt.getopt( sys.argv[1:], 'q', [ 'dry-run', 'leave-orig' ] )
except getopt.GetoptError:
    log.info( __doc__.strip() )
    log.info( '  --dry-run: make no changes' )
    log.info( '  --leave-orig: maintain original filename' )
    sys.exit(2)

opts = {}
for opt, arg in optList:
    opts[ re.sub( r'^--', '', opt ) ] = arg

isDryRun = ( config.has_key( 'isDryRun' ) and config['isDryRun'] ) or opts.has_key( 'dry-run' )
leaveOrig = ( config.has_key( 'leaveOrig' ) and config['leaveOrig'] ) or opts.has_key( 'leave-orig' )

if not os.path.exists( '...' ):
    log.info( 'Connecting Relative Root: ...' )
    if not isDryRun: os.symlink( '../...', '...' )

max = 1
if os.path.exists( config['maxpath'] ):
    with open( config['maxpath'], 'w' ) as file:
        max = file.read()

timeKey = 'DateTimeOriginal'

for file in args:
    img = Image.open( file )
    info = img._getexif()
    time = None
    for tag, value in info.items():
        decoded = TAGS.get( tag, tag )
        if decoded == timeKey:
            time = value
            break
        
    if time is None:
        log.debug( "Skipping: No '%s' in %s/exif" % ( timeKey, file ) )
        continue

    dir = config['preface'] + re.sub( r'[: ]', '/', time, 0 )
    try:
        if not isDryRun: os.makedirs( dir )
    except OSError as e:
        log.error( str(e) )

    dest = dir + '/jpg'
    
    log.info( 'Renaming: %s ➜ %s' % ( file, dest ) )
    if not isDryRun: shutil.move( file, dest )

    if leaveOrig:
        log.info( 'Maintaining Original: %s ↔ %s' % ( file, dest ) )
        if not isDryRun: os.symlink( dest, file )

    while os.path.lexists( str( max ) ):
        max = max + 1

    log.info( 'Linking: %s ↔ %s' % ( max, dir ) )
    if not isDryRun: os.symlink( dir, str( max ) )
