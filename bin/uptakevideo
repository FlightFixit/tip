#!/usr/bin/env python

import logging
import os, re, glob
import subprocess

config = {
    'preface' : '.../by/time/',
    'maxpath' : '__/lib/uptake/max',
}

logging.basicConfig( level = logging.INFO )
log = logging.getLogger(__name__)

# ToDo: merge with json.load( '.../lib/uptake/jpeg/json' )

if not os.path.exists( "..." ):
    os.symlink( "../...", "..." )

max = 1
if os.path.exists( config['maxpath'] ):
    with open( config['maxpath'], 'w' ) as file:
        max = file.read()

for file in glob.glob( "*" ):
    
    candidateFilter = re.compile( "^(.*).(mpe?g|avi)$", re.IGNORECASE )
    match = candidateFilter.search( file )
    
    if match is None: continue

    command = [ "ffprobe", "-show_format", file ]
    print "Reading Metadata: %s" % ( " ".join( command ) )
    ffprobeOut = subprocess.Popen( command,
                                   stdout=subprocess.PIPE,
                                   stderr=None ).stdout
    for line in ffprobeOut.readlines():
        print line
    ffprobeOut.close()

    continue

    lsdvdout = re.sub("&", "&amp;", lsdvdout)
    lsdvdBuffer = StringIO.StringIO(lsdvdout)
    dvdDoc = xml.dom.minidom.parse(lsdvdBuffer)


    img = Image.open( file )
    info = img._getexif()
    time = None
    for tag, value in info.items():
        decoded = TAGS.get( tag, tag )
        if decoded == "DateTimeOriginal":
            time = value
            break
        
    if time is None: continue

    dir = config['preface'] + re.sub( r"[: ]", "/", time, 0 )
    try:
        os.makedirs( dir )
    except OSError as e:
        print str(e)

    dest = dir + "/jpg"
    
    log.info( "Renaming %s to %s" % ( file, dest ) )
    os.rename( file, dest )
    while os.path.lexists( str( max ) ):
        max = max + 1

    log.info( "Linking %s to %s" % ( max, dir ) )
    os.symlink( dir, str( max ) )

#     dir=".../by/time/$(exif -m "$file" | grep "^Date and Time (original)" | sed -e 's/.*\t//g' -e 's/[: ]/\//g')"
#     mkdir "$dir"
#     new="$dir/jpg"
#     mv "$file" "$new"
#     max=1
#     while [ -e "$max" ]; do
#         max=$(($max+1))
#     done
#     ln -s "$new" $max
# done
