#!/usr/bin/env python

import logging
import os, sys, re, glob
import subprocess
import datetime, dateutil.parser
from datetime import datetime, timedelta

config = {
    'preface' : '.../by/time/',
    'maxpath' : '__/lib/uptake/max',
}

logging.basicConfig( level = logging.INFO )
log = logging.getLogger(__name__)

# ToDo: merge with json.load( '.../lib/uptake/jpeg/json' )

if not os.path.exists( "..." ):
    os.symlink( "../...", "..." )

max = 1
if os.path.exists( config['maxpath'] ):
    with open( config['maxpath'], 'w' ) as file:
        max = file.read()

for file in sys.argv[1:]:
    
    #candidateFilter = re.compile( "^(.*).(mpe?g|avi)$", re.IGNORECASE )
    #match = candidateFilter.search( file )
    
    #if match is None: continue

    command = [ "ffprobe", "-show_format", file ]
    print "Reading Metadata: %s" % ( " ".join( command ) )
    ffprobeOut = subprocess.Popen( command,
                                   stdout=subprocess.PIPE,
                                   stderr=subprocess.PIPE ).stdout
    metadata = {
        "tag" : {}
    }
    for line in ffprobeOut.readlines():
        line = line.strip()
        if line == "[FORMAT]":
            continue
        if line == "[/FORMAT]":
            break
        ( key, val ) = line.split( "=", 1 )

        store = metadata
        if key.startswith( "TAG:" ):
            key = key.replace( "TAG:", "", 1 )
            store = store["tag"]

        if store.has_key( key ):
            raise Error( "Key Collision: " + key )

        store[key] = val

    ctime = (
        dateutil.parser.parse( metadata[ "tag" ][ "creation_time" ] )
        if metadata[ "tag" ].has_key( "creation_time" ) else
        datetime.fromtimestamp( os.path.getmtime( file ) ) )
    len = timedelta( minutes = float( metadata[ "duration" ] ) )
    
    print ( ctime.strftime( "%Y/%m/%d/%H/%M/%S/" ) +
            "+/%02d/%02d/%02d" % ( len.days * 24, len.seconds / 60, len.seconds % 60 ) )
        
    ffprobeOut.close()

    continue

    lsdvdout = re.sub("&", "&amp;", lsdvdout)
    lsdvdBuffer = StringIO.StringIO(lsdvdout)
    dvdDoc = xml.dom.minidom.parse(lsdvdBuffer)


    img = Image.open( file )
    info = img._getexif()
    time = None
    for tag, value in info.items():
        decoded = TAGS.get( tag, tag )
        if decoded == "DateTimeOriginal":
            time = value
            break
        
    if time is None: continue

    dir = config['preface'] + re.sub( r"[: ]", "/", time, 0 )
    try:
        os.makedirs( dir )
    except OSError as e:
        print str(e)

    dest = dir + "/jpg"
    
    log.info( "Renaming %s to %s" % ( file, dest ) )
    os.rename( file, dest )
    while os.path.lexists( str( max ) ):
        max = max + 1

    log.info( "Linking %s to %s" % ( max, dir ) )
    os.symlink( dir, str( max ) )
