<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<svg version="1.1"
     xmlns="http://www.w3.org/2000/svg"
     xmlns:html="http://www.w3.org/1999/xhtml"
     xmlns:xlink="http://www.w3.org/1999/xlink"
     width="100%" height="100%"
     viewBox="-77.25 -77.25 155 155">
  <defs id="defs">
    <style type="text/css">
      #face {
        fill : #ffffaf;
        stroke : #060505;
        stroke-width : 1.25;
      }
    </style>
    <script type="application/javascript" xlink:href=".../lib/jquery/jquery.js"></script>
    <script type="application/javascript" xlink:href=".../lib/tip/Array.each.js"/>
    <script type="application/javascript" xlink:href=".../lib/tip/List.js"/>
    <script type="application/javascript" xlink:href=".../lib/tip/__.jquery"/>

    <script type="application/javascript"><![CDATA[
        $( function() {
            var orig = {
                width : view.width,
                height : view.height,
            }
            view = {
                x : - win.width / 2,
                y : - win.height / 2,
                width : win.width,
                height : win.height,
            }

            var line = new Line( {
                start : {
                    x : view.x,
                    y : view.y + view.height / 2,
                },
                end : {
                    x : view.x + view.width,
                    y : view.y + view.height / 2,
                },
                stroke : 'black',
            } )

            var clip = new Sound( {
                source : 'testing.ogg',
            } )

            var mark = new Line( {
                start : {
                    x : view.x,
                    y : view.y + view.height / 2,
                    marker : {
                        type : 'curve',
                        length : view.height * .025,
                    },
                },
                end : {
                    x : view.x,
                    y : view.y + view.height / 2 + view.height * .1,
                },
                stroke : 'black',
            } )

            var animation = new Animation( {
                start : {
                    elem : clip,
                    event : 'play',
                },
                elem : mark.start,
                attribute : 'x',
                to : view.x + view.width,
                duration : clip.length,
            } )
            
            var body = new Container( {
                $root : ( function() {
                    var $body = $( '#body' )
                    if( $body.size() == 0 ) {
                        $body = $.__.$( '<g id="body"/>' )
                        $.__.$( '#' ).append( $body )
                    }
                    return $body
                } )(),
/*
                size : {
                    internal : {
                        width : orig.width,
                        height : orig.height,
                    },
                    external : {
                        width : .95,
                        height : .95,
                    },
                },
*/
            } )
            $.__.$( '#' ).click( function() {
                clip.pause()
                console.log( clip.position )
            } )
            body.on.click( function( click ) {
                console.log( click.x + ',' + click.y )
            } )

            var scene = new Scene
            var scene = new Scene
            
            //var smile = new SVG( {
            //    source : '.../expression/smile.svg',
            //} )
        } )
    ]]></script>

    <script type="application/javascript"><![CDATA[
    ]]></script>

  </defs>
  <defs>
    <script type="application/javascript"><![CDATA[
        function SplitAttribute( config ) {
            var $root = config.root || $.__.$('#')
            var attribute = config.attribute || ( function() {
                throw { message: 'Missing Required Attribute: attribute' }
            } )()
            var split = {
                attribute : $root.attr( attribute ).split( ' ' ),
            }
            var position = {
                ids : List.invert( config.ids ) || ( function() {
                    throw { message: 'Missing Required List: ids' }
                } )(),
            }

            var self = config.self || this

            position.ids.each( function( val, id ) {
                if( ! split.attribute.empty ) {
                    position.ids[ id ] = parseFloat( split.attribute.shift() )
                }
            } )
            
            var updatable = true
            var update′ = config.update || function() {
                return $root.attr( attribute, self.asString )
            }
            var update = function( ′updatable ) {
                if( ′updatable !== undefined ) updatable = ′updatable
                return updatable && update′.call( self )
            }
            self.update = update

            position.ids.each( function( val, prop ) {
                self.__defineGetter__( prop, function() {
                    return position.ids.get( prop )
                } )
                self.__defineSetter__( prop, function( val ) {
                    position.ids.set( prop, val )
                    return update()
                } )
            } )

            self.__defineGetter__( 'asString', function() {
                return position.ids.join( ' ' )
            } )

            function configure( config ) {
                if( config instanceof Object ) {
                    update( false )
                    position.ids.each( function( val, id ) {
                        if( config[ id ] !== undefined ) {
                            self[ id ] = config[ id ]
                        }
                    } )
                    return update.call( this, true )
                }
            } 

            self.expose = function( config ) {
                var elem = config.through || self
                var prop = config.as || ( function() {
                    throw { message: 'Missing Required String: as' }
                } )()
               
                elem.__defineGetter__( prop, function() { return self } )
                elem.__defineSetter__( prop, configure )
            }
            
            configure( config )
        }
    ]]></script>

    <script type="application/javascript"><![CDATA[
        ( function() {
            var view = new SplitAttribute( {
                $root : $.__.$( '#' ),
                attribute : 'viewBox',
                ids : [ 'x', 'y', 'width', 'height' ],
            } )
            view.expose( {
                through : this,
                as : 'view',
            } )
        } )()
    ]]></script>

    <script type="application/javascript"><![CDATA[
        ( function() {
            var win = {
                get width() { return window.innerWidth },
                get height() { return window.innerHeight },
            }
            this.__defineGetter__( 'win', function() { return win } )
            // this.__defineSetter__
        } )()
    ]]></script>

    <script type="application/javascript"><![CDATA[ 
        ( function( $ ) {
            var Tip = {}
            this.__defineGetter__( 'Tip', function() { return Tip } )
        } )( jQuery )
    ]]></script>

    <script type="application/javascript"><![CDATA[
        ( function() {
            var $work
            Tip.__defineGetter__( '$work', function() {
                return $work = $work || ( function() {
                    var $work = ( $.__.$( '<g/>' )
                                  .css( 'visibility', 'hidden' )
                                  .attr( 'id', 'work' ) )
                    $.__.$( '#' ).append( $work )
                    return $work
                } )()
            } )
        } )()
    ]]></script>

    <script type="application/javascript"><![CDATA[
        ( function() {
            var add = {
                $root : function( config ) {
                    var self = config && config.self || this
                    var $root = config && config.$root || $.__.$( '<g/>' )
                    self.__defineGetter__( '$root', function() { return $root } )
                    return $root
                },
                id : function( config ) {
                    var self = config && config.self || this
                    var id 
                    self.__defineGetter__( 'id', function() {
                        id = ( id !== undefined
                               ? id
                               : ( self.$root.attr( 'id' ) !== undefined
                                   ? self.$root.attr( 'id' )
                                   : ( function() {
                                       var id = 't' + time.now
                                       self.id = id
                                       return id
                                   } )() ) )
                        return id
                    } )
                    self.__defineSetter__( 'id', function( id ) {
                        return self.$root.attr( 'id', id )
                    } )
                },
                shape : function( config ) {
                    var self = config && config.self || this

                    ;[ 'stroke-width' ].each( function( attr ) {
                        self.__defineGetter__( attr, function() {
                            return parseFloat( self.$root.css( attr ) )
                        } )
                        self.__defineSetter__( attr, function( val ) {
                            //$root.css( attr, val )
                            self.$root.get(0).style.setProperty( attr, val, null )
                        } )
                    } )

                    ;[ 'stroke', 'fill' ].each( function( attr ) {
                        self.__defineGetter__( attr, function() {
                            return self.$root.css( attr )
                        } )
                        self.__defineSetter__( attr, function( val ) {
                            self.$root.get(0).style.setProperty( attr, val, null )
                        } )
                    } )

                    self.__defineSetter__( 'clear', function( clear ) {
                        self.stroke = 'none'
                        self.fill = 'none'
                    } )
                },
            }
            Tip.__defineGetter__( 'add', function() { return add } )
        } )()
    ]]></script>

    <script type="application/javascript"><![CDATA[
        ( function() {
            function configure( config ) {
                for( prop in config ) {
                    if( config.hasOwnProperty( prop ) ) {
                        var next = config[ prop ]
                        var current = this[ prop ]
                        if( next instanceof Object && current instanceof Object ) {
                            configure.call( current, next )
                        } else {
                            this[ prop ] = next
                        }
                    }
                }
            }
            Tip.configure = configure
        } )()
    ]]></script>

    <script type="application/javascript"><![CDATA[
        function Container( config ) {
            var args = Array.prototype.slice.call( arguments )
            config = config || ( function() {
                var config = {}
                args.unshift( config )
                return config
            } )()
            var self = config.self || this
            var $root = Tip.add.$root.apply( self, args )
            Tip.add.id.apply( self, args )

            $root.parent().size() == 0 && Tip.$work.append( $root )

            function update() {
                $root.attr( 'transform',
                            ( 'rotate(' + this.rotation + ')'
                              + 'translate(' + this.x + ',' + this.y + ')'
                              + ' scale(' + this.scale + ')' ) )
            }

            var transform = {
                x: 0,
                y: 0,
                scale: 1,
                rotation : 0,
            }
            update.call( transform )

            var elems = []

            function add( elem ) {
                elems.push( elem )
                $root.append( elem && elem.$root || elem )
            }
            self.add = add

            function each( f ) {
                elems.each( f )
            }
            self.each = each

            ;[ 'x', 'y', 'scale', 'rotation' ].each( function( attr ) {
                self.__defineGetter__( attr, function() { return transform[ attr ] } )
                self.__defineSetter__( attr, function( val ) {
                    transform[ attr ] = val
                    update.call( transform )
                } )
            } )

            var size′ = {
                internal : {
                    width : view.width,
                    height : view.height,
                },
                external : {
                    width : 1,
                    height : 1,
                },
                
            }
            self.__defineSetter__( 'size', function( size ) {
                size = size || {}
                [ 'internal', 'external' ].each( function( dimension ) {
                    size[ dimension ] = size[ dimension ] || {}
                    [ 'width', 'height' ].each( function( axis ) {
                        if( size[ dimension ].__lookupGetter__( axis ) == undefined
                            && size[ dimension ][ axis ] == undefined ) {
                            size[ dimension ][ axis ] = size′[ dimension ][ axis ]
                        }
                        size′[ dimension ][ axis ] = size[ dimension ][ axis ]
                    } )
                } )
                return self.scale = Math.min( size.external.width * win.width / size.internal.width,
                                              size.external.height * win.height / size.internal.height ) / 2
            } )

            var on = {
                click : function( f ) {
                    self.$root.click( function( event ) {
                        var port = {
                            event : event,
                        }
                        var point
                        ;[ 'x', 'y' ].each( function( axis ) {
                            port.__defineGetter__( axis, function() {
                                return ( point = point || ( function() {
                                    var point = document.documentElement.createSVGPoint()
                                    ;[ 'x', 'y' ].each( function( axis′ ) {
                                        point[ axis′ ] = event[ 'client' + axis′.toUpperCase() ]
                                    } )
                                    return point.matrixTransform( $root.get(0).getScreenCTM().inverse() )
                                } )() )[ axis ]
                            } )
                        } )
                        f.call( self, port )
                    } )
                },
            }
            self.__defineGetter__( 'on', function() { return on } )

            Tip.configure.apply( self, args )
        }
    ]]></script>

    <script type="application/javascript"><![CDATA[
        function Mixin( config ) {
            var self = config.self || this
            var attribute = config.attribute || ( function() {
                throw 'Required configuration option: "attribute"'
            } )()
            var type = config.type || 'variable'

            switch( type ) {
            case 'style':
                var $elem = config.$elem || ( function() {
                    throw 'Required configuration option: "$elem"'
                } )()
                self.__defineGetter__( attribute, function() { return $elem.css( attribute ) } )
                self.__defineSetter__( attribute, function( value ) {
                    return $elem.get(0).style.setProperty( attribute, value, null )
                } )
                break
            case 'match':
                var $elem = config.$elem || ( function() {
                    throw 'Required configuration option: "$elem"'
                } )()
                var to = config.to ||  ( function() {
                    throw 'Required match option: "to"'
                } )()
                self.__defineGetter__( attribute, self.__lookupGetter__( to ) )
                self.__defineSetter__( attribute, self.__lookupSetter__( to ) )
                break
            case 'position':
            case 'number':
                var get = function() {
                    return parseFloat( $elem.attr( internal ) )
                }
            case 'attribute':
                var internal = attribute.internal || attribute
                var external = attribute.external || attribute

                var get = get || function() { return $elem.attr( internal ) }
                var set = function( val ) {
                    return $elem.attr( internal, val )
                }
                
                var $elem = config.$elem || ( function() {
                    throw 'Required configuration option: "$elem"'
                } )()
                self.__defineGetter__( external, get )
                self.__defineSetter__( external, set )
                break
            case 'property':
                var internal = attribute.internal || attribute
                var external = attribute.external || attribute

                var $elem = config.$elem || ( function() {
                    throw 'Required configuration option: "$elem"'
                } )()

                var get = function() { return $elem.get(0)[ internal ] }
                var set = function( val ) {
                    return $elem.get(0)[ internal ] = val
                }

                self.__defineGetter__( external, get )
                self.__defineSetter__( external, set )
                break
            case 'variable':
                var value = config.value || ( function() {
                    throw 'Required configuration option: "value"'
                } )()
                self.__defineGetter__( attribute, function() {
                    return value
                } )
                self.__defineSetter__( attribute, function( val ) {
                    if( val instanceof Object ) {
                        for( prop in val ) {
                            value[ prop ] = val[ prop ]
                        }
                    } else {
                        value = val
                    }
                } )
                break
            default:
                throw 'Unknown type: ' + type
            }
        }
    ]]></script>

    <script type="application/javascript"><![CDATA[
        function SVG( config ) { 
            config = config || {}
            var $root = config.$root || ( function() {
                //self.__defineGetter__( 'self', function() {} )
                return $.__.$( '#' )
            } )()
            var self = config.self || this

            var svg = ( function label( $elem, store ) {
                var id = $elem.attr( 'id' )
                var store′ = store
                if( id !== undefined ) {
                    store′ = {
                        $elem : $elem,
                    }
                    store.__defineGetter__( id, function() {
                        return store′
                    } )
                }
                var nodeName = $elem.get(0).nodeName
                if( nodeName == 'path' || nodeName == 'g' ) {
                    var border′ = List.by.ids( [ 'top', 'bottom', 'left', 'right' ] )
                    border′.each( function( val, side ) {
                        border′[ side ] = $elem.css( 'border-' + side )
                        border′.on.set[ side ].add( function( val ) {
                            $elem.css( 'border-' + side, val )
                        } )
                    } )
                    store′.__defineGetter__( 'border', function() { return border′ } )

                    [ 'fill', 'stroke' ].each( function( attribute ) {
                        Mixin( {
                            self : store′,
                            attribute : attribute,
                            type : 'style',
                            $elem : $elem,
                        } )
                    } )

                    Mixin( {
                        self : store′,
                        attribute : 'color',
                        type : 'match',
                        to : 'fill',
                        $elem : $elem,
                    } )
                }
                $elem.children().each( function( idx, elem ) {
                    label( $( elem ), store′ )
                } )
                return store
            } )( $root, self )
        }
    ]]></script>

    <script type="application/javascript"><![CDATA[
        function Line( config ) {
            config = config || {}
            var $root = config.$root || $.__.$( '#' )
            var $line = $.__.$( '<line/>' )
            var self = config.self || this
            
            $root.append( $line )

            ;[ 'fill', 'stroke' ].each( function( attribute ) {
                Mixin( {
                    self : self,
                    attribute : attribute,
                    type : 'style',
                    $elem : $line,
                } )
            } )
            
            Mixin( {
                self : self,
                attribute : 'color',
                type : 'match',
                to : 'fill',
                $elem : $line,
            } )

            ;[ 'start', 'end' ].each( function( pos, idx ) {
                var holder = {}
                ;[ 'x', 'y' ].each( function( axis ) {
                    Mixin( {
                        self : holder,
                        attribute : {
                            internal : axis + ( idx + 1 ),
                            external : axis,
                        },
                        type : 'position',
                        $elem : $line,
                    } )
                } )
                Mixin( {
                    self : self,
                    attribute : pos,
                    value : holder,
                } )
            } )

            Tip.configure.apply( self, arguments )
        }
    ]]></script>

    <script type="application/javascript"><![CDATA[
        function Sound( config ) {
            config = config || {}
            var $root = config.$root || $.__.$( '#' )
            var $sound = $.__.$( '<html:audio controls="controls"/>' )
            var $object = ( $.__.$( '<foreignObject/>' )
                            .append( $sound ) )
            var self = config.self || this

            $root.append( $object )
            
            Mixin( {
                self : self,
                attribute : {
                    internal : 'src',
                    external : 'source',
                },
                type : 'attribute',
                $elem : $sound,
            } )

            Mixin( {
                self : self,
                attribute : 'autoplay',
                type : 'attribute',
                $elem : $sound,
            } )

            self.play = function() {
                $sound.get(0).play()
            }
            
            self.pause = function() {
                if( $sound.get(0).paused ) {
                    $sound.get(0).play()
                } else {
                    $sound.get(0).pause()
                }
            }

            Mixin( {
                self : self,
                attribute : {
                    internal : 'currentTime',
                    external : 'position',
                },
                type : 'property',
                $elem : $sound,
            } )

            var on = {
                play : function( f ) {
                    $sound.bind( 'play', function( event ) {
                        f.call( self, event )
                    } )
                },
            }
            Mixin( {
                self : self,
                attribute : 'on',
                value : on,
            } )

            Tip.configure.apply( self, arguments )
        }
    ]]></script>

    <script type="application/javascript"><![CDATA[
        var time = {
            get now() { return ( new Date() ).getTime() }
        }

        function Scene( config ) {
            Scene.prototype.singleton = Scene.prototype.singleton || ( function( self ) {
                var state = new List( {
                    'tixel.capture.frequency.mHz' : .025 * 1000,
                    'time.epoch' : time.now,
                } )
                var interval = {
                    id: undefined,
                }

                var contents = new List
                
                var last = time.now
                function once() {
                    var now = time.now
                
                    contents.each( function( tixel ) {
                        tixel = tixel || {}
                        var start = ( tixel.start === undefined
                                      ? tixel.end - tixel.duration
                                      : tixel.start )
                        var end = ( tixel.end === undefined
                                    ? start + tixel.duration
                                    : tixel.end )
                        if( ( last < start && now >= start )
                            || ( last > end && now <= end )
                            || ( tixel.percent > 0 && tixel.percent < 1 )
                            || ( start === null && end === null )
                            || ( now <= end && start === null )
                            || ( now >= start && end === null ) ) {
                            var percent = ( now - start ) / tixel.duration
                            tixel.percent = {
                                valueOf: function() { return percent },
                                get raw() { return percent },
                                get capped() { return Math.max( 0, Math.min( 1, percent ) ) },
                            }
                            
                            if( tixel.elem && tixel.attr ) {
                                tixel.elem[ tixel.attr ] = tixel.val.call( tixel, now - last )
                            }
                            if( typeof tixel.snap == 'function' ) {
                                tixel.snap.call( tixel )
                            }
                        }
                    } )
                    last = now
                }

                self.once = once
                
                self.go = function() {
                    if( interval.id === undefined ) {
                        var self = this
                        var freq = state.get( 'tixel.capture.frequency.mHz' ) || 100
                        interval.id =
                            setInterval( function() {
                                once.apply( self, arguments )
                            },
                                         freq )
                    }
                    return this
                }
                
                self.stop = function() {
                    if( interval.id !== undefined ) {
                        clearInterval( interval.id )
                        interval.id = undefined
                    }
                    return self
                }

                this.__defineGetter__( 'running', function() {
                    return interval.id !== undefined
                } )

                this.__defineGetter__( 'pause', function() {
                    return this.running ? this.stop : this.go
                } )
            
            this.add = function( tixel ) {
                contents.add( tixel )
            }

            this.__defineGetter__( 'length', function() {
                return contents.length
            } )
        }

        var scene = new Scene
        scene.go
    ]]></script>

    <script type="application/javascript"><![CDATA[
        function Animation( config ) {
            config = config || {}
            var self = config.self || this
            var start = config.start || ( function() {
                throw 'Required configuration option: "start"'
            } )()

            start.elem.on[ start.event ]( function( event ) {
                console.log( start.event )
            } )
/*
                elem : mark.start,
                attribute : 'x',
                to : view.x + view.width,
                duration : clip.length,
            } )
*/

        }
    ]]></script>



  </defs>
</svg>
