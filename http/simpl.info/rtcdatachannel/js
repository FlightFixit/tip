var sendChannel, receiveChannel;

var startButton = document.getElementById("startButton");
var sendButton = document.getElementById("sendButton");
var closeButton = document.getElementById("closeButton");
startButton.disabled = false;
sendButton.disabled = true;
closeButton.disabled = true;
startButton.onclick = createConnection;
sendButton.onclick = sendData;
closeButton.onclick = closeDataChannels;

function trace(text) {
    console.log((performance.now() / 1000).toFixed(3) + ": " + text);
}

function createConnection() {
    var servers = null;
    window.localPeerConnection = new webkitRTCPeerConnection(servers,
                                                             {optional: [{RtpDataChannels: true}]});
    trace('Created local peer connection object localPeerConnection');
    
    try {
        // Reliable Data Channels not yet supported in Chrome
        sendChannel = localPeerConnection.createDataChannel("sendDataChannel",
                                                            {reliable: false});
        trace('Created send data channel');
    } catch (e) {
        alert('Failed to create data channel. ' +
              'You need Chrome M25 or later with RtpDataChannel enabled');
        trace('createDataChannel() failed with exception: ' + e.message);
    }

    function gotLocalCandidate(event) {
        trace('local ice callback');
        if (event.candidate) {
            remotePeerConnection.addIceCandidate(event.candidate);
            trace('Local ICE candidate: \n' + event.candidate.candidate);
        }
    }

    localPeerConnection.onicecandidate = gotLocalCandidate;

    var dataChannelSend = document.getElementById("dataChannelSend")
    var dataChannelReceive = document.getElementById("dataChannelReceive")

    function handleSendChannelStateChange() {
        var readyState = sendChannel.readyState;
        trace('Send channel state is: ' + readyState);
        if (readyState == "open") {
            dataChannelSend.disabled = false;
            dataChannelSend.focus();
            dataChannelSend.placeholder = "";
            sendButton.disabled = false;
            closeButton.disabled = false;
        } else {
            dataChannelSend.disabled = true;
            sendButton.disabled = true;
            closeButton.disabled = true;
        }
    }

    sendChannel.onopen = handleSendChannelStateChange;
    sendChannel.onclose = handleSendChannelStateChange;
    
    window.remotePeerConnection = new webkitRTCPeerConnection(servers,
                                                              {optional: [{RtpDataChannels: true}]});
    trace('Created remote peer connection object remotePeerConnection');
    
    function gotRemoteIceCandidate(event) {
        trace('remote ice callback');
        if (event.candidate) {
            localPeerConnection.addIceCandidate(event.candidate);
            trace('Remote ICE candidate: \n ' + event.candidate.candidate);
        }
    }

    remotePeerConnection.onicecandidate = gotRemoteIceCandidate;

    function gotReceiveChannel(event) {
        trace('Receive Channel Callback');
        receiveChannel = event.channel;
        receiveChannel.onmessage = handleMessage;
        receiveChannel.onopen = handleReceiveChannelStateChange;
        receiveChannel.onclose = handleReceiveChannelStateChange;
    }
    
    remotePeerConnection.ondatachannel = gotReceiveChannel;
    
    function gotLocalDescription(desc) {
        localPeerConnection.setLocalDescription(desc);
        trace('Offer from localPeerConnection \n' + desc.sdp);
        remotePeerConnection.setRemoteDescription(desc);

        console.log( JSON.stringify( desc ) )

        function gotRemoteDescription(desc) {
            remotePeerConnection.setLocalDescription(desc);
            trace('Answer from remotePeerConnection \n' + desc.sdp);
            localPeerConnection.setRemoteDescription(desc);
        }

        remotePeerConnection.createAnswer(gotRemoteDescription);
    }
    
    localPeerConnection.createOffer(gotLocalDescription);

    startButton.disabled = true;
    closeButton.disabled = false;
}

function sendData() {
    var data = document.getElementById("dataChannelSend").value;
    sendChannel.send(data);
    trace('Sent data: ' + data);
}

function closeDataChannels() {
    trace('Closing data channels');
    sendChannel.close();
    trace('Closed data channel with label: ' + sendChannel.label);
    receiveChannel.close();
    trace('Closed data channel with label: ' + receiveChannel.label);
    localPeerConnection.close();
    remotePeerConnection.close();
    localPeerConnection = null;
    remotePeerConnection = null;
    trace('Closed peer connections');
    startButton.disabled = false;
    sendButton.disabled = true;
    closeButton.disabled = true;
    dataChannelSend.value = "";
    dataChannelReceive.value = "";
    dataChannelSend.disabled = true;
    dataChannelSend.placeholder = "Press Start, enter some text, then press Send.";
}

function handleMessage(event) {
    trace('Received message: ' + event.data);
    document.getElementById("dataChannelReceive").value = event.data;
}

function handleReceiveChannelStateChange() {
    var readyState = receiveChannel.readyState;
    trace('Receive channel state is: ' + readyState);
}
