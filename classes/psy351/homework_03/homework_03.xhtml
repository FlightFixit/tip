<?xml version="1.0" encoding="utf-8"?>
<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 plus MathML 2.0//EN"
 "http://www.w3.org/TR/MathML2/dtd/xhtml-math11-f.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:html="http://www.w3.org/1999/xhtml"
      xml:lang="en">
  <head>
    <title>PSY-351: Computational Methods &mdash; Homework #3</title>
    <link rel="stylesheet" type="text/css" href="../../../styles/assignment.css" />
    <!-- <base href="http://odin.himinbi.org/classes/cs360/" /> -->
    <style type="text/css">
      [class~=eqn] { text-align: left; }
      math + math, table + math, math + table, table + table { margin-top: .75em; }
      .data td, .data th { text-align: center; padding: .25em; border: 1px solid; }
      td, th { padding: .25em .5em; border: 1px solid; }
      .ellip td { text-align: center; }
      table { margin: auto; }
      .hl { background-color: #BBB; }
      ol { margin-left: 0em; }
      .answer { margin: 0em; }
      object { height: 400px; width: 100%; }
      .pair { width: 45%; height: auto; border: 1px solid; }
    </style>
    <script src="http://www.google-analytics.com/urchin.js" type="text/javascript"></script>
    <script type="text/javascript">
      _uacct = "UA-939849-1";
      urchinTracker();
    </script>
  </head>
  <body>
    <div id="header">
      <h1>PSY-351: Computational Methods</h1>
      <h2>Homework #3</h2>
      <h2><a href="http://himinbi.org">Will Holcomb</a></h2>
      <h2>Due: 14:10 Wed., 17 September 2008</h2>
    </div>
    <ol>
      <li id="p1">
        <div class="question">
          <p>First, I would like you to explore the behavior of the simple hill climbing algorithm (<a href="SimpleHillClimb.m">SimpleHillClimb.m</a>), simplex (fminsearch in MATLAB), and Hooke-Jeeves (<a href="hook.m">hook.m</a>).</p>
 
          <p>To get started, you will need to download the following MATLAB .m files from the course web site. The links to these files are on the <a href="http://www.psy.vanderbilt.edu/faculty/palmeri/p351-modeling/syllabus.html">online syllabus</a>:</p>
          <ul>
            <li><a href="Question1.m">Question1.m</a></li>
            <li><a href="GridEvaluation.m">GridEvaluation.m</a></li>
            <li><a href="fminsearch_show.m">fminsearch_show.m</a></li>
            <li><a href="SimpleHillClimb.m">SimpleHillClimb.m</a></li>
            <li><a href="hook.m">hook.m</a></li>
            <li><a href="Error1.m">Error1.m</a></li>
            <li><a href="Error2.m">Error2.m</a></li>
            <li><a href="plot_simplex_triangles.m">plot_simplex_triangles.m</a></li>
          </ul>

          <p>Note that I modified the fminsearch (Simplex) algorithm to return the complete search path (simplex_path), creating a file called <a href="fminsearch_show.m">fminsearch_show.m</a>. The standard fminsearch in MATLAB does not have this feature.</p>

          <p>I would like you to explore error surfaces generated by <a href="Error1.m">Error1.m</a> and <a href="Error2.m">Error2.m</a>. Note that these are not error surfaces generated from something like the SSE of observations versus predictions. Instead, these are simply functions that have lots of local minima, and that look really cool in 3D. The purpose of using these functions is to give you a chance to explore how the various hillclimbing algorithms work with a complicated error surface that you would encounter with some real-life models.</p>
          
          <p>The starting point for this problem is <a href="Question1.m">Question1.m</a>. You really should understand every bit of the MATLAB code in <a href="Question1.m">Question1.m</a>. There are a lot of useful plotting and formatting techniques illustrated in this code. And in later assignments, you may be required to generate plots like this yourself.</p>
          
          <p>First, explore the effects of parameter increments using <a href="Error1.m">Error1.m</a>. Set parInit = [1 -2]. Now run it using parInc = [0.1 0.1].</p>
        </div>

        <div class="answer">
          <object type="image/svg+xml" class="pair" data="Error1_1.0,-2.0-0.1,0.1-r4.0.2d.svg"></object>
          <object type="image/svg+xml" class="pair" data="Error1_1.0,-2.0-0.1,0.1-r4.0.3d.svg"></object>
        </div>

        <div class="question">
          <p>How does this compare to parInc = [0.2 0.2]?</p>
        </div>

        <div class="answer">
          <object type="image/svg+xml" class="pair" data="Error1_1.0,-2.0-0.2,0.2-r4.0.2d.svg"></object>
          <object type="image/svg+xml" class="pair" data="Error1_1.0,-2.0-0.2,0.2-r4.0.3d.svg"></object>
        </div>

        <div class="question">
          <p>Does SimpleHillClimb end up at the same minimum for both increments?</p>
        </div>

       <div class="answer">
         <p>No.</p>
       </div>

        <div class="question">
          <p>Why not?</p>
        </div>

       <div class="answer">
         <p>I don't understand why. Maybe there's a trough I can't see and the larger increment value is keeping the algorithm from staying in it.</p>
       </div>

        <div class="question">
          <p>Do the three search algorithms end up in the same minima as each other?</p>
        </div>

       <div class="answer">
         <p>With the step size of 0.1, the simple hill climbing and simplex algorithms find the same local minima. Hook and Jeeves finds a lower minima.</p>
       </div>

        <div class="question">
          <p>Try making the RangeLimit larger and see what happens to the searches.</p>
        </div>

       <div class="answer">
         <object type="image/svg+xml" class="pair" data="Error1_-2.0,0.0-0.1,0.1-r10.0.2d.svg"></object>
         <!-- <object type="image/svg+xml" class="pair" data="Error1_-2.0,0.0-0.1,0.1-r10.0.3d.svg"></object> -->

         <p>They take a whole lot more time when the range is pushed to 10. The simplex search will now fail to find a minima instead floundering on the plane surrounding the minima.</p>
       </div>

        <div class="question">
          <p>Next, explore the effect of initial parameters. Set parInc = [0.1 0.1]. Run it using parInit = [-2 0]</p>
        </div>

       <div class="answer">
          <object type="image/svg+xml" class="pair" data="Error1_-2.0,0.0-0.1,0.1-r4.0.2d.svg"></object>
          <object type="image/svg+xml" class="pair" data="Error1_-2.0,0.0-0.1,0.1-r4.0.3d.svg"></object>
       </div>

        <div class="question">
          <p>Versus parInit = [-2 0.5].</p>
        </div>

       <div class="answer">
          <object type="image/svg+xml" class="pair" data="Error1_-2.0,0.5-0.1,0.1-r4.0.2d.svg"></object>
          <object type="image/svg+xml" class="pair" data="Error1_-2.0,0.5-0.1,0.1-r4.0.3d.svg"></object>
       </div>

        <div class="question">
          <p>Do SimpleHillClimb and fminsearch and hook end up at the same minimum for both initial positions?</p>
        </div>

       <div class="answer">
         <p>No, simple hill climb finds a local minima when the starting point is (-2,0) and a deeper minima starting at (-2,0.5).</p>
       </div>

        <div class="question">
          <p>Do they end up in the same minimum as each other? Do they find one of the three local minima of the function or do they get stuck?</p>
        </div>
          
       <div class="answer">
        <p></p>
       </div>

        <div class="question">
          <p>Now try Error2.m. Run this error function using three different initial values, all with parInc = [0.1 0.1]: parInit = [0 -1.5]</p>
        </div>

       <div class="answer">
          <object type="image/svg+xml" class="pair" data="Error2_0.0,-1.5-0.1,0.1-r4.0.2d.svg"></object>
          <object type="image/svg+xml" class="pair" data="Error2_0.0,-1.5-0.1,0.1-r4.0.3d.svg"></object>
       </div>

        <div class="question">
          <p>parInit = [0 -1.6]</p>
        </div>

       <div class="answer">
          <object type="image/svg+xml" class="pair" data="Error2_0.0,-1.6-0.1,0.1-r4.0.2d.svg"></object>
          <object type="image/svg+xml" class="pair" data="Error2_0.0,-1.6-0.1,0.1-r4.0.3d.svg"></object>
       </div>

        <div class="question">
          <p>parInit = [1.6 -1.6]</p>
        </div>

       <div class="answer">
          <object type="image/svg+xml" class="pair" data="Error2_1.6,-1.6-0.1,0.1-r4.0.2d.svg"></object>
          <object type="image/svg+xml" class="pair" data="Error2_1.6,-1.6-0.1,0.1-r4.0.3d.svg"></object>
       </div>

        <div class="question">
          <p>Do SimpleHillClimb and fminsearch and hook end up at the same minimum for all initial positions?</p>
        </div>

       <div class="answer">
        <p>No.</p>
       </div>

        <div class="question">
          <p>Do they end up in the same minimum as each other?</p>
        </div>

       <div class="answer">
        <p>No.</p>
       </div>

        <div class="question">
          <p>Do they find one of the two local minima of the function or do they get stuck on a boundary of the allowed space?</p>
        </div>

        <div class="answer">
          <p>The behavior of the algorithms varies depending on the starting point. See the figures above for a clearer description of the outcomes.</p>
        </div>
       
        <div class="question">
          <p>Why do you think SimpleHillClimb sometimes get stuck at points where there is clearly a "downhill" slope? You may want to look at the SimpleHillClimb code.</p>
        </div>

        <div class="answer">
          <p>Worked with the code and am simply not seeing the basis for the error. It seems like an improvement should always be found though an additive improvement could cause the omission of a better subtractive improvement, I do not see why it should get stuck.</p>
        </div>
      </li>
      <li>
        <div class="question">
          <p>Now, I would like you to use fminsearch or hook to fit the GCM to some real experimental data. To get you started, I have given you the code I used for fitting the GCM to the Medin and Schaffer (1978) category structure. This code uses the routines that I generated for Homework #2, but you are certainly free to use your own code of course. You can download the following files to get you started:</p>
          <ul>
            <li><a href="ms.m">ms.m</a></li>
            <li><a href="mygcm.m ">mygcm.m</a></li>
          </ul>
 
          <p>For this assignment, you will be fitting some data from Nosofsky (1986).</p>
 
          <p>In this experiment, subjects learned to categorize objects that varied along two dimensions, with four values along each dimension. Just for illustrative purposes, let’s assume the stimulus space I used in examples earlier in the course:</p>

          <object type="image/svg+xml" data="object_space.svg"></object>
          <object type="image/svg+xml" data="object_enumeration.svg"></object>

          <p>The thick dotted lines are Category A training examples. The thin solid lines are Category B training examples. The rest are test items. The right panel is a guide to the stimulus numbers used in the accompanying tables.</p>
 
          <p>Here is the data from this condition of Nosofsky (1986). Note that the data is the probability that each of the 16 stimuli as members of Category A.</p>

          <table class="data">
            <tr><th>Stimulus</th><th>P(A|i)</th></tr>
            <tr><td>1</td><td>0.97</td></tr>
            <tr><td>2</td><td>0.98</td></tr>
            <tr><td>3</td><td>0.96</td></tr>
            <tr><td>4</td><td>0.96</td></tr>
            <tr><td>5</td><td>0.85</td></tr>
            <tr><td>6</td><td>0.81</td></tr>
            <tr><td>7</td><td>0.73</td></tr>
            <tr><td>8</td><td>0.76</td></tr>
            <tr><td>9</td><td>0.33</td></tr>
            <tr><td>10</td><td>0.43</td></tr>
            <tr><td>11</td><td>0.30</td></tr>
            <tr><td>12</td><td>0.25</td></tr>
            <tr><td>13</td><td>0.04</td></tr>
            <tr><td>14</td><td>0.06</td></tr>
            <tr><td>15</td><td>0.03</td></tr>
            <tr><td>16</td><td>0.03</td></tr>
          </table>

          <p>To be clear, the stimulus coordinate for the stimuli would be (1,1) for stimulus 1, (2,1) for stimulus 2, &hellip;, (4,4) for stimulus 16.</p>
 
          <p>Try fitting the GCM to this data using hook. Free parameters should be the sensitivity <em>c</em>, the dimensional attention weights <em>w<sub>1</sub></em> and <em>w<sub>2</sub></em> = 1 - <em>w<sub>1</sub></em>, and the category response biases <em>&beta;<sub>A</sub></em> and <em>&beta;<sub>B</sub></em> = 1 - <em>&beta;<sub>A</sub></em>. Note that this means that there are three free parameters. You will need to modify the code I gave you to take these parameter dependencies into account. It might be easier to use the <a href="hook.m">hook.m</a> search routine because it has min and max values built into the function.</p>
        </div>
        <div class="answer">
          <p>If my program works (<a href="homework_03.m">homework_03.m</a>, <a href="var_bwc_gcm.m">var_bwc_gcm.m</a>), the best fit is:</p>
          <ul>
            <li>b = 0.5303</li>
            <li>w = 0.3525</li>
            <li>c = 0.1000</li>
          </ul>
        </div>
      </li>
    </ol>
  </body>
</html>
